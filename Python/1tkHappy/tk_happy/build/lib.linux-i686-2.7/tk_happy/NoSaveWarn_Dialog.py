#!/usr/bin/env python
# tk_happy generated code. DO NOT EDIT THE FOLLOWING. section top
from Tkinter import *
from tkSimpleDialog import Dialog

# NOTICE... this file is generated by tk_happy.
# Any code or comments added by the user must be in designated areas ONLY.
# User additions will be lost if they are placed in code-generated areas.

class _Dialog(Dialog):
    # use dialogOptions dictionary to set any values in the dialog
    def __init__(self, parent, title = None, dialogOptions=None):
        self.dialogOptions = dialogOptions
        Dialog.__init__(self, parent, title)

class Nosavewarn(_Dialog):

    def body(self, master):
        dialogframe = Frame(master, width=412, height=100)
        dialogframe.pack()


        self.Label_1 = Label(dialogframe,text="WARNING... Did Not Save File", height="0", width="30", relief="flat", pady="1", font="{MS Sans Serif} 18")
        self.Label_1.place(x=0, y=24)

        self.Label_2 = Label(dialogframe,height="0", text="Make sure that file suffix is .def", font="{MS Sans Serif} 12", relief="flat", width="28")
        self.Label_2.place(x=96, y=60)
        # >>>>>>insert any user code below this comment for section top


    # tk_happy generated code. DO NOT EDIT THE FOLLOWING. section Master_Configure
    def Master_Configure(self, event):
        pass
        # >>>>>>insert any user code below this comment for section Master_Configure
        # replace, delete, or comment-out the following
        if event.widget != self.master:
            if self.w != -1:
                return
        x = self.master.winfo_x()
        y = self.master.winfo_y()
        w = self.master.winfo_width()
        h = self.master.winfo_height()
        if (self.x, self.y, self.w, self.h) == (-1,-1,-1,-1):
            self.x, self.y, self.w, self.h = x,y,w,h
        if self.w!=w or self.h!=h:
            print "Master reconfigured... make resize adjustments"
        print "executed method Master_Configure"


    # tk_happy generated code. DO NOT EDIT THE FOLLOWING. section dialog_validate
    def validate(self):
        self.result = {} # return a dictionary of results
    
        # >>>>>>insert any user code below this comment for section dialog_validate
        # set values in "self.result" dictionary for return
        # for example...
        # self.result["age"] = self.Entry_2_StringVar.get() 


        self.result["test"] = "test message" 
        return 1
# tk_happy generated code. DO NOT EDIT THE FOLLOWING. section end


    def apply(self):
        print 'apply called'

class _Testdialog:
    def __init__(self, master):
        frame = Frame(master, width=300, height=300)
        frame.pack()
        self.master = master
        self.x, self.y, self.w, self.h = -1,-1,-1,-1
        
        self.Button_1 = Button(text="Test Dialog", relief="raised", width="15")
        self.Button_1.place(x=84, y=36)
        self.Button_1.bind("<ButtonRelease-1>", self.Button_1_Click)

    def Button_1_Click(self, event): #click method for component ID=1
        dialog = Nosavewarn(self.master, "Test Dialog")
        print '===============Result from Dialog===================='
        print dialog.result
        print '====================================================='

def main():
    root = Tk()
    app = _Testdialog(root)
    root.mainloop()

if __name__ == '__main__':
    main()
