(dp1
S'wid.pmw.timecounter.opt.uphourarrow'
p2
(dp3
S'Links'
p4
(lp5
sS'Text'
p6
S">wid.pmw.timecounter.arrow 'up','inc','hour'"
p7
sS'Hotlinks'
p8
(lp9
sS'Comments'
p10
(lp11
sS'Wip'
p12
I0
sS'Plurals'
p13
(lp14
sS'Abstracts'
p15
(lp16
ssS'load.widgets.missing'
p17
(dp18
S'Links'
p19
(lp20
S'&maintained'
p21
asS'Text'
p22
S'{H Missing widget</s> noticed at load time}\n\nIn the course of loading the @2 I came across @0 widget</s> which <is/are> requested but no widget of that name is\ndefined in the configuration file. The following list shows details about the widget</s> in question:\n\n@1\n\nIf you choose {GDelete Widgets} then I will continue with the load but the references to the missing widget</s> will\nbe deleted. All code which is &maintained by $$ will be in good shape after the deletion but any of your code that\nreferenced the deleted widgets will need to be revised.\n\nIf you choose {gCancel} then loading of the @4 is cancelled.'
p23
sS'Hotlinks'
p24
(lp25
sS'Comments'
p26
(lp27
S'2008-09-26'
p28
aS'@0 The number of missing widgets'
p29
aS'@1 List of missing widgets'
p30
aS'@2 project or from'
p31
asS'Wip'
p32
I0
sS'Plurals'
p33
(lp34
I0
asS'Abstracts'
p35
(lp36
ssS'code-edit.poptolinenumber'
p37
(dp38
g4
(lp39
S'&remembered line'
p40
aS'&editor actions'
p41
asg6
S'{HCode editor - Pop to line number}\n\n Key:   $tActionPopToLineNumber\n Menu: {fEdit/Pop to line number}\n\nThe top entry on the stack of &remembered line numbers is popped and we go to\nthat line.\n\nCode &editor actions'
p42
sg8
(lp43
sg10
(lp44
S'2005/04/07'
p45
asg12
I0
sg13
(lp46
sg15
(lp47
S'Code editor - Pop to line number'
p48
assS'color.yellow'
p49
(dp50
S'Links'
p51
(lp52
sS'Text'
p53
S'{HYellow}\n\n {f#ADFF2F}  green yellow\n {f#ADFF2F}  GreenYellow\n {f#FFFACD}  lemon chiffon\n {f#FFFACD}  LemonChiffon\n {f#FFFACD}  LemonChiffon1\n {f#EEE9BF}  LemonChiffon2\n {f#CDC9A5}  LemonChiffon3\n {f#8B8970}  LemonChiffon4\n {f#FAFAD2}  light goldenrod yellow\n {f#FFFFE0}  light yellow\n {f#FAFAD2}  LightGoldenrodYellow\n {f#FFFFE0}  LightYellow\n {f#FFFFE0}  LightYellow1\n {f#EEEED1}  LightYellow2\n {f#CDCDB4}  LightYellow3\n {f#8B8B7A}  LightYellow4\n {f#FFFF00}  yellow\n {f#9ACD32}  yellow green\n {f#FFFF00}  yellow1\n {f#EEEE00}  yellow2\n {f#CDCD00}  yellow3\n {f#8B8B00}  yellow4\n {f#9ACD32}  YellowGreen'
p54
sS'Hotlinks'
p55
(lp56
sS'Comments'
p57
(lp58
sS'Wip'
p59
I0
sS'Plurals'
p60
(lp61
sS'Abstracts'
p62
(lp63
ssS'wid.pmw.counter.opt.orient'
p64
(dp65
g4
(lp66
sg6
S'{HCounter - orient}\n\no {ghorizontal}\n   The arrow buttons appear to the left and right of the entryfield.\n\no {gvertical}\n   The arrow buttons appear above and below the entryfield.'
p67
sg8
(lp68
sg10
(lp69
S'2006/03/18'
p70
asg12
I0
sg13
(lp71
sg15
(lp72
ssS'wid.tkinter.listbox.opt.selectborderwidth'
p73
(dp74
g4
(lp75
sg6
S'>option.selectborderwidth.generic "Listbox", "text"'
p76
sg8
(lp77
sg10
(lp78
sg12
I0
sg13
(lp79
sg15
(lp80
ssS'form-properties-dialog-main'
p81
(dp82
g4
(lp83
S'=form.main.info'
p84
aS'=form-properties-dialog-other'
p85
asg6
S'{HMain Form "Derive-From"}\n\nThis dialog is where you can change the class from which the main form is to\nbe derived. Note that the main form of the main module {Lis\nspecial=form.main.info} and as such it can derive only from {fTkinter.Frame}\nor from {fPmw.ScrolledFrame}; that explains why the {fToplevel} radio button\nchoices are disabled in the dialog.\n\nThe form must derive, directly or indirectly, from either {gFrame},\n{gScrolledFrame} or from a class which provides equivalent functionality. If\nyou think you want to derive from {fCanvas}, {fText} or something like that,\n{lclick here=form-properties-dialog-other}. In any case, at project startup\ntime the {fFrame} or {fScrolledFrame} is packed into the root {fToplevel}\nwhich is created by Tkinter.\n\nFor advanced user, you can choose to derive from something which was itself\nderived from either {gFrame} or {gScrolledFrame}. This will be the case if\nyou want to use a class which was derived from one of these but adds\nadditional functionality. To do this choose one of:\n\n o {gA widget derived from Tkinter.Frame}\n o {gA widget derived from Pmw.ScrolledFrame}\n\nand then key in the name of the actual class from which to derive. $$ does\nnot check that the class you specify is in fact derived from {gFrame},\n{gScrolledFrame} or something which provides equivalent functionality; if you\nlie about this you will just crash and burn when you go to run the resulting\ncode, OK?'
p86
sg8
(lp87
sg10
(lp88
S'2005/04/30'
p89
asg12
I0
sg13
(lp90
sg15
(lp91
S'Setting the class from which the main form derives'
p92
assS'wid.pmw.radioselect.opt.frame'
p93
(dp94
g4
(lp95
sg6
S'{HRadioSelect - frame}\n\nIf the label component has been created (that is, the {glabelpos} option is not\nNone), the frame component is created to act as the container of the buttons\ncreated by the add() method. If there is no label component, then no frame\ncomponent is created and the hull component acts as the container.'
p96
sg8
(lp97
sg10
(lp98
S'2006/03/21'
p99
asg12
I0
sg13
(lp100
sg15
(lp101
ssS'wid.tkinter.menu.opt.disabledforeground'
p102
(dp103
g4
(lp104
S'&color'
p105
asg6
S'{HMenu - disabledforeground}\n\nThe &color of the text for items whose state is DISABLED.'
p106
sg8
(lp107
sg10
(lp108
S'2005/04/19'
p109
asg12
I0
sg13
(lp110
sg15
(lp111
ssS'wid.pmw.scrolledcanvas.opt.labelpos'
p112
(dp113
g4
(lp114
sg6
S">option.pmw.labelpos.generic 'ScrolledCanvas'"
p115
sg8
(lp116
sg10
(lp117
sg12
I0
sg13
(lp118
sg15
(lp119
ssS'wid.tkinter.listbox.opt.pyclass'
p120
(dp121
g4
(lp122
sg6
S'>option.pyclass.generic "Listbox"'
p123
sg8
(lp124
sg10
(lp125
sg12
I0
sg13
(lp126
sg15
(lp127
ssS'wid.pmw.scrolledtext.opt.horizscrollbar'
p128
(dp129
g4
(lp130
sg6
S'{HScrolledText - horizscrollbar}\n\nThe horizontal scrollbar. Its component group is Scrollbar.'
p131
sg8
(lp132
sg10
(lp133
S'2006/03/23'
p134
asg12
I0
sg13
(lp135
sg15
(lp136
ssS'wid.pmw.optionmenu.overview'
p137
(dp138
g4
(lp139
sg6
S'{HWhat is: An OptionMenu widget}\n\nAn option menu consists of a menu button and an associated menu which pops up\nwhen the button is pressed. The text displayed in the menu button is updated\nwhenever an item is selected in the menu. The currently selected value can be\nretrieved from the megawidget.'
p140
sg8
(lp141
sg10
(lp142
S'2006/03/21'
p143
asg12
I0
sg13
(lp144
sg15
(lp145
S'What is: An OptionMenu widget'
p146
assS'wid.tkinter.checkbutton.opt.command'
p147
(dp148
g4
(lp149
sg6
S'>option.command.generic "Checkbutton", "the user changes the state of the @0"'
p150
sg8
(lp151
sg10
(lp152
sg12
I0
sg13
(lp153
sg15
(lp154
ssS'option.label.generic'
p155
(dp156
g4
(lp157
S'&new mexico tech'
p158
asg6
S"{H@0 - label}\n\nYou can display a label within the @0 widget by setting this option to the\n@0's text. The label appears in the top left corner if the @0 is horizontal,\nor the top right corner if vertical.\n\nThe default is no label.\n\n$nmt"
p159
sg8
(lp160
sg10
(lp161
S'2005/03/04'
p162
asg12
I0
sg13
(lp163
sg15
(lp164
ssS'code-edit.action.pastefile'
p165
(dp166
g4
(lp167
S'=code-editor.actions-tab'
p168
aS'&editor actions'
p169
asg6
S'{HCode editor - Paste file}\n\n Key:   $tActionPasteFile\n Menu: {fEdit/Paste file}\n\n\nA file of your choosing is inserted at the current cursor location. Any {Ltab=code-editor.actions-tab} characters in the file will be replaced\nby an appropriate number of spaces as part of the paste operation.\n\nCode &editor actions'
p170
sg8
(lp171
sg10
(lp172
S'2005/04/07'
p173
asg12
I0
sg13
(lp174
sg15
(lp175
S'Code editor - Paste file'
p176
assS'wid.pmw.combobox.opt.selectioncommand'
p177
(dp178
g4
(lp179
sg6
S">option.pmw.selectioncommand.generic 'ComboBox'"
p180
sg8
(lp181
sg10
(lp182
sg12
I0
sg13
(lp183
sg15
(lp184
ssS'forms.derivation.explained'
p185
(dp186
g4
(lp187
S'=form-properties-dialog-other'
p188
asg6
S"{HDerivation of forms}\n\n$$ forms have to derive, either directly or indirectly, from the widgets\n{gTkinter.Toplevel}, {gTkinter.Frame} {gPmw.ScrolledFrame} or from something\nwhich provides equivalent functionality.\n\no {BDirectly}\n   In this case the form class derives directly from the corresponding Tk\n  widget and the code to create the class (which is generated automatically\n  by $$) will look something like one of these:\n\n  {gclass MyForm(Toplevel):}\n   {gclass MyForm(Frame):}\n   {gclass MyForm(ScrolledFrame):}\n\no {BIndirectly}\n\n   In this case the form class derives from some widget which one way or\n  another is derived from either Toplevel, Frame, ScrolledFrame or\n  equivalent. For example, if {gSpam} is derived from {gEggs}, and {gEggs} is\n  derived from {gParrot} and {gParrot} is derived from {gFrame} then it is\n  perfectly acceptable to derive a $$ form from {gSpam}. The code to create\n  the class (which is automatically generated by $$) would, for the example\n  described, look like:\n\n  {gclass MyForm(Spam):}\n\n  $$ Doesn't check to make sure that what you are deriving from is correct.\n  It's up to you to make sure that what you are deriving from is itself\n  derived from {gToplevel}, {gFrame}, {gScrolledFrame} or something which is\n  compatible with them. If you lie about this you will just crash and burn.\n\n  If you think you want to derive a form from Canvas, Text or some other such\n  widget {lclick here=form-properties-dialog-other}."
p189
sg8
(lp190
sg10
(lp191
S'2005/05/18'
p192
asg12
I0
sg13
(lp193
sg15
(lp194
S'Derivation of forms explained'
p195
assS'wid.pmw.scrolledcanvas.opt.usehullsize'
p196
(dp197
g4
(lp198
sg6
S">option.pmw.usehullsize.generic 'ScrolledCanvas', 'canvas'"
p199
sg8
(lp200
sg10
(lp201
sg12
I0
sg13
(lp202
sg15
(lp203
ssS'wid.tkinter.scale.opt.pyclass'
p204
(dp205
g4
(lp206
sg6
S'>option.pyclass.generic "Scale"'
p207
sg8
(lp208
sg10
(lp209
sg12
I0
sg13
(lp210
sg15
(lp211
ssS'wid.tkinter.menubutton.opt.cursor'
p212
(dp213
g4
(lp214
sg6
S'>option.cursor.generic "Menubutton"'
p215
sg8
(lp216
sg10
(lp217
sg12
I0
sg13
(lp218
sg15
(lp219
ssS'wid.tkinter.menubutton.opt.wraplength'
p220
(dp221
g4
(lp222
sg6
S'>option.wraplength.generic "Menubutton"'
p223
sg8
(lp224
sg10
(lp225
sg12
I0
sg13
(lp226
sg15
(lp227
ssS'buffet.widget.scale'
p228
(dp229
g4
(lp230
sg6
S'>buffet.widget.generic "Scale"'
p231
sg8
(lp232
sg10
(lp233
sg12
I0
sg13
(lp234
sg15
(lp235
ssS'wid.tkinter.radiobutton.opt.relief'
p236
(dp237
g4
(lp238
sg6
S'>option.relief.generic "Radiobutton"'
p239
sg8
(lp240
sg10
(lp241
sg12
I0
sg13
(lp242
sg15
(lp243
ssS'bind.eventwizard.progress'
p244
(dp245
g4
(lp246
S'&event'
p247
aS'&event'
p248
asg6
S'{HEvent wizard - Progress Area}\n\nThe "Progress Indicator" at the top of the &Event String Wizard shows the\n&event string being built as you step through the process of making selections\nunder the Wizards direction.'
p249
sg8
(lp250
sg10
(lp251
sg12
I0
sg13
(lp252
sg15
(lp253
S'The Progress-Area at the top of the Bind Event Wizard'
p254
assS'wid.pmw.entryfield.opt.invalidcommand'
p255
(dp256
g4
(lp257
S'&command option'
p258
aS'&event'
p259
aS'&handler'
p260
asg6
S'{HEntryField - invalidcommand}\n\nThis &command option specifies the name of an &event &handler to\nbe executed when invalid text is entered and the text is restored to its\nprevious value (that is, when the {ivalidate} function returns Pmw.ERROR). It\nis also called if an attempt is made to set invalid text in a call to\n{fsetentry()}. If not specified, the usual action is to call {iself.bell}.'
p261
sg8
(lp262
sg10
(lp263
S'2006/03/19'
p264
asg12
I0
sg13
(lp265
sg15
(lp266
ssS'wid.tkinter.checkbutton.opt.offvalue'
p267
(dp268
g4
(lp269
sg6
S'>option.offvalue.generic "Checkbutton"'
p270
sg8
(lp271
sg10
(lp272
sg12
I0
sg13
(lp273
sg15
(lp274
ssS'option.image.generic'
p275
(dp276
g4
(lp277
S'&image'
p278
asg6
S'{H@0 - image}\n\nAn &image to be displayed on this @0 (instead of text). If you supply both\ntext and image options, then the text option is ignored and the image option\nis used.\n\nIf, in addition to providing the {gimage} option, you also supply a\n{gselectimage} option, then:\n\n o the {gimage} image will be displayed when this @0 is not set, and\n o the {gselectimage} image will be displayed with this @0 is set.'
p279
sg8
(lp280
sg10
(lp281
S'2005/03/02'
p282
asg12
I0
sg13
(lp283
sg15
(lp284
ssS'wid.pmw.timecounter.opt.upminutearrow'
p285
(dp286
g4
(lp287
sg6
S">wid.pmw.timecounter.arrow 'up','inc','minute'"
p288
sg8
(lp289
sg10
(lp290
sg12
I0
sg13
(lp291
sg15
(lp292
ssS'wid.pmw.notebook.opt.createcommand'
p293
(dp294
g4
(lp295
S'&command option'
p296
aS'&event'
p297
aS'&handler'
p298
asg6
S'{HNoteBook - createcommand}\n\nA &command option which specifies the &event &handler to call when a page is\nselected for the first time. The function is called with a single argument,\nwhich is the name of the selected page, and is called before the {fraisecommand}\nfunction. This allows the creation of the page contents to be deferred until\nthe page is first displayed.'
p299
sg8
(lp300
sg10
(lp301
S'2006/03/21'
p302
asg12
I0
sg13
(lp303
sg15
(lp304
ssS'option.nametop.generic'
p305
(dp306
g4
(lp307
sg6
S"{H@0 - name}\n\nThis @0 is the outer-most container of the form and thus it's {gname}\noption sets the name of the class that constitutes the form.\n\nThis differs from the {gname} option of regular widgets and of sub-frames\nwhere the {gname} option specifies the name by which the widget is known\ninside the form."
p308
sg8
(lp309
sg10
(lp310
S'2006/03/26'
p311
asg12
I0
sg13
(lp312
sg15
(lp313
ssS'bind.change.choice'
p314
(dp315
g4
(lp316
S'&binding'
p317
aS'&binding'
p318
aS'&event'
p319
aS'&handler'
p320
aS'&binding'
p321
aS'&event'
p322
aS'&handler'
p323
aS'&binding'
p324
aS'&binding'
p325
aS'&handler'
p326
aS'&handler'
p327
aS'&binding'
p328
aS'&command option'
p329
aS'&handler'
p330
aS'&handler'
p331
aS'&binding'
p332
aS'&command option'
p333
aS'&binding'
p334
aS'&handler'
p335
aS'&handler'
p336
aS'&handler'
p337
aS'&binding'
p338
aS'&command option'
p339
aS'&handler'
p340
aS'&binding'
p341
aS'&handler'
p342
aS'&binding'
p343
aS'&command option'
p344
aS'&event'
p345
aS'&handler'
p346
aS'&binding'
p347
aS'&binding'
p348
aS'&handler'
p349
aS'&handler'
p350
aS'&binding'
p351
aS'&command option'
p352
aS'=howto.find.handler.references'
p353
asg6
S'{HEvent handler name change}\n\nYou just finished revising a &binding. Before you started the revision, the &binding\nreferred to an &event &handler named "@0". You changed the &binding so it now referrs to an\n&event &handler named "@1", which doesn\'t yet exist.\n\nIf this &binding were the only &binding that referred to the &handler "@0" then we would\nsimply have changed the name of the &handler to "@1" and carried on without bothering you.\nHowever, @2 other &binding</s> or &command option</s> (which could be in this or other\nwidgets) also refer<s/> to &handler "@0" and we need you to make a choice as to what happens\nnext.\n\no If your intent is to change the name of the &handler so that {ball} the &bindings and\n  &command options (including the current &binding) which used to refer to &handler "@0" now\n  will refer to &handler "@1" then click on the {gChange Name} button. This will change the\n  name of the &handler and update any &bindings and &command options as needed.\n\no If your intent is to create a new &handler named "@1" just for the current &binding, and\n  you want to leave &handler "@0" (and all the &bindings and &command options that refer to\n  it) alone then click on the {gNew Handler} button. This will create a new &event &handler\n  named "@1" and the current &binding will be the only &binding that refers to that\n  &handler. The &handler "@0" will continue to exist and any other &bindings and &command\n  options that refer to it will stay as-is.\n\nIf you are wondering where the other reference</s> <is/are> you can {Lfind\nout=howto.find.handler.references}.\n\nIf neither of the above descriptions match what you want to do, then click the {GCancel}\nbutton to exit without making any changes.'
p354
sg8
(lp355
sg10
(lp356
S'2005/05/14'
p357
aS'@0 The original name of the event handler'
p358
aS'@1 The new name of the event handler'
p359
aS'@2 The number of other references to the old handler name'
p360
asg12
I0
sg13
(lp361
I2
asg15
(lp362
ssS'load.options.reset'
p363
(dp364
g4
(lp365
S'&config file'
p366
aS'&option editor'
p367
aS'&config file'
p368
aS'&config file'
p369
asg6
S'{HInvalid options at load time}\n\nFor each widget defined in the &config file there are a bunch of options that you can set\nusing the &option editor. The @1 you are trying to load has at least one instance of a\nwidget with an option value which is not a valid value according to the current &config\nfile. This is probably the result of changes made to the config file, or of loading a @1 that\ncame from another $$ installation.\n\nThe &config file is the ultimate authority on what value options are allowed to have. If you\ncontinue then I will set each option in question to the default value for that option\naccording to the current config file. Your only alternate choice is to cancel loading of the\n@1.\n\nIn the list that follows {bModule} and {bForm} indicate where in the project the problem was\nfound. {bWidget} is the name by which the widget-instance was known within the form.\n{bOption} is the name of the option in question. {bOriginal} is the invalid value that came\nin with this @1 while {bRevised} is the default value that the option will be set to if you\ncontinue.\n\n@0'
p370
sg8
(lp371
sg10
(lp372
S'2006/03/30'
p373
aS'@0 List of info for user'
p374
aS"@1 'project' or 'form'"
p375
asg12
I0
sg13
(lp376
sg15
(lp377
ssS'wid.pmw.notebook.opt.borderwidth'
p378
(dp379
g4
(lp380
S'&dimension'
p381
aS'&default'
p382
asg6
S'{HNoteBok - borderwidth}\n\nA &dimensioned number giving the width of the border drawn around each tab and around the selected page. The\n&default is 2 pixels.'
p383
sg8
(lp384
sg10
(lp385
S'2006/03/21'
p386
asg12
I0
sg13
(lp387
sg15
(lp388
ssS'widget-buffet'
p389
(dp390
g4
(lp391
S'&layout area'
p392
aS'=buffet.slidearrow'
p393
asg6
S'{HWidget Buffet}\n\n{P$imgpr-help-WidgetBuffet2.ppm}\n\nThis is the clump of buttons at the bottom of the &layout area. To add new\nwidgets to your form, drag them from the Widget Buffet and drop them at the\ndesired location on your form.\n\n{BTabbed}\n\nSince there are more widgets available than will fit in a single row, the\nWidget Buffet is tabbed. Select the various tabs to see all the widgets\navailable.\n\n{BHints}\n\nPlace the mouse cursor over a Widget Buffet button and hold it still for a\nsecond to see a pop-up hint telling you the name of that particular widget.\n\n{BSliding}\n\nDepending on the size of your screen there may be more widgets in a single\ntab than can be displayed at once. In this case the one or both of the\n{Larrows=buffet.slidearrow} on either side of the Widget Buffet will be\nactive (black instead of gray). Clicking a black arrow will slide the stack\nof icons in the direction of the arrow, revealing some or all of the\npresently hidden icons.\n\n{BHelp}\n\nTo get more information about a particular widget in the buffet, position the\nmouse cursor over it and click the $hb. $help'
p394
sg8
(lp395
S'widget buffet'
p396
asg10
(lp397
S'2005/02/24'
p398
asg12
I0
sg13
(lp399
sg15
(lp400
S'The Widget Buffet is the source of widgets for forms'
p401
assS'module.delete.confirmation'
p402
(dp403
g4
(lp404
S'&module'
p405
aS'&project'
p406
aS'&module'
p407
aS'&project'
p408
aS'&module'
p409
asg6
S'{HDo you really want to delete this module?}\n\nYou just asked to delete the &module "{b@0}" from the current &project. {BOnce\nthe module is deleted it can\'t be un-deleted} so be sure about this before\ngoing ahead.\n\nClick {gDelete} to delete the &module from the &project.\n\nClick {gCancel} to cancel the &module deletion.'
p410
sg8
(lp411
sg10
(lp412
S'2005/05/25'
p413
asg12
I0
sg13
(lp414
sg15
(lp415
ssS'buffet.widget.combobox'
p416
(dp417
g4
(lp418
sg6
S'>buffet.widget.generic2 "Pmw.ComboBox", \'\', \'wid.pmw.combobox.overview\''
p419
sg8
(lp420
sg10
(lp421
sg12
I0
sg13
(lp422
sg15
(lp423
ssS'code-edit.action.copytofile'
p424
(dp425
g4
(lp426
S'&editor actions'
p427
asg6
S'{HCode editor - Copy to file}\n\n Key:   $tActionCopyToFile\n Menu: {fEdit/Copy to file}\n\nYou are prompted for a file name and the currently selected text is copied to\nthat file.\n\nCode &editor actions'
p428
sg8
(lp429
sg10
(lp430
S'2005/04/07'
p431
asg12
I0
sg13
(lp432
sg15
(lp433
S'Code editor - copy to file'
p434
assS'wid.tkinter.checkbutton.opt.foreground'
p435
(dp436
g4
(lp437
sg6
S'>option.foreground.generic "Checkbutton"'
p438
sg8
(lp439
sg10
(lp440
sg12
I0
sg13
(lp441
sg15
(lp442
ssS'wid.tkinter.menubutton.opt.width'
p443
(dp444
g4
(lp445
sg6
S'>option.width.generic "Menubutton"'
p446
sg8
(lp447
sg10
(lp448
sg12
I0
sg13
(lp449
sg15
(lp450
ssS'option-focus'
p451
(dp452
g4
(lp453
S'=method.universal.tk_focusfollowsmouse'
p454
aS'&event'
p455
aS'&binding'
p456
aS'&new mexico tech'
p457
asg6
S'{HFocus - Routing keyboard input}\n\nTo say a widget has focus means that keyboard input is currently directed to\nthat widget.\n\no By focus traversal, we mean the sequence of widgets that will be visited as\n  the user moves from widget to widget with the tab key. See below for the\n  rules for this sequence.\n\no You can traverse backwards using shift-tab.\n\no The Entry and Text widgets are intended to accept keyboard input, and if an\n  entry or text widget currently has the focus, any characters you type into\n  it will be added to its text. The usual editing characters such as\n  CursorLeft and CursorRight will have their usual effects.\n\no Because Text widgets can contain tab characters, you must use the special\n  key sequence control-tab to move the focus past a text widget.\n\no Most of the other types of widgets will normally be visited by focus\n  traversal, and when they have focus:\n\n  o Button widgets can be "pressed" by pressing the spacebar.\n  o Checkbutton widgets can be toggled between set and cleared states using\n    the spacebar.\n  o In Listbox widgets, the CursorUp and CursorDown keys scroll up or down\n    one line; the PageUp and PageDown keys scroll by pages; and the spacebar\n    selects the current line, or de-selects it if it was already selected.\n  o You can set a Radiobutton widget by pressing the spacebar.\n  o Horizontal Scale widgets respond to the CursorLeft and CursorRight keys,\n    and vertical ones respond to CursorUp and CursorDown.\n  o In a Scrollbar widget, the PageUp and PageDown keys move the scrollbar by\n    pageloads. The CursorUp and CursorDown keys will move vertical scrollbars\n    by units, and the CursorLeft and CursorRight keys will move horizontal\n    scrollbars by units.\n\no Many widgets are provided with an outline called the focus highlight that\n  shows the user which widget has the highlight. This is normally a thin\n  black frame located just outside the widget\'s border (if any). For widgets\n  that don\'t normally have a focus highlight (specifically, frames, labels,\n  and menus), you can set the highlightthickness option to a nonzero value to\n  make the focus highlight visible.\no You can also change the color of the focus highlight using the\n  highlightcolor option.\no Widgets of class Frame, Label, and Menu are not normally visited by the\n  focus. However, you can set their takefocus options to 1 to get them\n  included in focus traversal. You can also take any widget out of focus\n  traversal by setting its takefocus option to 0.\n\nThe order in which the tab key traverses the widgets is:\n\no For widgets that are children of the same parent, focus goes in the same\n  order the widgets were created.\no For parent widgets that contain other widgets (such as frames), focus\n  visits the parent widget first (unless its takefocus option is 0), then it\n  visits the child widgets, recursively, in the order they were created.\n\nTo sum up: to set up the focus traversal order of your widgets, create them\nin that order. Remove widgets from the traversal order by setting their\ntakefocus options to 0, and for those whose default takefocus option is 0,\nset it to 1 if you want to add them to the order.\n\nThe above describes the default functioning of input focus in Tkinter. There\nis another, completely different way to handle it: let the focus go wherever\nthe mouse goes; see {LUniversal Methods\n.tk_focusFollowsMouse()=method.universal.tk_focusfollowsmouse}\n\nYou can also add, change or delete the way any key on the keyboard functions\ninside any widget by using &event &bindings. \n$nmt'
p458
sg8
(lp459
S'focus'
p460
asg10
(lp461
S'2005/02/27'
p462
asg12
I0
sg13
(lp463
sg15
(lp464
S'Focus - Routing keyboard input'
p465
assS'wid.tkinter.toplevel.opt.highlightthickness'
p466
(dp467
g4
(lp468
sg6
S'>option.highlightthickness.generic "Toplevel"'
p469
sg8
(lp470
sg10
(lp471
sg12
I0
sg13
(lp472
sg15
(lp473
ssS'option.default'
p474
(dp475
g4
(lp476
sg6
S'{HHow to: Restore the default value of an option or pack setting}\n\nSo you set an option or pack setting to some value but now you would like to put it back to the default but you\ndon\'t remember what the default {bis}. What to do? No problem.\n\n{bWith an assist dialog}\n\nMany of the options (color, font, numbers, etc) pop up an "assist" dialog and the dialog will have a "Default" button\nthat will restore the default value.\n\n{bWith an entry area}\n\nSome options have an entry area right in the widgetator. If you make the entry blank then when you leave that option\n(by cursor up or down for example) then the option will be set to its default value.\n\n{bWith a list of choices}\n\nFor those options (justify, relief, take focus etc) where you choose from a list rather than entering a value the\ndefault choice is indicated by an asterisk as the last character.'
p477
sg8
(lp478
S'default'
p479
asg10
(lp480
S'2006/03/19'
p481
asg12
I0
sg13
(lp482
sg15
(lp483
S'How to: Restore the default value of an option or pack setting'
p484
assS'wid.tkinter.canvas.opt.yscrollincrement'
p485
(dp486
g4
(lp487
sg6
S'>option.yscrollincrement.generic "Canvas"'
p488
sg8
(lp489
sg10
(lp490
sg12
I0
sg13
(lp491
sg15
(lp492
ssS'wid.tkinter.checkbutton.opt.anchor'
p493
(dp494
g4
(lp495
sg6
S'>option.anchor.generic "Checkbutton"'
p496
sg8
(lp497
sg10
(lp498
sg12
I0
sg13
(lp499
sg15
(lp500
ssS'wid.pmw.scrolledframe.opt.horizflex'
p501
(dp502
g4
(lp503
S'&default'
p504
asg6
S"{HScrolledFrame - horizflex}\n\nSpecifies how the width of the scrollable interior frame should be resized\nrelative to the clipping frame.\n\n o If {g'fixed'}, the interior frame is set to the natural width, as\n   requested by the child widgets of the frame.\n\n o If {g'expand'} and the requested width of the interior frame is less than\n   the width of the clipping frame, the interior frame expands to fill the\n   clipping frame.\n\n o If {g'shrink'} and the requested width of the interior frame is more than\n   the width of the clipping frame, the interior frame shrinks to the width\n   of the clipping frame.\n\n o If {g'elastic'}, the width of the interior frame is always set to the\n   width of the clipping frame.\n\nThe &default is {g'fixed'}."
p505
sg8
(lp506
sg10
(lp507
S'2006/03/22'
p508
asg12
I0
sg13
(lp509
sg15
(lp510
ssS'option.repeatinterval.generic'
p511
(dp512
g4
(lp513
S'&new mexico tech'
p514
asg6
S'{H@0 - repeatinterval}\n\nThis option controls how often slider movement will repeat when {fbutton-1}\nis held down in the trough.\n\nThe unit is milliseconds and the default is 100 mS.\n\n$nmt'
p515
sg8
(lp516
sg10
(lp517
S'2005/03/06'
p518
asg12
I0
sg13
(lp519
sg15
(lp520
ssS'option.selectcolor.generic'
p521
(dp522
g4
(lp523
S'&new mexico tech'
p524
asg6
S'{H@0 - selectcolor}\n\nThe color of the @0 when it is set.\n\nThe default is red.\n\n$nmt'
p525
sg8
(lp526
sg10
(lp527
S'2005/03/06'
p528
asg12
I0
sg13
(lp529
sg15
(lp530
ssS'dialog-handlerreference'
p531
(dp532
g4
(lp533
S'&maintained'
p534
aS'&binding'
p535
aS'&command option'
p536
aS'&event'
p537
aS'&handler'
p538
aS'&event'
p539
aS'&command option'
p540
aS'&bind editor'
p541
aS'&command option'
p542
aS'&command option'
p543
aS'&option editor'
p544
aS'&maintained'
p545
aS'&bind editor'
p546
aS'&option editor'
p547
aS'&handler'
p548
asg6
S'{hThe event handler references dialog}\n\nThis dialog shows a list of all $$ &maintained &bindings and &command\noptions which reference the &event &handler named "@0". Each reference\nshows, on the left, the name of the widget and, on the right, the &event\nstring or &command option within that widget which makes the reference.\n\no You can tell event strings because they are enclosed in angle brackets\n  {f<like this>}. Event string type references are mainted by the widget\'s\n  &bind editor.\n\no &Command options do not have angle brackets. &Command option style\n  references are maintainted by the widget\'s &option editor.\n\nThe references show in this dialog are {ionly} those references which are\n&maintained by $$ via the &bind editor and the &option editor. Any\nreferences to this &handler which you have placed in your code by hand are\n{inot} reflected here.'
p549
sg8
(lp550
sg10
(lp551
S'2006/02/05'
p552
asg12
I0
sg13
(lp553
sg15
(lp554
S'The event handler references dialog'
p555
assS'wid.pmw.group.opt.ring'
p556
(dp557
g4
(lp558
sg6
S"{HGroup - ring}\n\nThis component acts as the enclosing ring around the groupchildsite. The\ndefault {gborderwidth} is 2 and the default {grelief} is 'groove'."
p559
sg8
(lp560
sg10
(lp561
S'2006/03/19'
p562
asg12
I0
sg13
(lp563
sg15
(lp564
ssS'wid.tkinter.scale.opt.relief'
p565
(dp566
g4
(lp567
sg6
S'>option.relief.generic "Scale"'
p568
sg8
(lp569
sg10
(lp570
sg12
I0
sg13
(lp571
sg15
(lp572
ssS'option.bigincrement.generic'
p573
(dp574
g4
(lp575
sg6
S'{H@0 - bigincrement}\n\nSome interactions with the @0 cause its value to change by "large"\nincrements; this option specifies the magnitude of the large increments. If\nspecified as 0, the large increments default to 1/10 the range of the @0.'
p576
sg8
(lp577
sg10
(lp578
S'2005/02/27'
p579
asg12
I0
sg13
(lp580
sg15
(lp581
ssS'wid.pmw.scrolledtext.opt.hscrollmode'
p582
(dp583
g4
(lp584
sg6
S">option.pmw.hscrollmode.generic 'ScrolledText'"
p585
sg8
(lp586
sg10
(lp587
sg12
I0
sg13
(lp588
sg15
(lp589
ssS'wid.tkinter.checkbutton.opt.selectcolor'
p590
(dp591
g4
(lp592
sg6
S'>option.selectcolor.generic "Checkbutton"'
p593
sg8
(lp594
sg10
(lp595
sg12
I0
sg13
(lp596
sg15
(lp597
ssS'wid.tkinter.menubutton.opt.relief'
p598
(dp599
g4
(lp600
sg6
S'>option.relief.generic "Menubutton"'
p601
sg8
(lp602
sg10
(lp603
sg12
I0
sg13
(lp604
sg15
(lp605
ssS'wid.tkinter.text.opt.relief'
p606
(dp607
g4
(lp608
sg6
S'>option.relief.generic "Text"'
p609
sg8
(lp610
sg10
(lp611
sg12
I0
sg13
(lp612
sg15
(lp613
ssS'wid.tkinter.scrollbar.opt.cursor'
p614
(dp615
g4
(lp616
sg6
S'>option.cursor.generic "Scrollbar"'
p617
sg8
(lp618
sg10
(lp619
sg12
I0
sg13
(lp620
sg15
(lp621
ssS'option.background.generic'
p622
(dp623
g4
(lp624
S'&color'
p625
asg6
S'{H@0 - background}\n\nThe normal background &color for this @0.'
p626
sg8
(lp627
sg10
(lp628
S'2005/02/26'
p629
asg12
I0
sg13
(lp630
sg15
(lp631
ssS'wid.pmw.scrolledframe.opt.border-frame'
p632
(dp633
g4
(lp634
S'&default'
p635
asg6
S'{HScrolledFrame - borderframe option}\n\nIf true, the {gborderframe} component will be created. The &default is True.'
p636
sg8
(lp637
sg10
(lp638
S'2006/03/22'
p639
asg12
I0
sg13
(lp640
sg15
(lp641
ssS'code-edit.action.forget'
p642
(dp643
g4
(lp644
S'&remembered line'
p645
aS'&editor actions'
p646
asg6
S'{HCode editor - Forget}\n\n Key:   None\n Menu: {fEdit/Forget}\n\nThe code editor keeps a stack of &remembered line numbers. This command tells\nit to forget any lines that have been remembered. Handy if you have a lot of\nline numbers on the stack that are no longer needed.\n\nCode &editor actions'
p647
sg8
(lp648
sg10
(lp649
S'2006/01/267'
p650
asg12
I0
sg13
(lp651
sg15
(lp652
ssS'layout.menu.project'
p653
(dp654
g4
(lp655
S'&layout area'
p656
aS'&project'
p657
aS'&project'
p658
aS'&project'
p659
aS'&project'
p660
aS'&project'
p661
aS'=project.clone'
p662
aS'&project'
p663
aS'&module'
p664
aS'&form'
p665
aS'&module'
p666
aS'&project'
p667
aS'&module'
p668
aS'&project'
p669
aS'&form'
p670
aS'=new-project-details'
p671
aS'&project'
p672
aS'&project'
p673
aS'&module'
p674
aS'&project'
p675
aS'&module'
p676
aS'&project'
p677
aS'&module'
p678
aS'&project'
p679
aS'&project'
p680
aS'&project'
p681
aS'&project'
p682
aS'&project'
p683
asg6
S'{HLayout area - Project menu}\n\nThe &layout area {gProject} menu is where you mess with an entire &project.\n\no {gLoad Project} Loads an existing &project from disk replacing the current &project. If the current &project has\n  been modified since the last save then a dialog pops up giving you an opportunity to save.\n\no {gSave Project} The current &project is saved to disk.\n\no (Save-As) There is no specific "save-as" command. If you want to create a copy of your project under a different\n  name {Lclick-here=project.clone}.\n\no {gRename Project} Gives you the opportunity to rename the current &project. Note that the the name of the project,\n  the name of the main &module of the project and the name of the main &form of the main &module are one and the\n  same thing. Thus renaming the &project will also rename the main &module of the &project and the main &form of the\n  main module.\n\no {gNew Project}\n   Creates a {Lnew project=new-project-details}, replacing the current &project. If the current &project has been\n  modified since the last save then a dialog pops up giving you an opportunity to save.\n\no {gBuild Project}\n   Gathers up all the code for all the &modules of the &project and writes them to disk as python source files. For\n  every &module in the &project there will be a corresponding file named "{g---.py}" where ---- is the name of the\n  &module.\n\no {gBuild + Run}\n   Builds the &project then runs it from within $$. If an error is encountered the error dialog allows you to go\n  directly to any line in the error chain.\n\no {gSave + Build}\n   Saves the &project, then builds it.\n\no {gSave + Build + Run}\n   Saves the &project, builds it then runs it. This is the safest choice when building and running your &project\n  from inside $$.\n\no {gExit}\n   Wraps up $$ and returns to the operating system. If the current &project has been modified since the last save\n  then a dialog pops up giving you an opportunity to save.'
p684
sg8
(lp685
sg10
(lp686
sg12
I0
sg13
(lp687
sg15
(lp688
S'The Layout-area project menu'
p689
aS'How to: Load a project'
p690
aS'How to: Save the current project'
p691
aS'How to: Rename the current project'
p692
aS'How to: Create a new project'
p693
aS'How to: Build (run) a project from inside $$.'
p694
aS'How to: Close $$ and return to the operating system.'
p695
assS'method.universal.tk_focusfollowsmouse'
p696
(dp697
g4
(lp698
S'&focus'
p699
aS'&new mexico tech'
p700
asg6
S'{HUniversal method - w.tk_focusFollowsMouse()}\n\nNormally, the input &focus cycles through a sequence of widgets determined by\ntheir hierarchy and creation order. You can, instead, tell Tkinter to force\nthe focus to be wherever the mouse is; just call this method. There is no\neasy way to undo it, however.\n\n$nmt'
p701
sg8
(lp702
sg10
(lp703
S'2005/02/27'
p704
asg12
I0
sg13
(lp705
sg15
(lp706
ssS'event-handler.whatis'
p707
(dp708
g4
(lp709
S'&event'
p710
aS'&event'
p711
aS'&binding'
p712
aS'&binding'
p713
aS'&bind editor'
p714
aS'&option editor'
p715
aS'&command option'
p716
aS'&maintained'
p717
aS'&maintained'
p718
aS'&bind editor'
p719
aS'&command option'
p720
aS'&option editor'
p721
aS'&code editor'
p722
aS'=dialog-handlerreference'
p723
aS'=dialog-handlerrename'
p724
aS'=dialog-handlerdelete'
p725
asg6
S'{HWhat is: An event handler}\n\nAn event handler is a python function which is called in response to some &event. A\nspecification that says "on this &event invoke that handler" is called a &binding.\n\nAlthough it is technically possible to create &bindings and event handlers manually in your\ncode, when using $$ you will almost always create bindings using the &bind editor (or the\n&option editor in the case of &command options) in which case the header of the\ncorresponding event handler is &maintained automatically for you. $$ &maintained event\nhandlers are kept in alphabetical order within the event handler section of the code, making\nthem easy to find.\n\nNote that you can quickly jump to the code of an event handler by double clicking on the\ncorresponding entry in the &bind editor or by double clicking on a &command option in the\n&option editor.\n\nWhen in the &code editor if you right-click over the header (the part on a different colored\nbackground) of an event handler a menu pops up from where you can:\n\n o {LFind out=dialog-handlerreference} which bindings and command options refer to the\n   handler.\n\n o {LRename=dialog-handlerrename} the handler.\n\n o {LDelete=dialog-handlerdelete} the handler.'
p726
sg8
(lp727
S'handler'
p728
asg10
(lp729
S'2006/02/08'
p730
asg12
I0
sg13
(lp731
sg15
(lp732
S'What is: An event handler'
p733
assS'project.clone'
p734
(dp735
S'Links'
p736
(lp737
sS'Text'
p738
S'{HHow to: clone / copy / save-as an entire project}\n\nThe officially sanctioned way to make a copy of a project under another name is thus:\n\n n Load the project you want to make a copy of.\n n From the {gProject} menu click on {gRename Project}.\n n Enter the name for the new copy and click {gOK}. The various necessary consistency checks happen at this point.\n n Save the renamed project.\n\nThis procedure will leave the original project untouched while creating a duplicate of the project under the new\nname.\n\nPlease note that using the operating system to rename an "{g.rpj}" file will {bnot} work. Well, the file will\nget renamed but when you go to load it there will be trouble because there is more to renaming a project than\njust changing the filename.'
p739
sS'Hotlinks'
p740
(lp741
sS'Comments'
p742
(lp743
S'2014-05-09'
p744
asS'Wip'
p745
I0
sS'Plurals'
p746
(lp747
sS'Abstracts'
p748
(lp749
S'How to: clone / copy / save-as an entire project'
p750
assS'wid.pmw.scrolledfield.opt.entry'
p751
(dp752
g4
(lp753
sg6
S"{HScrolledField - entry}\n\nThis is used to display the text and allows the user to scroll and select the\ntext. The state of this component is set to 'readonly' (or 'disabled' in\nearlier versions of Tcl/Tk which do not support 'readonly'), so that the user\nis unable to modify the text"
p754
sg8
(lp755
sg10
(lp756
S'2006/03/22'
p757
asg12
I0
sg13
(lp758
sg15
(lp759
ssS'wid.tkinter.button.opt.cursor'
p760
(dp761
g4
(lp762
sg6
S'>option.cursor.generic "Button"'
p763
sg8
(lp764
sg10
(lp765
sg12
I0
sg13
(lp766
sg15
(lp767
ssS'pack.option.pady'
p768
(dp769
g4
(lp770
S'&dimension'
p771
asg6
S'{HPack Option - pady}\n\nA &dimensioned number specifying the amount of padding to add outside the\nwidget on the top and bottom.'
p772
sg8
(lp773
sg10
(lp774
S'2005/05/19'
p775
asg12
I0
sg13
(lp776
sg15
(lp777
ssS'pack.option.padx'
p778
(dp779
g4
(lp780
S'&dimension'
p781
asg6
S'{HPack Option - padx}\n\nA &dimensioned number specifying the amount of padding to add outside the\nwidget on the left and right.'
p782
sg8
(lp783
sg10
(lp784
S'2005/05/19'
p785
asg12
I0
sg13
(lp786
sg15
(lp787
ssS'option.onvalue.generic'
p788
(dp789
g4
(lp790
S'&new mexico tech'
p791
asg6
S"{H@0 - onvalue}\n\nNormally, a @0's associated control variable will be set to 1 when it is set\n(on). You can supply an alternate value for the on state by setting onvalue\nto that value.\n\n$nmt"
p792
sg8
(lp793
sg10
(lp794
S'2004/03/06'
p795
asg12
I0
sg13
(lp796
sg15
(lp797
ssS'wid.tkinter.checkbutton.opt.activebackground'
p798
(dp799
g4
(lp800
sg6
S'>option.activebackground.generic "Checkbutton"'
p801
sg8
(lp802
sg10
(lp803
sg12
I0
sg13
(lp804
sg15
(lp805
ssS'wid.tkinter.menubutton.opt.anchor'
p806
(dp807
g4
(lp808
sg6
S'>option.anchor.generic "Menubutton"'
p809
sg8
(lp810
sg10
(lp811
sg12
I0
sg13
(lp812
sg15
(lp813
ssS'wid.tkinter.listbox.opt.foreground'
p814
(dp815
g4
(lp816
sg6
S'>option.foreground.generic "Listbox"'
p817
sg8
(lp818
sg10
(lp819
sg12
I0
sg13
(lp820
sg15
(lp821
ssS'wid.tkinter.menu.opt.selectcolor'
p822
(dp823
g4
(lp824
S'&color'
p825
aS'&new mexico tech'
p826
asg6
S'{HMenu - selectcolor}\n\nSpecifies the &color displayed in checkbuttons and radiobuttons when they are\nselected.\n\n$nmt'
p827
sg8
(lp828
sg10
(lp829
S'2005/04/19'
p830
asg12
I0
sg13
(lp831
sg15
(lp832
ssS'wid.tkinter.checkbutton.opt.height'
p833
(dp834
g4
(lp835
sg6
S'{HCheckbutton - width}\n\nAn integer specifying the height of the Checkbutton in {blines}.'
p836
sg8
(lp837
sg10
(lp838
S'2005/04/15'
p839
asg12
I0
sg13
(lp840
sg15
(lp841
ssS'option.spacing2.generic'
p842
(dp843
g4
(lp844
S'&dimension'
p845
aS'&new mexico tech'
p846
asg6
S'{H@0 - spacing2}\n\nThis option is a &dimensioned number which specifies how much extra vertical space to add between displayed lines of text when a logical line\nwraps.\n\n$nmt'
p847
sg8
(lp848
sg10
(lp849
S'2005/04/04'
p850
asg12
I0
sg13
(lp851
sg15
(lp852
ssS'assist-font'
p853
(dp854
g4
(lp855
S'=assist-code'
p856
aS'=help.index'
p857
asg6
S'{HThe option-editor font assist dialog}\n\nThis dialog assists you with the font for the current widget. You have three possibilities:\n\n n Use the default font by selecting that choice up at the top.\n\n n Choose a particular font by selecting the "Use this font" radio button; details below.\n\n n Enter {lcode=assist-code} of your choice to set the font. Do this by selecting the "Use this" radiobutton down\n   near the bottom then type your text in the adjacent entry. Whatever you enter will be used, verbatim, to set the\n   font. It can be a variable name, a function call, an expression, whatever.\n\n{HUse this font}\n\nIn the middle of the dialog is the font-selector where you get to run around pushing buttons and selecting fonts. A\nsample of the currently selected font will be shown near the bottom. That sample text is live so you can enter your\nown sample text if desired. When you click on {gOK} then the font selected will be set as the one to use with the\nwidget.\n\nThere can be a lot of fonts. If you type some text into the entry marked {gFilter} then only those fonts whose name\nmatches your text will be shown. For example, if you want a monospaced font then typing "mono" in the filter entry\nwill result in only those fonts with "mono" in their name being shown. The rules for font filtering are the same as\nthose used by the {lindex searcher=help.index}.'
p858
sg8
(lp859
sg10
(lp860
S'2006/04/13'
p861
asg12
I0
sg13
(lp862
sg15
(lp863
S'The option-editor font assist dialog'
p864
assS'wid.tkinter.checkbutton.opt.underline'
p865
(dp866
g4
(lp867
sg6
S'>option.underline.generic "Checkbutton"'
p868
sg8
(lp869
sg10
(lp870
sg12
I0
sg13
(lp871
sg15
(lp872
ssS'wid.tkinter.radiobutton.opt.anchor'
p873
(dp874
g4
(lp875
S'&new mexico tech'
p876
asg6
S'{HRadiobutton - anchor}\n\nIf the widget inhabits a space larger than it needs, this option specifies\nwhere the radiobutton will sit in that space.\n\nThe &default is CENTER.\n\nFor example, if you set anchor=NE, the radiobutton will be placed in the top\nright corner of the available space.\n\n$nmt'
p877
sg8
(lp878
sg10
(lp879
S'2005/04/27'
p880
asg12
I0
sg13
(lp881
sg15
(lp882
ssS'wid.tkinter.scale.opt.label'
p883
(dp884
g4
(lp885
sg6
S'>option.label.generic "Scale"'
p886
sg8
(lp887
sg10
(lp888
sg12
I0
sg13
(lp889
sg15
(lp890
ssS'wid.tkinter.label.opt.image'
p891
(dp892
g4
(lp893
S'&image'
p894
asg6
S'{HLabel - image}\n\nAn &image to be displayed on this Label (instead of text). If you supply both\ntext and image options, then the text option is ignored and the image option\nis used.'
p895
sg8
(lp896
sg10
(lp897
S'2005/04/18'
p898
asg12
I0
sg13
(lp899
sg15
(lp900
ssS'wid.pmw.combobox.opt.listheight'
p901
(dp902
g4
(lp903
sg6
S'{HComboBox - listheight}\n\nThe height, in pixels, of the dropdown ListBox.'
p904
sg8
(lp905
sg10
(lp906
S'2006/03/18'
p907
asg12
I0
sg13
(lp908
sg15
(lp909
ssS'wid.tkinter.toplevel.opt.borderwidth'
p910
(dp911
g4
(lp912
sg6
S'>option.borderwidth.generic "Toplevel"'
p913
sg8
(lp914
sg10
(lp915
sg12
I0
sg13
(lp916
sg15
(lp917
ssS'option.spacing3.generic'
p918
(dp919
g4
(lp920
S'&dimension'
p921
aS'&new mexico tech'
p922
asg6
S'{H@0 - spacing3}\n\nThis option is a &dimensioned number which specifies how much extra vertical space is added below each line of text.\nIf a line wraps, this space is added only after the last line it occupies on the display.\n\n$nmt'
p923
sg8
(lp924
sg10
(lp925
S'2005/04/04'
p926
asg12
I0
sg13
(lp927
sg15
(lp928
ssS'code-edit.action.cutappend'
p929
(dp930
g4
(lp931
S'&editor actions'
p932
asg6
S'{HCode editor - Cut append}\n\n Key:   $tActionCutAppend\n Menu: {fEdit/Cut append}\n\nThe currently selected text is cut and appended to any text already in the clipboard.\n\nThis is handy when you want to accumulate a number of items to be pasted into a given location. The clipboard is\ncleared by plain {gCut} or {gCopy} but not by {gCutAppend} nor by {gCopyAppend}.\n\nCode &editor actions'
p933
sg8
(lp934
sg10
(lp935
S'2005/04/07'
p936
asg12
I0
sg13
(lp937
sg15
(lp938
S'Code editor - cut appened'
p939
assS'wid.tkinter.frame.opt.class_'
p940
(dp941
g4
(lp942
sg6
S"{HFrame - class_}\n\nSpecifies a class for the window. This class will be used when querying the\noption database for the window's other options, and it will also be used\nlater for other purposes such as bindings. The class option can not be\nchanged with the configure widget command."
p943
sg8
(lp944
sg10
(lp945
S'2005/04/28'
p946
asg12
I0
sg13
(lp947
sg15
(lp948
ssS'wid.tkinter.entry.opt.insertborderwidth'
p949
(dp950
g4
(lp951
sg6
S'>option.insertborderwidth.generic "Entry"'
p952
sg8
(lp953
sg10
(lp954
sg12
I0
sg13
(lp955
sg15
(lp956
ssS'wid.tkinter.button.opt.state'
p957
(dp958
g4
(lp959
sg6
S'>option.state.generic "Button"'
p960
sg8
(lp961
sg10
(lp962
sg12
I0
sg13
(lp963
sg15
(lp964
ssS'gpl.txt'
p965
(dp966
g4
(lp967
sg6
S'{bGNU GENERAL PUBLIC LICENSE}\n {bVersion 2, June 1991}\n\nCopyright (C) 1989, 1991 Free Software Foundation, Inc.\n 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not\nallowed.\n\n{bPreamble}\n\n The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU\nGeneral Public License is intended to guarantee your freedom to share and change free software--to make sure the\nsoftware is free for all its users.  This General Public License applies to most of the Free Software Foundation\'s\nsoftware and to any other program whose authors commit to using it.  (Some other Free Software Foundation software\nis covered by the GNU Library General Public License instead.)  You can apply it to your programs, too.\n\n When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed\nto make sure that you have the freedom to distribute copies of free software (and charge for this service if you\nwish), that you receive source code or can get it if you want it, that you can change the software or use pieces of\nit in new free programs; and that you know you can do these things.\n\n To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to\nsurrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of\nthe software, or if you modify it.\n\n For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients\nall the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must\nshow them these terms so they know their rights.\n\n We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you\nlegal permission to copy, distribute and/or modify the software.\n\n Also, for each author\'s protection and ours, we want to make certain that everyone understands that there is no\nwarranty for this free software.  If the software is modified by someone else and passed on, we want its recipients\nto know that what they have is not the original, so that any problems introduced by others will not reflect on the\noriginal authors\' reputations.\n\n Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that\nredistributors of a free program will individually obtain patent licenses, in effect making the program proprietary.\nTo prevent this, we have made it clear that any patent must be licensed for everyone\'s free use or not licensed at\nall.\n\n The precise terms and conditions for copying, distribution and modification follow.\n\n{bGNU GENERAL PUBLIC LICENSE}\n\n TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\nn {n0}This License applies to any program or other work which contains a notice placed by the copyright holder\n  saying it may be distributed under the terms of this General Public License.  The "Program", below, refers to any\n  such program or work, and a "work based on the Program" means either the Program or any derivative work under\n  copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with\n  modifications and/or translated into another language.  (Hereinafter, translation is included without limitation\n  in the term "modification".) Each licensee is addressed as "you".\n\n  Activities other than copying, distribution and modification are not covered by this License; they are outside its\n  scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its\n  contents constitute a work based on the Program (independent of having been made by running the Program). Whether\n  that is true depends on what the Program does.\n\nn You may copy and distribute verbatim copies of the Program\'s source code as you receive it, in any medium,\n  provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and\n  disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty;\n  and give any other recipients of the Program a copy of this License along with the Program.\n\n  You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty\n  protection in exchange for a fee.\n\nn You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program,\n  and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet\n  all of these conditions:\n\n  n {na}You must cause the modified files to carry prominent notices stating that you changed the files and the date\n    of any change.\n\n  n You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the\n    Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this\n    License.\n\n  n If the modified program normally reads commands interactively when run, you must cause it, when started running\n    for such interactive use in the most ordinary way, to print or display an announcement including an appropriate\n    copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that\n    users may redistribute the program under these conditions, and telling the user how to view a copy of this\n    License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your\n    work based on the Program is not required to print an announcement.)\n\n  These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived\n  from the Program, and can be reasonably considered independent and separate works in themselves, then this\n  License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you\n  distribute the same sections as part of a whole which is a work based on the Program, the distribution of the\n  whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and\n  thus to each and every part regardless of who wrote it.\n\n  Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you;\n  rather, the intent is to exercise the right to control the distribution of derivative or collective works based on\n  the Program.\n\n  In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on\n  the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this\n  License.\n\nn You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form\n  under the terms of Sections 1 and 2 above provided that you also do one of the following:\n\n  n {na}Accompany it with the complete corresponding machine-readable source code, which must be distributed under\n    the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,\n\n  n Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more\n    than your cost of physically performing source distribution, a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily\n    used for software interchange; or,\n\n  n Accompany it with the information you received as to the offer to distribute corresponding source code.  (This\n    alternative is allowed only for noncommercial distribution and only if you received the program in object code\n    or executable form with such an offer, in accord with Subsection b above.)\n\n  The source code for a work means the preferred form of the work for making modifications to it.  For an executable\n  work, complete source code means all the source code for all modules it contains, plus any associated interface\n  definition files, plus the scripts used to control compilation and installation of the executable.  However, as a\n  special exception, the source code distributed need not include anything that is normally distributed (in either\n  source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which\n  the executable runs, unless that component itself accompanies the executable.\n\n  If distribution of executable or object code is made by offering access to copy from a designated place, then\n  offering equivalent access to copy the source code from the same place counts as distribution of the source code,\n  even though third parties are not compelled to copy the source along with the object code.\n\nn You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License.\n  Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically\n  terminate your rights under this License. However, parties who have received copies, or rights, from you under\n  this License will not have their licenses terminated so long as such parties remain in full compliance.\n\nn You are not required to accept this License, since you have not signed it. However, nothing else grants you\n  permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if\n  you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the\n  Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying,\n  distributing or modifying the Program or works based on it.\n\nn Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a\n  license from the original licensor to copy, distribute or modify the Program subject to these terms and\n  conditions. You may not impose any further restrictions on the recipients\' exercise of the rights granted herein.\n  You are not responsible for enforcing compliance by third parties to this License.\n\nn If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited\n  to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict\n  the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot\n  distribute so as to satisfy simultaneously your obligations under this License and any other pertinent\n  obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license\n  would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly\n  through you, then the only way you could satisfy both it and this License would be to refrain entirely from\n  distribution of the Program.\n\n  If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of\n  the section is intended to apply and the section as a whole is intended to apply in other circumstances.\n\n  It is not the purpose of this section to induce you to infringe any patents or other property right claims or to\n  contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free\n  software distribution system, which is implemented by public license practices.  Many people have made generous\n  contributions to the wide range of software distributed through that system in reliance on consistent application\n  of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any\n  other system and a licensee cannot impose that choice.\n\n  This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this\n  License.\n\nn If the distribution and/or use of the Program is restricted in certain countries either by patents or by\n  copyrighted interfaces, the original copyright holder who places the Program under this License may add an\n  explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in\n  or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the\n  body of this License.\n\nn The Free Software Foundation may publish revised and/or new versions of the General Public License from time to\n  time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new\n  problems or concerns.\n\n  Each version is given a distinguishing version number.  If the Program specifies a version number of this License\n  which applies to it and "any later version", you have the option of following the terms and conditions either of\n  that version or of any later version published by the Free Software Foundation. If the Program does not specify a\n  version number of this License, you may choose any version ever published by the Free Software Foundation.\n\nn If you wish to incorporate parts of the Program into other free programs whose distribution conditions are\n  different, write to the author to ask for permission.  For software which is copyrighted by the Free Software\n  Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be\n  guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the\n  sharing and reuse of software generally.\n\n  NO WARRANTY\n\nn BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n  APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE\n  PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND\n  PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY\n  SERVICING, REPAIR OR CORRECTION.\n\nn IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER\n  PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING\n  ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM\n  (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n  PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS\n  BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n{bEND OF TERMS AND CONDITIONS\n\nHow to Apply These Terms to Your New Programs}\n\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to\nachieve this is to make it free software which everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program.  It is safest to attach them to the start of each source file\nto most effectively convey the exclusion of warranty; and each file should have at least the "copyright" line and a\npointer to where the full notice is found.\n\nt {f<one line to give the program\'s name and a brief idea of what it does.>\n   Copyright (C) <year>  <name of author>\n\n  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public\n  License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any\n  later version.\n\n  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n  details.\n\n  You should have received a copy of the GNU General Public License along with this program; if not, write to the\n  Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA}\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:\n\nt {f}Gnomovision version 69, Copyright (C) year name of author\n   Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w\'. This is free software, and you are\n  welcome to redistribute it under certain conditions; type `show c\' for details.}\n\nThe hypothetical commands `show w\' and `show c\' should show the appropriate parts of the General Public License.  Of\ncourse, the commands you use may be called something other than `show w\' and `show c\'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a "copyright\ndisclaimer" for the program, if necessary.  Here is a sample; alter the names:\n\nt  Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision\' (which makes passes at\n  compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into proprietary programs.  If your program\nis a subroutine library, you may consider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General Public License instead of this License.'
p968
sg8
(lp969
sg10
(lp970
S'<2006/03/12'
p971
asg12
I0
sg13
(lp972
sg15
(lp973
ssS'wid.tkinter.menubutton.opt.disabledforeground'
p974
(dp975
g4
(lp976
sg6
S'>option.disabledforeground.generic "Menubutton"'
p977
sg8
(lp978
sg10
(lp979
sg12
I0
sg13
(lp980
sg15
(lp981
ssS'howto.module.rename'
p982
(dp983
g4
(lp984
S'&project'
p985
aS'&module'
p986
aS'&project'
p987
aS'&module'
p988
aS'&project'
p989
aS'&module'
p990
aS'&project'
p991
aS'&form'
p992
aS'&module'
p993
aS'&module'
p994
aS'&project'
p995
aS'&form'
p996
asg6
S'{HHow to: Rename a module}\n\n n Select the module to be renamed.\n\n n From the {gModules} menu click on {gRename current module}\n\n\nHaving renamed a module, the next time you build the &project the &module\nwill be saved under the new name. If you have already built the &project and\ncreated a copy of the &module under the old name, that file will continue to\nexist. If you want it to go away you will have to delete if yourself from the\noperating system.\n\nNote that the name of the &project, the name of the main &module of the\n&project, and the name of the main &form of the main &module are one and the\nsame. Therefore if you rename the main &module of the project this will\nrename the &project and the main &form of the main module as well.'
p997
sg8
(lp998
sg10
(lp999
S'2006/04/13'
p1000
asg12
I0
sg13
(lp1001
sg15
(lp1002
S'How to: Rename a module'
p1003
assS'wid.pmw.scrolledtext.overview'
p1004
(dp1005
g4
(lp1006
sg6
S'{HWhat is: A ScrolledText widget}\n\nA scrolled text consists of a standard text widget with optional scrollbars which can be used to scroll the text.\nThe scrollbars can be dynamic, which means that a scrollbar will only be displayed if it is necessary. That is, if\nthe text widget does not contain enough text (either horizontally or vertically), the scrollbar will be\nautomatically hidden. If it is displayed, the horizontal scrollbar is under the text widget. Similarly, if it is\ndisplayed, the vertical scrollbar is to the right of the text widget.'
p1007
sg8
(lp1008
sg10
(lp1009
S'2006/03/21'
p1010
asg12
I0
sg13
(lp1011
sg15
(lp1012
S'What is: A ScrolledText widget'
p1013
assS'option.text.generic'
p1014
(dp1015
g4
(lp1016
S'&image'
p1017
aS'&bitmap'
p1018
aS'&new mexico tech'
p1019
asg6
S'{H@0 - text}\n\nText to be displayed on the @0. Use internal newlines to display multiple\ntext lines.\n\nNote that if an &image or a &bitmap is specified for this @0, then the text\noption is ignored and no text is shown.\n\n$nmt'
p1020
sg8
(lp1021
sg10
(lp1022
S'2005/04/04'
p1023
asg12
I0
sg13
(lp1024
sg15
(lp1025
ssS'buffet.slidearrow'
p1026
(dp1027
g4
(lp1028
S'&widget buffet'
p1029
asg6
S'{HWidget-buffet - Slide Arrow}\n\nThese arrows are part of the &widget buffet and are used to slide the widget\nicons left or right as desired. The arrows are only enabled if there are more\nwidget icons to display than will fit in the space available.\n\no If both the arrows are gray, then all the widget icons on this widget-buffet\n  tab are visible and the arrows are disabled.\n\no If one or both of the arrows are black, then there are more widget icons than\n  can be displayed at one time. Clicking a black arrow will slide the stack of\n  icons in the direction of the arrow, revealing some or all of the presently\n  hidden icons.'
p1030
sg8
(lp1031
sg10
(lp1032
sg12
I0
sg13
(lp1033
sg15
(lp1034
S'The slide arrows of the widget buffet'
p1035
assS'assist.color'
p1036
(dp1037
S'Links'
p1038
(lp1039
S'=assist-code'
p1040
aS'=colors'
p1041
asS'Text'
p1042
S'{HThe option-editor color assist dialog}\n\nUse this to specify the {g@0} color for this widget.\n\nYou have two possibilities:\n  o Specify a particular color, or\n  o Enter your own Python code to specify the color.\n\n{bA particular color}\n\nUse the upper section of the assist to specify a particular color by:\n  o Entering a color number (eg {g#12f64f}), or\n  o Entering a standard color name (eg Red, see note below), or\n  o Clicking on the {gColorChooser} button and use it to select the color, or\n  o Clicking on the {gDefault} button to reset the color to its default value of {g@1}.\n\n{bOwn code}\n\nHere you can enter {Lanything you want=assist-code} - a variable, an expression, a function call, whatever - that\nwill specify the color. The code you enter will be used vertatim.\n\n{bNote}\n\nThere are a great many pre-defined colors. Click {lhere=colors} to check them out.'
p1043
sS'Hotlinks'
p1044
(lp1045
sS'Comments'
p1046
(lp1047
S'2014-02-19'
p1048
asS'Wip'
p1049
I0
sS'Plurals'
p1050
(lp1051
sS'Abstracts'
p1052
(lp1053
S'The option editor Color assist dialog'
p1054
assS'option.font.generic'
p1055
(dp1056
g4
(lp1057
S'&font'
p1058
asg6
S'{H@0 - font}\n\nThe default &font to be used for text displayed on this @0.'
p1059
sg8
(lp1060
sg10
(lp1061
S'2005/03/02'
p1062
asg12
I0
sg13
(lp1063
sg15
(lp1064
ssS'option.xscrollincrement.generic'
p1065
(dp1066
g4
(lp1067
S'&dimension'
p1068
aS'&new mexico tech'
p1069
asg6
S'{H@0 - xscrollincrement}\n\nNormally, canvases can be scrolled horizontally to any position. You get this\nbehavior by setting {gxscrollincrement} to zero.\n\nIf you set this option to some positive non-zero &dimension, the canvas can\nbe positioned only on multiples of that distance, and the value will be used\nfor scrolling by scrolling units, such as when the user clicks on the arrows\nat the ends of a scrollbar.\n\n$nmt'
p1070
sg8
(lp1071
sg10
(lp1072
S'2005/04/07'
p1073
asg12
I0
sg13
(lp1074
sg15
(lp1075
ssS'wid.pmw.scrolledlistbox.opt.scrollmargin'
p1076
(dp1077
g4
(lp1078
S'&default'
p1079
asg6
S'{HScrolledListBox - scrollmargin}\n\nThe distance between the scrollbars and the listbox widget. The &default is 2.'
p1080
sg8
(lp1081
sg10
(lp1082
S'2006/03/23'
p1083
asg12
I0
sg13
(lp1084
sg15
(lp1085
ssS'load.failed'
p1086
(dp1087
g4
(lp1088
sg6
S"{HChoice following failed load}\n\n$$ recently attempted to load a project but encountered an error during the load.\nEither the file being loaded isn't a $$ project or the file at some point became\ncorrupt. In any case we were unable to load it and no additional information is\navailable about why it didn't load.\n\nAt this point you have a choice between loading a different existing project,\ncreating a new project or exiting $$."
p1089
sg8
(lp1090
sg10
(lp1091
S'2006/03/19'
p1092
asg12
I0
sg13
(lp1093
sg15
(lp1094
ssS'option.activerelief.generic'
p1095
(dp1096
g4
(lp1097
S'&relief'
p1098
asg6
S'{H@0 - activerelief}\n\nSpecifies the &relief to use when displaying the element that is active,\nif any. Elements other than the active element are always displayed with a\nraised relief.'
p1099
sg8
(lp1100
sg10
(lp1101
S'2005/02/26'
p1102
asg12
I0
sg13
(lp1103
sg15
(lp1104
ssS'buffet.widget.label'
p1105
(dp1106
g4
(lp1107
sg6
S'>buffet.widget.generic "Label"'
p1108
sg8
(lp1109
sg10
(lp1110
sg12
I0
sg13
(lp1111
sg15
(lp1112
ssS'control-variables'
p1113
(dp1114
g4
(lp1115
S'&radiobutton'
p1116
aS'=wid.tkinter.radiobutton.opt.variable'
p1117
aS'=assist.cvar'
p1118
asg6
S'{HControl Variables}\n\nTkinter Control Variables are special objects which:\n\n n hold a value, and\n n are used with certain Tkinter widgets.\n\nThe Tkinter widgets: {fButton, Checkbutton, Entry, Label, Menubutton,\nRadiobutton} and {fScale} work with control variables. The basic plot is:\n\n n You create an appropriate control variable, then\n n You create the widget, telling it about the control variable with which\n   it is to work.\n    Note that the control variable has to exist {ibefore} you create the\n   widget.\n\nTo create a control variable, you use a class constructor thus:\n\nt {fv = DoubleVar()\n   v = IntVar()\n   v = StringVar()}\n\nto create a float, an integer or a string control variable respectivly.\nControl variables support two methods:\n\nt {g.get()}\n\nReturns the present value.\n\nt {g.set(value)}\n\nChanges the current value. Any widgets which are connected to the control\nvariable will be updated when the main loop is next idle.\n\nThe one interesting aspect of control variables is that a single control\nvariable can be shared among several widgets. In particular a group of\n&radiobuttons should share (via their\n{lvariable=wid.tkinter.radiobutton.opt.variable} option) a single control\nvariable. This mediates making sure that only a single radio button is\npressed at any given time.\n\nThe option editor {lcontrol variable assist=assist.cvar} will, if desired,\nautomatically create the corresponding control variable when the widget is\ncreated.'
p1119
sg8
(lp1120
S'control variable'
p1121
asg10
(lp1122
S'2005/02/22'
p1123
asg12
I0
sg13
(lp1124
sg15
(lp1125
S'Control Variables'
p1126
assS'buffet.widget.text'
p1127
(dp1128
g4
(lp1129
sg6
S'>buffet.widget.generic "Text"'
p1130
sg8
(lp1131
sg10
(lp1132
sg12
I0
sg13
(lp1133
sg15
(lp1134
ssS'code-edit.edit-menu'
p1135
(dp1136
g4
(lp1137
S'&code editor'
p1138
aS'=code-edit.action.undo'
p1139
aS'=code-edit.action.redo'
p1140
aS'=code-edit.action.cut'
p1141
aS'=code-edit.action.cutappend'
p1142
aS'=code-edit.action.copy'
p1143
aS'=code-edit.action.copyappend'
p1144
aS'=code-edit.action.paste'
p1145
aS'=code-edit.selectall'
p1146
aS'=code-edit.deleteline'
p1147
aS'=code-edit.action.copytofile'
p1148
aS'=code-edit.action.pastefile'
p1149
aS'=code-edit.action.indentblock'
p1150
aS'=code-edit.action.outdentblock'
p1151
aS'=code-edit.action.top'
p1152
aS'=code-edit.action.bottom'
p1153
aS'=code-edit.action.goto'
p1154
aS'=code-edit.action.pushlinenumber'
p1155
aS'&remembered line'
p1156
aS'=code-edit.poptolinenumber'
p1157
aS'&remembered line'
p1158
aS'=code-edit.action.swapwithtop'
p1159
aS'&remembered line'
p1160
aS'=code-edit.action.forget'
p1161
aS'&remembered line'
p1162
aS'=code-editor.colorization'
p1163
asg6
S'{HCode Editor - Edit Menu}\n\nThis &code editor menu lets you access various text editing actions using the mouse.\n\nt {lUndo=code-edit.action.undo} - Undo the an editing action.\nt {lRedo=code-edit.action.redo} - Redo an editing action.\nt ----------------------\nt {lCut=code-edit.action.cut} - Cut text to the clipboard.\nt {lCut append=code-edit.action.cutappend} - Cut and append to the clipboard.\nt {lCopy=code-edit.action.copy} - Copy text to the clipboard.\nt {lCopy append=code-edit.action.copyappend} - Copy and append to the clipboard.\nt {lPaste=code-edit.action.paste} - Insert the clipboard at the current location.\nt {lSelect all=code-edit.selectall} - Select all text.\nt ----------------------\nt {lDelete line=code-edit.DeleteLine} Delete the current line.\nt ----------------------\nt {lCopy to file=code-edit.action.copytofile} - Copy selection to a file.\nt {lPaste file=code-edit.action.pastefile} - Insert a file into the code.\nt ----------------------\nt {lIndent block=code-edit.action.indentblock} - Indent an entire block of text.\nt {lOutdent block=code-edit.action.outdentblock} - Outdent an entire block of text.\nt ----------------------\nt {lFirst line=code-edit.action.top} - Goto the first line of code.\nt {lLast line=code-edit.action.bottom} - Got to the last line of code.\nt {lGoto=code-edit.action.goto} - Goto a specific line number.\nt {lPush line number=code-edit.action.pushlinenumber} - Add current line to list of &remembered lines\nt {lPop to line number=code-edit.poptolinenumber} - Goto the most recent &remembered line.\nt {lSwap with top=code-edit.action.swapwithtop} - Flip between the current and the &remembered line.\nt {lForget=code-edit.action.forget} - Forget any &remembered lines.\nt ----------------------\nt {lRestart colorizer=code-editor.colorization} - Restart the colorizer from the first visible line.'
p1164
sg8
(lp1165
sg10
(lp1166
S'2005/04/15'
p1167
asg12
I0
sg13
(lp1168
sg15
(lp1169
S'Code editor - Edit Menu'
p1170
assS'module.new.dialog.fileexists'
p1171
(dp1172
g4
(lp1173
S'&module'
p1174
aS'&project'
p1175
aS'&project'
p1176
aS'&module'
p1177
aS'&module'
p1178
aS'&project'
p1179
aS'&module'
p1180
aS'&module'
p1181
aS'&module'
p1182
asg6
S'{HFile already exists warning}\n\nYou just asked to add a &module named "{b@0}" to the current &project. When the\n&project is built all the code for the new &module will be gathered together and\nwritten to a file named "{b@1}". However, I note that there is already a file of\nthat name in existence.\n\nIf you go ahead and create a &module named "@0" then the first time the &project\nis built the existing file "@1" will be overwritten with the code for the new\n&module. If you are OK with this then so am I; just thought I should warn you that\nan existing file will be wiped out if you continue.\n\nIf you are {bnot} OK with this, then click {gNo} and either enter a different name\nfor the new &module or cancel the creation of a new &module.'
p1183
sg8
(lp1184
sg10
(lp1185
S'2005/05/25'
p1186
aS'@0 The requested name of the module'
p1187
aS'@1 The path for the python file'
p1188
asg12
I0
sg13
(lp1189
sg15
(lp1190
ssS'gpl.warantee'
p1191
(dp1192
g4
(lp1193
S'=gpl'
p1194
aS'=layout.menu.about'
p1195
asg6
S'This is the section of the {bGNU General Public License} which deals with warantee issues.\n\n o Click {lhere=gpl} for the full text of the license.\n o Click {Lhere=layout.menu.about} for the $$ "about" box.\n\n NO WARRANTY\n\nn {n11}BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM,\n  TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE\n  COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY\n  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE\n  QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE,\n  YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nn IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT\n  HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED\n  ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n  CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING\n  BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\n  YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN\n  IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.'
p1196
sg8
(lp1197
sg10
(lp1198
sg12
I0
sg13
(lp1199
sg15
(lp1200
ssS'wid.tkinter.menu.opt.borderwidth'
p1201
(dp1202
g4
(lp1203
S'&dimension'
p1204
aS'&new mexico tech'
p1205
asg6
S'{HMenu - borderwidth}\n\nA &dimensioned number indicating the width of the border around all the\nchoices.\n\n$nmt'
p1206
sg8
(lp1207
sg10
(lp1208
S'2005/04/19'
p1209
asg12
I0
sg13
(lp1210
sg15
(lp1211
ssS'wid.tkinter.canvas.opt.height'
p1212
(dp1213
g4
(lp1214
S'&dimension'
p1215
asg6
S'{HCanvas - height}\n\nA &dimensioned number specifying the height of the Canvas.'
p1216
sg8
(lp1217
sg10
(lp1218
S'2005/04/15'
p1219
asg12
I0
sg13
(lp1220
sg15
(lp1221
ssS'assist.cvar'
p1222
(dp1223
g4
(lp1224
S'&control variable'
p1225
asg6
S"{HAssist - Control Variable}\n\nUse this to specify the &control variable for an option.\n\nIf you don't want a control variable for this option, leave it blank.\n\nIf you plan to create this control variable manually, or if some other widget is going to create the control\nvariable then select the {BI will create this control variable manually} choice.\n\nIf you want the control variable to be created automatically before any widgets are created then select the\n{BAutomatically create this control variable} choice.\n\nSome  control variables must be of a particular type. If this is the case there will be a message saying so at the\nbottom of the assist. If this control variable can be of more than one type then there will be radio buttons giving\nyou a choice of the allowed types; select the one that corresponds to what you want."
p1226
sg8
(lp1227
sg10
(lp1228
sg12
I0
sg13
(lp1229
sg15
(lp1230
S'The option editor Control Variable assist dialog'
p1231
assS'wid.tkinter.scale.opt.command'
p1232
(dp1233
g4
(lp1234
sg6
S'>option.command.generic "Scale","the slider is moved."'
p1235
sg8
(lp1236
sg10
(lp1237
sg12
I0
sg13
(lp1238
sg15
(lp1239
ssS'howto.swap.code.layout'
p1240
(dp1241
g4
(lp1242
S'&layout area'
p1243
aS'&layout editor'
p1244
aS'&code editor'
p1245
aS'=layoutarea.formtab'
p1246
asg6
S'{HHow to: swtich between the layout editor and the code editor}\n\nWithin the &layout area there are three ways to switch between the &layout\neditor and the &code editor.\n\n n Press the {g$tActionFormSwapCodeLayout} key, or\n\n n Click on the {ltab=layoutarea.formtab} of the already selected form, or\n\n n Use the {gForms -> Swap-code/layout} menu choice.'
p1247
sg8
(lp1248
sg10
(lp1249
S'2006/03/16'
p1250
asg12
I0
sg13
(lp1251
sg15
(lp1252
S'How to: Switch between the layout editor and the code editor'
p1253
assS'whatis.version-number'
p1254
(dp1255
S'Links'
p1256
(lp1257
sS'Text'
p1258
S'{HThe $$ File Version Number}\n\nWhen you save a $$ project (in an "{g.rpj}" file) or export a $$ form (in an "{g.rpf}" file), in the file there is a\nFile Version Number. Rapid releases prior to 1.0 generated files using File Version 0 while $$ release $version\ngenerates files using File Version 1.\n\nThis is of concern only if someone using an older version of $$ attempts to load a file generated by a newer\nversion. It will not work and the only recourse is to upgrade to a newer version of $$.\n\nOur preference is to leave the file version number alone but sometimes the addition of a new feature or capability\nmakes it necessary to increase the file version number.'
p1259
sS'Hotlinks'
p1260
(lp1261
sS'Comments'
p1262
(lp1263
S'2014-05-08'
p1264
asS'Wip'
p1265
I0
sS'Plurals'
p1266
(lp1267
sS'Abstracts'
p1268
(lp1269
S'What is: the $$ file version number'
p1270
assS'wid.pmw.menubar.opt.hotkeys'
p1271
(dp1272
g4
(lp1273
sg6
S">option.pmw.hotkeys.generic 'MenuBar'"
p1274
sg8
(lp1275
sg10
(lp1276
sg12
I0
sg13
(lp1277
sg15
(lp1278
ssS'pack.option.anchor'
p1279
(dp1280
g4
(lp1281
S'&default'
p1282
asg6
S'{HPack Option - anchor}\n\nWhere the widget is placed within the space which is allocated for it.\n\n&Default is Center.\n\nThis option is meaningful only if the space allocated is larger than the actual\nwidget.'
p1283
sg8
(lp1284
sg10
(lp1285
S'2005/05/19'
p1286
asg12
I0
sg13
(lp1287
sg15
(lp1288
ssS'buffet.widget.button'
p1289
(dp1290
g4
(lp1291
sg6
S'>buffet.widget.generic "Button"'
p1292
sg8
(lp1293
sg10
(lp1294
sg12
I0
sg13
(lp1295
sg15
(lp1296
ssS'wid.pmw.entryfield.opt.name'
p1297
(dp1298
g4
(lp1299
sg6
S">option.name.generic 'EntryField'"
p1300
sg8
(lp1301
sg10
(lp1302
sg12
I0
sg13
(lp1303
sg15
(lp1304
ssS'wid.mainmenubar.treatise'
p1305
(dp1306
g4
(lp1307
S'&form'
p1308
aS'=form.main.info'
p1309
asg6
S"{HA brief treatise on Pmw.MainMenuBars}\n\n{fPmw.MainMenuBars} are a bit of an odd duck. They work only in\nconjunction with a {fToplevel} type form. In the context of $$ that means\neither the main-form of the main-module or a &form which derives from\n{fTkinter.Toplevel}.\n\nUnlike most widgets, {fMainMenuBars} don't get packed.\n\nIf you create a {fMainMenuBar} inside the main-form of the main-module\n(which is itself {Lsomewhat special=form.main.info}) then it's master is\n{fRoot} while when created inside a {fToplevel} form it's master is\n{fself}.\n\nBy way of example here is a minimal example of a {fMainMenuBar} used\ninside the main-form of the main-module. Note that in this case the master\nis {fRoot} because, being in the main-form of the main-module, this\nMainMenuBar applies to the root window of the application which was\ncreated by Tkinter and we named {fRoot}. If you are wondering where\n{fRoot} came from, take a look in the -Main- code are of the main module\nof any project.\n\n{P$imgpr-help-MainMenuBarFrame.ppm}\n\nwhile here is an example of a {fMainMenuBar} inside a {fToplevel} form. In\nthis case the master is {fself} because the {fMainMenuBar} pertains to the\nclass being defined, not to the root window.\n\n{P$imgpr-help-MainMenuBarTop.ppm}\n\nIn both cases while the MainMenuBar is created automatically by $$ it is\nstill up to you to create the code which populates it."
p1310
sg8
(lp1311
sg10
(lp1312
S'2006/03/27'
p1313
asg12
I0
sg13
(lp1314
sg15
(lp1315
S'A brief treatise on Pmw.MainMenuBars'
p1316
assS'color.grey'
p1317
(dp1318
S'Links'
p1319
(lp1320
sS'Text'
p1321
S'{HGreys}\n\n {f#000000}  gray0\n {f#000000}  grey0\n {f#030303}  gray1\n {f#030303}  grey1\n {f#050505}  gray2\n {f#050505}  grey2\n {f#080808}  gray3\n {f#080808}  grey3\n {f#0A0A0A}  gray4\n {f#0A0A0A}  grey4\n {f#0D0D0D}  gray5\n {f#0D0D0D}  grey5\n {f#0F0F0F}  gray6\n {f#0F0F0F}  grey6\n {f#121212}  gray7\n {f#121212}  grey7\n {f#141414}  gray8\n {f#141414}  grey8\n {f#171717}  gray9\n {f#171717}  grey9\n {f#1A1A1A}  gray10\n {f#1A1A1A}  grey10\n {f#1C1C1C}  gray11\n {f#1C1C1C}  grey11\n {f#1F1F1F}  gray12\n {f#1F1F1F}  grey12\n {f#212121}  gray13\n {f#212121}  grey13\n {f#242424}  gray14\n {f#242424}  grey14\n {f#262626}  gray15\n {f#262626}  grey15\n {f#292929}  gray16\n {f#292929}  grey16\n {f#2B2B2B}  gray17\n {f#2B2B2B}  grey17\n {f#2E2E2E}  gray18\n {f#2E2E2E}  grey18\n {f#2F4F4F}  dark slate gray\n {f#2F4F4F}  DarkSlateGray\n {f#2F4F4F}  dark slate grey\n {f#2F4F4F}  DarkSlateGrey\n {f#303030}  gray19\n {f#303030}  grey19\n {f#333333}  gray20\n {f#333333}  grey20\n {f#363636}  gray21\n {f#363636}  grey21\n {f#383838}  gray22\n {f#383838}  grey22\n {f#3B3B3B}  gray23\n {f#3B3B3B}  grey23\n {f#3D3D3D}  gray24\n {f#3D3D3D}  grey24\n {f#404040}  gray25\n {f#404040}  grey25\n {f#424242}  gray26\n {f#424242}  grey26\n {f#454545}  gray27\n {f#454545}  grey27\n {f#474747}  gray28\n {f#474747}  grey28\n {f#4A4A4A}  gray29\n {f#4A4A4A}  grey29\n {f#4D4D4D}  gray30\n {f#4D4D4D}  grey30\n {f#4F4F4F}  gray31\n {f#4F4F4F}  grey31\n {f#525252}  gray32\n {f#525252}  grey32\n {f#528B8B}  DarkSlateGray4\n {f#545454}  gray33\n {f#545454}  grey33\n {f#575757}  gray34\n {f#575757}  grey34\n {f#595959}  gray35\n {f#595959}  grey35\n {f#5C5C5C}  gray36\n {f#5C5C5C}  grey36\n {f#5E5E5E}  gray37\n {f#5E5E5E}  grey37\n {f#616161}  gray38\n {f#616161}  grey38\n {f#636363}  gray39\n {f#636363}  grey39\n {f#666666}  gray40\n {f#666666}  grey40\n {f#696969}  dim gray\n {f#696969}  DimGray\n {f#696969}  dim grey\n {f#696969}  DimGrey\n {f#696969}  gray41\n {f#696969}  grey41\n {f#6B6B6B}  gray42\n {f#6B6B6B}  grey42\n {f#6C7B8B}  SlateGray4\n {f#6E6E6E}  gray43\n {f#6E6E6E}  grey43\n {f#707070}  gray44\n {f#707070}  grey44\n {f#708090}  slate gray\n {f#708090}  SlateGray\n {f#708090}  slate grey\n {f#708090}  SlateGrey\n {f#737373}  gray45\n {f#737373}  grey45\n {f#757575}  gray46\n {f#757575}  grey46\n {f#778899}  light slate gray\n {f#778899}  LightSlateGray\n {f#778899}  light slate grey\n {f#778899}  LightSlateGrey\n {f#787878}  gray47\n {f#787878}  grey47\n {f#79CDCD}  DarkSlateGray3\n {f#7A7A7A}  gray48\n {f#7A7A7A}  grey48\n {f#7D7D7D}  gray49\n {f#7D7D7D}  grey49\n {f#7F7F7F}  gray50\n {f#7F7F7F}  grey50\n {f#828282}  gray51\n {f#828282}  grey51\n {f#858585}  gray52\n {f#858585}  grey52\n {f#878787}  gray53\n {f#878787}  grey53\n {f#8A8A8A}  gray54\n {f#8A8A8A}  grey54\n {f#8C8C8C}  gray55\n {f#8C8C8C}  grey55\n {f#8DEEEE}  DarkSlateGray2\n {f#8F8F8F}  gray56\n {f#8F8F8F}  grey56\n {f#919191}  gray57\n {f#919191}  grey57\n {f#949494}  gray58\n {f#949494}  grey58\n {f#969696}  gray59\n {f#969696}  grey59\n {f#97FFFF}  DarkSlateGray1\n {f#999999}  gray60\n {f#999999}  grey60\n {f#9C9C9C}  gray61\n {f#9C9C9C}  grey61\n {f#9E9E9E}  gray62\n {f#9E9E9E}  grey62\n {f#9FB6CD}  SlateGray3\n {f#A1A1A1}  gray63\n {f#A1A1A1}  grey63\n {f#A3A3A3}  gray64\n {f#A3A3A3}  grey64\n {f#A6A6A6}  gray65\n {f#A6A6A6}  grey65\n {f#A8A8A8}  gray66\n {f#A8A8A8}  grey66\n {f#A9A9A9}  dark grey\n {f#A9A9A9}  DarkGrey\n {f#A9A9A9}  dark gray\n {f#A9A9A9}  DarkGray\n {f#ABABAB}  gray67\n {f#ABABAB}  grey67\n {f#ADADAD}  gray68\n {f#ADADAD}  grey68\n {f#B0B0B0}  gray69\n {f#B0B0B0}  grey69\n {f#B3B3B3}  gray70\n {f#B3B3B3}  grey70\n {f#B5B5B5}  gray71\n {f#B5B5B5}  grey71\n {f#B8B8B8}  gray72\n {f#B8B8B8}  grey72\n {f#B9D3EE}  SlateGray2\n {f#BABABA}  gray73\n {f#BABABA}  grey73\n {f#BDBDBD}  gray74\n {f#BDBDBD}  grey74\n {f#BEBEBE}  gray\n {f#BEBEBE}  grey\n {f#BFBFBF}  gray75\n {f#BFBFBF}  grey75\n {f#C2C2C2}  gray76\n {f#C2C2C2}  grey76\n {f#C4C4C4}  gray77\n {f#C4C4C4}  grey77\n {f#C6E2FF}  SlateGray1\n {f#C7C7C7}  gray78\n {f#C7C7C7}  grey78\n {f#C9C9C9}  gray79\n {f#C9C9C9}  grey79\n {f#CCCCCC}  gray80\n {f#CCCCCC}  grey80\n {f#CFCFCF}  gray81\n {f#CFCFCF}  grey81\n {f#D1D1D1}  gray82\n {f#D1D1D1}  grey82\n {f#D3D3D3}  light grey\n {f#D3D3D3}  LightGrey\n {f#D3D3D3}  light gray\n {f#D3D3D3}  LightGray\n {f#D4D4D4}  gray83\n {f#D4D4D4}  grey83\n {f#D6D6D6}  gray84\n {f#D6D6D6}  grey84\n {f#D9D9D9}  gray85\n {f#D9D9D9}  grey85\n {f#DBDBDB}  gray86\n {f#DBDBDB}  grey86\n {f#DEDEDE}  gray87\n {f#DEDEDE}  grey87\n {f#E0E0E0}  gray88\n {f#E0E0E0}  grey88\n {f#E3E3E3}  gray89\n {f#E3E3E3}  grey89\n {f#E5E5E5}  gray90\n {f#E5E5E5}  grey90\n {f#E8E8E8}  gray91\n {f#E8E8E8}  grey91\n {f#EBEBEB}  gray92\n {f#EBEBEB}  grey92\n {f#EDEDED}  gray93\n {f#EDEDED}  grey93\n {f#F0F0F0}  gray94\n {f#F0F0F0}  grey94\n {f#F2F2F2}  gray95\n {f#F2F2F2}  grey95\n {f#F5F5F5}  gray96\n {f#F5F5F5}  grey96\n {f#F7F7F7}  gray97\n {f#F7F7F7}  grey97\n {f#FAFAFA}  gray98\n {f#FAFAFA}  grey98\n {f#FCFCFC}  gray99\n {f#FCFCFC}  grey99\n {f#FFFFFF}  gray100\n {f#FFFFFF}  grey100'
p1322
sS'Hotlinks'
p1323
(lp1324
sS'Comments'
p1325
(lp1326
sS'Wip'
p1327
I0
sS'Plurals'
p1328
(lp1329
sS'Abstracts'
p1330
(lp1331
ssS'wid.tkinter.scrollbar.opt.highlightbackground'
p1332
(dp1333
g4
(lp1334
sg6
S'>option.highlightbackground.generic "Scrollbar"'
p1335
sg8
(lp1336
sg10
(lp1337
sg12
I0
sg13
(lp1338
sg15
(lp1339
ssS'option.menu.generic'
p1340
(dp1341
g4
(lp1342
S'&new mexico tech'
p1343
asg6
S"{H@0 - menu}\n\nTo associate the menubutton with a set of choices, set this option to the\nMenu object containing those choices. That menu object must have been created\nby passing the associated menubuttion to the constructor in it's first\nargument.\n\n$nmt"
p1344
sg8
(lp1345
sg10
(lp1346
S'2006/03/12'
p1347
asg12
I0
sg13
(lp1348
sg15
(lp1349
ssS'bind.event'
p1350
(dp1351
g4
(lp1352
S'&binding'
p1353
aS'&binding'
p1354
aS'&handler'
p1355
aS'&handler'
p1356
aS'=bind.eventwizard.basicevent'
p1357
asg6
S'{HEvent}\n\nAn event is something that happens within your application - for example, the user presses a key or clicks the mouse\n- to which the application needs to react.\n\nWidgets have a lot of built-in behaviors. For example, buttons automatically change color as the cursor moves over\nthem and entry widgets automatically accumulate text typed into them.\n\nHowever, the event &binding capability of Tkinter allows you to add, change, or delete behaviors.\n\nFirst, some definitions:\n\no An event is something that happens within your application.\n\no An event handler is a function in your application that gets called when an event occurs.\n\no A &binding is a connection between an event and an event &handler that says "when this event happens call that\n  &handler".\n\nClick {Lhere=bind.eventwizard.basicevent} for a list of popular Tkinter events.'
p1358
sg8
(lp1359
S'event'
p1360
asg10
(lp1361
S'2005/03/14'
p1362
asg12
I0
sg13
(lp1363
sg15
(lp1364
S'What is: An event'
p1365
assS'wid.tkinter.menubutton.opt.pady'
p1366
(dp1367
g4
(lp1368
sg6
S'>option.pady.generic "Menubutton", "text"'
p1369
sg8
(lp1370
sg10
(lp1371
sg12
I0
sg13
(lp1372
sg15
(lp1373
ssS'wid.tkinter.menubutton.opt.padx'
p1374
(dp1375
g4
(lp1376
sg6
S'>option.padx.generic "Menubutton", "text"'
p1377
sg8
(lp1378
sg10
(lp1379
sg12
I0
sg13
(lp1380
sg15
(lp1381
ssS'wid.pmw.messagebar.opt.pyclass'
p1382
(dp1383
g4
(lp1384
sg6
S'>option.pyclass.generic "MessageBar"'
p1385
sg8
(lp1386
sg10
(lp1387
sg12
I0
sg13
(lp1388
sg15
(lp1389
ssS'wid.tkinter.radiobutton.opt.highlightthickness'
p1390
(dp1391
g4
(lp1392
sg6
S'>option.highlightthickness.generic "Radiobutton"'
p1393
sg8
(lp1394
sg10
(lp1395
sg12
I0
sg13
(lp1396
sg15
(lp1397
ssS'option.anchor.generic'
p1398
(dp1399
g4
(lp1400
sg6
S'{H@0 - anchor}\n\nWhere the text is placed inside the @0. Can be one of:\n\n  o {gcenter}\n  o {gn}\n  o {gs}\n  o {ge}\n  o {gw}\n  o {gnw}\n  o {gne}\n  o {gsw}\n  o {gse}\n\nIf the @0 is exactly the right size to hold the text then this option has no\neffect. If the @0 is larger, then the text is placed close to the specified side\n(N, S, E, W) or corner (NW, NE, SW, SE). The &default is {gcenter}.'
p1401
sg8
(lp1402
sg10
(lp1403
S'2005/02/25'
p1404
asg12
I0
sg13
(lp1405
sg15
(lp1406
ssS'wid.pmw.timecounter.opt.value'
p1407
(dp1408
g4
(lp1409
sg6
S'{HTimecounter - value}\n\nSpecifies the initial contents of the time counter, in the form "HH:MM:SS".\nIf omitted, the current time is used as the initial contents.'
p1410
sg8
(lp1411
sg10
(lp1412
S'2006/03/24'
p1413
asg12
I0
sg13
(lp1414
sg15
(lp1415
ssS'wid.tkinter.button.opt.relief'
p1416
(dp1417
g4
(lp1418
sg6
S'>option.relief.generic "Button"'
p1419
sg8
(lp1420
sg10
(lp1421
sg12
I0
sg13
(lp1422
sg15
(lp1423
ssS'wid.pmw.buttonbox.overview'
p1424
(dp1425
g4
(lp1426
sg6
S'{HWhat is: A ButtonBox widget}\n\nA button box is a container megawidget which manages a number of buttons. One\nof these buttons may be specified as the default and it will be displayed\nwith the platform specific appearance for a default button. The buttons may\nbe laid out either horizontally or vertically.'
p1427
sg8
(lp1428
sg10
(lp1429
S'2006/03/19'
p1430
asg12
I0
sg13
(lp1431
sg15
(lp1432
S'What is: A ButtonBox widget'
p1433
assS'option.pmw.selectioncommand.generic'
p1434
(dp1435
g4
(lp1436
S'&event'
p1437
aS'&handler'
p1438
asg6
S'{H@0 - selectioncommand}\n\nThe &event &handler to call when an item is selected. If this handler takes a\nlong time to run, and you want the display to be updated, call\n{fupdate_idletasks()} at the beginning of the handler.'
p1439
sg8
(lp1440
sg10
(lp1441
S'2006/03/18'
p1442
asg12
I0
sg13
(lp1443
sg15
(lp1444
ssS'wid.pmw.mainmenubar.opt.hull'
p1445
(dp1446
g4
(lp1447
sg6
S">option.pmw.hull.generic 'MainMenuBar'"
p1448
sg8
(lp1449
sg10
(lp1450
sg12
I0
sg13
(lp1451
sg15
(lp1452
ssS'option.xscrollcommand.generic'
p1453
(dp1454
g4
(lp1455
sg6
S'{H@0 - xscrollcommand}\n\nIf the @0 is scrollable, this attribute should be the {g.set()} method of the\nhorizontal scrollbar.'
p1456
sg8
(lp1457
sg10
(lp1458
S'2005/03/07'
p1459
asg12
I0
sg13
(lp1460
sg15
(lp1461
ssS'code-edit.action.copyappend'
p1462
(dp1463
g4
(lp1464
S'&editor actions'
p1465
asg6
S'{HCode editor - CopyAppend}\n\n Key:   $tActionCopyAppend\n Menu: {fEdit/Copy append}\n\nThe currently selected text is appended to any text already in the clipboard.\n\nThis is handy when you want to accumulate a number of items to be pasted into\na given location. The clipboard is cleared by plain {gCut} or {gCopy}\nbut not by {gCutAppend} nor by {gCopyAppend}.\n\nCode &editor actions'
p1466
sg8
(lp1467
sg10
(lp1468
S'2005/04/07'
p1469
asg12
I0
sg13
(lp1470
sg15
(lp1471
S'Code editor - Copy Append'
p1472
assS'wid.pmw.menubar.opt.pyclass'
p1473
(dp1474
g4
(lp1475
sg6
S'>option.pyclass.generic "MenuBar"'
p1476
sg8
(lp1477
sg10
(lp1478
sg12
I0
sg13
(lp1479
sg15
(lp1480
ssS'wid.tkinter.listbox.opt.height'
p1481
(dp1482
g4
(lp1483
sg6
S'>option.height.generic "Listbox"'
p1484
sg8
(lp1485
sg10
(lp1486
sg12
I0
sg13
(lp1487
sg15
(lp1488
ssS'wid.pmw.buttonbox.opt.pady'
p1489
(dp1490
g4
(lp1491
sg6
S'>option.pmw.pady.generic "ButtonBox", "button"'
p1492
sg8
(lp1493
sg10
(lp1494
sg12
I0
sg13
(lp1495
sg15
(lp1496
ssS'wid.pmw.buttonbox.opt.padx'
p1497
(dp1498
g4
(lp1499
sg6
S'>option.pmw.padx.generic "ButtonBox", "button", \'3\''
p1500
sg8
(lp1501
sg10
(lp1502
sg12
I0
sg13
(lp1503
sg15
(lp1504
ssS'option.offset.generic'
p1505
(dp1506
g4
(lp1507
sg6
S"{H@0 - offset}\n\nThis is an X,Y pair. Other than that I have no idea what it is used for\nand a quick search for documentation on it didn't turn up anything useful.\nIf you know what it's for get in touch with us: $mailto"
p1508
sg8
(lp1509
sg10
(lp1510
S'2005/03/04'
p1511
asg12
I0
sg13
(lp1512
sg15
(lp1513
ssS'option.cursor.generic'
p1514
(dp1515
g4
(lp1516
S'&cursor'
p1517
asg6
S'{H@0 - cursor}\n\nThe &cursor to be used whenever the mouse is over this @0.'
p1518
sg8
(lp1519
sg10
(lp1520
sg12
I0
sg13
(lp1521
sg15
(lp1522
ssS'option.textvariable.generic'
p1523
(dp1524
g4
(lp1525
S'&control variable'
p1526
aS'&new mexico tech'
p1527
asg6
S'{H@0 - textvariable}\n\nA &control variable of type {GStringVar()} that is associated with the text\non this @0. If the variable is changed, the new value will be displayed on\nthe @0.\n\n$nmt'
p1528
sg8
(lp1529
sg10
(lp1530
S'2005/04/05'
p1531
asg12
I0
sg13
(lp1532
sg15
(lp1533
ssS'bind.eventwizard.mouseclicks'
p1534
(dp1535
g4
(lp1536
S'&event'
p1537
asg6
S"{HEvent Wizard - Mouse Clicks}\n\nYour mouse &event can take place in response to one, two or three clicks. Select\none of the radio buttons to make your choice.\n\nOnce that's done, click on the {gNext} button to continue the process.\n\nTo change a previous choice, click on the {GBackUp} button."
p1538
sg8
(lp1539
sg10
(lp1540
S'2005/03/13'
p1541
asg12
I0
sg13
(lp1542
sg15
(lp1543
S'Bind Event Wizard - Mouse Clicks'
p1544
assS'wid.tkinter.button.opt.highlightthickness'
p1545
(dp1546
g4
(lp1547
sg6
S'>option.highlightthickness.generic "Button"'
p1548
sg8
(lp1549
sg10
(lp1550
sg12
I0
sg13
(lp1551
sg15
(lp1552
ssS'wid.pmw.labeledwidget.opt.labelchildsite'
p1553
(dp1554
g4
(lp1555
sg6
S'{HLabeledWidget - labelchildsite}\n\nThe frame which can contain other widgets to be labelled.'
p1556
sg8
(lp1557
sg10
(lp1558
S'2006/03/20'
p1559
asg12
I0
sg13
(lp1560
sg15
(lp1561
ssS'wid.tkinter.frame.opt.height'
p1562
(dp1563
g4
(lp1564
S'&dimension'
p1565
aS'&new mexico tech'
p1566
asg6
S'{HFrame - height}\n\nThe vertical &dimension of the new frame. This will be ignored unless you\nalso call {Gpack_propagate(0)} or {Ggrid_propagate(0)} on the frame.\n\n$nmt'
p1567
sg8
(lp1568
sg10
(lp1569
S'2005/04/28'
p1570
asg12
I0
sg13
(lp1571
sg15
(lp1572
ssS'form.baseclassomitted'
p1573
(dp1574
g4
(lp1575
sg6
S'{HName of base class omitted}\n\nYour present setting of the radio buttons says that you want this form to be\nderived from a Python class which is itself derived from @0 (as opposed to\nderiving directly from @0). That\'s nice, but since the $$ mindreading module\nis behind schedule you\'re going to have to type in the name of the class from\nwhich this form is to be derived; there is an entry area just below the radio\nbuttons for this purpose.\n\nOn the other hand, if you want this form to be derived directly from @0 then\nyou should select the {G"@0"} radio button and try again.'
p1576
sg8
(lp1577
sg10
(lp1578
S'<2005/05/27'
p1579
asg12
I0
sg13
(lp1580
sg15
(lp1581
ssS'wid.tkinter.button.opt.font'
p1582
(dp1583
g4
(lp1584
sg6
S'>option.font.generic "Button"'
p1585
sg8
(lp1586
sg10
(lp1587
sg12
I0
sg13
(lp1588
sg15
(lp1589
ssS'wid.tkinter.menubutton.opt.textvariable'
p1590
(dp1591
g4
(lp1592
sg6
S'>option.textvariable.generic "Menubutton"'
p1593
sg8
(lp1594
sg10
(lp1595
sg12
I0
sg13
(lp1596
sg15
(lp1597
ssS'__notestoself__'
p1598
(dp1599
g4
(lp1600
sg6
S'{HNotes to self}\n\nSince this page carries no index entry it should never be visible to end users.\n\n{BText editor actions and keys}\n\nThe text editor has various actions (eg {ggoto}) and these are bound to various keys (eg\n{gAlt-l}). While the actions names are fixed, the keys to which they are bound vary based on\nthe config file and the current text editor scheme. Therefore, at startup and scheme change,\nwe set a bunch of substitutions in the global help substitution table.\n\nFor every editor action there is name you can use which will be substituted to the key bound\nto that action. For example, given a hypothetical editor action {gZot} which is currently\nbound to key {gAlt-z} then:\n\nt {g$tActionZot} will be substituted to {gAlt-z}\n\nNote what happens here to $tActionGoto. This allows us to talk in help messages about the\nparticular keys but have those key names show up properly in the context of the current\nconfig and scheme settings. How cool is that?\n\n{BName of current editor schema}\n\nWe also generate a substitution for {b$}{beditschema} which is replaced with the name of the\neditor schema currently in effect.\n\n{BImages}\n\nImages for use in Rapyd help should be placed in the same directory as the icons used by the\nmain program. We generate a substitution for the icon directory as {b$}{bimg}. Thus to\ninject image "spam" into the formatted page use {b$}{bimg/spam}}'
p1601
sg8
(lp1602
sg10
(lp1603
sg12
I0
sg13
(lp1604
sg15
(lp1605
ssS'wid.pmw.counter.opt.hull'
p1606
(dp1607
g4
(lp1608
sg6
S">option.pmw.hull.generic 'Counter'"
p1609
sg8
(lp1610
sg10
(lp1611
sg12
I0
sg13
(lp1612
sg15
(lp1613
ssS'layout.menu.about'
p1614
(dp1615
g4
(lp1616
S'=gpl'
p1617
asg6
S'{HAbout $$ version $version}\n\n$$ was written by a team of thousands who worked day and night for a Really Long time to make it go. The five\nhundred help messages took a bit of work too. Well all right, it was a team of a lot less than a thousand but the\nhelp messages and the working day and night is true enough.\n\n$$ is supplied under the terms of the {LGNU General Public License=gpl}.\n\nThe $$ web site is located at: {b$website}\n\nIt is the hope of the development team that $$ will prove to be a handy and useful open source programming tool. If\nyou would like to join the team or if you have have any questions or constructive comments on $$, please contact us at:\n\nt {b$mailto}\n\n{B! ! ! ! ! ! ! ! ! !  IMPORTANT NOTE  ! ! ! ! ! ! ! ! ! !}\n\n When you email us at the above address (and we certainly hope you do) then you {bmust} put the word "{brapyd}"\nsomewhere in the subject line or your email will be silently deleted by our spam filers. Since this is a publicly\nvisible email account (it is mentioned on our web site) it attracts it\'s share of spam.\n\nDon\'t be shy - we like hearing from people!'
p1618
sg8
(lp1619
sg10
(lp1620
S"2007/01/05 Revised to add note about putting 'rapyd' in email subject line"
p1621
asg12
I0
sg13
(lp1622
sg15
(lp1623
S'About $$'
p1624
aS'Web site and email address for the $$ project'
p1625
assS'wid.pmw.scrolledframe.opt.clipper'
p1626
(dp1627
g4
(lp1628
sg6
S'{HScrolledFrame - clipper}\n\nThe frame which is used to provide a clipped view of the {gframe} component. If\nthe {gborderframe} option is true, this is created with a borderwidth of 0 to\novercome a known problem with using place to position widgets: if a widget\n(in this case the {gframe} component) is placed inside a frame (in this case the\n{gclipper} component) and it extends across one of the edges of the frame, then\nthe widget obscures the border of the frame. Therefore, if the clipper has no\nborder, then this overlapping does not occur.'
p1629
sg8
(lp1630
sg10
(lp1631
S'2006/03/22'
p1632
asg12
I0
sg13
(lp1633
sg15
(lp1634
ssS'wid.pmw.scrolledframe.opt.name'
p1635
(dp1636
g4
(lp1637
sg6
S">option.name.generic 'ScrolledFrame'"
p1638
sg8
(lp1639
sg10
(lp1640
sg12
I0
sg13
(lp1641
sg15
(lp1642
ssS'wid.tkinter.listbox.opt.highlightbackground'
p1643
(dp1644
g4
(lp1645
sg6
S'>option.highlightbackground.generic "Listbox"'
p1646
sg8
(lp1647
sg10
(lp1648
sg12
I0
sg13
(lp1649
sg15
(lp1650
ssS'bind.delete.handlertoo'
p1651
(dp1652
g4
(lp1653
S'&binding'
p1654
aS'&binding'
p1655
aS'&maintained'
p1656
aS'&binding'
p1657
aS'&command option'
p1658
aS'&event'
p1659
aS'&handler'
p1660
aS'&event'
p1661
aS'&handler'
p1662
aS'&binding'
p1663
aS'&event'
p1664
aS'&handler'
p1665
aS'&binding'
p1666
aS'&command option'
p1667
aS'&event'
p1668
aS'&handler'
p1669
aS'&event'
p1670
aS'&handler'
p1671
aS'&event'
p1672
aS'&handler'
p1673
aS'&handler'
p1674
aS'&binding'
p1675
aS'&event'
p1676
aS'&handler'
p1677
asg6
S'{HDeletion of event handler at bind-delete time}\n\nYou just asked to delete a &binding. I notice that once that &binding is deleted, no other\n$$ &maintained &binding nor &command option will refer to the &event &handler "@0" so you\nhave the opportunity to delete the &event &handler as well as the &binding.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that) or if you plan\n  to create new &bindings or &command options which will refer to that &event &handler then\n  clearly you want to choose {GKeep handler} to retain the &event &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed use for it then\n  you might as well choose {GDelete handler} to delete the &handler rather than leaving\n  unused code hanging around your form.\n\no If you\'ve reconsidered and now don\'t want to delete the &binding nor delete the &event\n  &handler then click {gCancel}.'
p1678
sg8
(lp1679
sg10
(lp1680
S'2005/05/12'
p1681
aS'@0 The name of the handler'
p1682
asg12
I0
sg13
(lp1683
sg15
(lp1684
ssS'__attribution_nmt'
p1685
(dp1686
g4
(lp1687
sg6
S'{HThanks New Mexico Tech !}\n\nAlmost all the text of the $$ help pages pertaining to Tkinter were originally\nwritten by John W. Shipman and are reproduced here courtesy of New Mexico Tech.\n\nFurther information about New Mexico Tech is available at:\n\n t {Ghttp://www.nmt.edu/}\n\nAnd you can veiw the original Tkinter documentation here:\n\n t {Ghttp://www.nmt.edu/tcc/help/pubs/tkinter/}\n\nA heartfelt thanks is extended to New Mexico Tech for allowing the $$ project to\nmake use of their fine contribution to open source documentation.'
p1688
sg8
(lp1689
S'new mexico tech'
p1690
asg10
(lp1691
S'2005/02/27'
p1692
asg12
I0
sg13
(lp1693
sg15
(lp1694
S'New Mexico Tech supplied much of the Tkinter related documentation'
p1695
assS'wid.pmw.group.opt.tagindent'
p1696
(dp1697
g4
(lp1698
S'&dimension'
p1699
aS'&default'
p1700
asg6
S'{HGroup - tagindent}\n\nA &dimensioned number giving the distance from the left edge of the ring to the left side of the tag component.\n\nThe &default is 10.'
p1701
sg8
(lp1702
sg10
(lp1703
S'2006/03/19'
p1704
asg12
I0
sg13
(lp1705
sg15
(lp1706
ssS'option.length.generic'
p1707
(dp1708
g4
(lp1709
S'&dimension'
p1710
aS'&new mexico tech'
p1711
asg6
S'{H@0 - length}\n\nA &dimensioned number which sets the length of the @0 widget. This is the x\ndimension if the @0 is horizontal, or the y dimension if vertical.\n\nThe default is 100\n\n$nmt'
p1712
sg8
(lp1713
sg10
(lp1714
S'2005/03/04'
p1715
asg12
I0
sg13
(lp1716
sg15
(lp1717
ssS'buffet.widget.entryfield'
p1718
(dp1719
g4
(lp1720
S'&widget buffet'
p1721
aS'&layout area'
p1722
aS'&form'
p1723
asg6
S">buffet.widget.generic2 'Pmw.EntryField', 'n', 'wid.pmw.entryfield.overview'"
p1724
sg8
(lp1725
sg10
(lp1726
sg12
I0
sg13
(lp1727
sg15
(lp1728
ssS'wid.pmw.counter.opt.entryfield'
p1729
(dp1730
g4
(lp1731
sg6
S'{HCounter - entryfield}\n\nThe entry field widget where the text is entered, displayed and validated.'
p1732
sg8
(lp1733
sg10
(lp1734
S'2006/03/18'
p1735
asg12
I0
sg13
(lp1736
sg15
(lp1737
ssS'wid.pmw.combobox.opt.scrolledlist'
p1738
(dp1739
g4
(lp1740
sg6
S'{HComboBox - scrolleddlist}\n\nThe scrolled ListBox which displays the items to select.'
p1741
sg8
(lp1742
sg10
(lp1743
S'2006/03/18'
p1744
asg12
I0
sg13
(lp1745
sg15
(lp1746
ssS'wid.tkinter.text.opt.foreground'
p1747
(dp1748
g4
(lp1749
S'&color'
p1750
asg6
S'{HText - foreground}\n\n\nThe &color used for text (and bitmaps) within the widget.\n\nYou can change the color for tagged regions; this option is just the &default.'
p1751
sg8
(lp1752
sg10
(lp1753
S'2005/04/27'
p1754
asg12
I0
sg13
(lp1755
sg15
(lp1756
ssS'wid.tkinter.menubutton.opt.text'
p1757
(dp1758
g4
(lp1759
sg6
S'>option.text.generic "Menubutton"'
p1760
sg8
(lp1761
sg10
(lp1762
sg12
I0
sg13
(lp1763
sg15
(lp1764
ssS'buffet.tab'
p1765
(dp1766
g4
(lp1767
S'&widget buffet'
p1768
aS'&layout area'
p1769
asg6
S'{HWidget-buffet - Widget Tabs}\n\nThese tabs are part of the &widget buffet, just below the &layout area; they are\nused to select which group of widgets buttons you can see at any given time. At\npresent there are two tabs:\n\n o {GTk } The standard Tk widgets.\n o {GPmw} The Pmw (PythonMegaWidget) collection of widgets.'
p1770
sg8
(lp1771
sg10
(lp1772
S'2005/03/04'
p1773
asg12
I0
sg13
(lp1774
sg15
(lp1775
S'The Widget buffet tabs select the current widget set'
p1776
assS'bindassist.general'
p1777
(dp1778
g4
(lp1779
S'&binding'
p1780
aS'&binding'
p1781
aS'&event'
p1782
aS'&handler'
p1783
aS'=bindassist.compound'
p1784
aS'&event'
p1785
aS'&event'
p1786
aS'&event'
p1787
aS'&event'
p1788
aS'&binding'
p1789
aS'&handler'
p1790
aS'&event'
p1791
aS'&handler'
p1792
aS'&event'
p1793
aS'&handler'
p1794
aS'&handler'
p1795
aS'&handler'
p1796
aS'=bindassist.name-suggestion'
p1797
aS'&binding'
p1798
aS'&handler'
p1799
aS'=bindassist.handlerchange'
p1800
aS'&binding'
p1801
aS'&handler'
p1802
aS'&handler'
p1803
aS'&handler'
p1804
aS'&binding'
p1805
aS'&binding'
p1806
aS'&binding'
p1807
aS'&binding'
p1808
aS'&binding'
p1809
aS'&handler'
p1810
aS'&binding'
p1811
asg6
S'{hBind Assist Dialog}\n\nThis is where you get to create, modify and delete &bindings. Each &binding associates an &event with an event\n&handler, which is a method in your code. In this help page we talk about regular bindings. Once you are happy with\nregular bindings click {Lhere=bindassist.compound} for additional details on binding to compound (eg Pmw) widgets.\n\nThere are three areas to the bind assist dialog:\n\n n {P$imgpr-help-BindAssistUpper.ppm}\n\n   Below some instructional text is the {GEvent Wizard Button} and an {gEvent Entry Area}. Both of these are\n   different routes to the same destination: the &event description string.\n\n   An &event description string is, not surprisingly, a string which describes the &event to which you want to bind.\n   You can create this string either by clicking on the {gEvent Wizard} button or by keying it in manually in the\n   entry area just below the Wizard button. We recommend the Wizard; it has advantages:\n\n   o You are guaranteed to get a properly formed &event string.\n   o Every step in the Wizard has appropriate help.\n   o Its fast. Most Wizard steps involve clicking on a selection and having made your selection you can press the\n     {gEnter} key to advance to the next step. You can roar through the Wizard pretty fast going {fClick Enter Click\n     Enter}.\n   o If you use the Wizard when creating a new &binding, then on completion the Wizard automatically generates an\n     appropriate suggested name for your event &handler. If you enter the &event description string manually then\n     you have to invent the &handler name manually too, since for all we know you could have keyed in an &event\n     string of "{iMary had a little lamb}" which makes the event &handler name less than obvious.\n\n     On the other hand experts, micro-managers, control-freaks and full-out brainos are welcome to enter the event\n     description string manually.\n\n n {P$imgpr-help-BindAssistLower.ppm}\n\n   Next is a combo box where you can key in or select the name for your event &handler. If you use the Wizard when\n   creating a new event binding then an appropriate name for your &handler will automatically be entered here,\n   although you are welcome to revise the name to anything you like.\n\n   Automatically suggested event handler names are of the form {Gon_widgetname_whatever} and we suggest that you use\n   that format. Click {Lhere=bindassist.name-suggestion} to find out why.\n\n   If you are working on an existing &binding and you change the name of the &handler then there are a number of\n   considerations. Click {lhere=bindassist.handlerchange} for details.\n\n   When you create a new &binding, if there is no existing &handler of the name specified then a new &handler\n   (consisting solely of a {f"pass"} statement) is created for you. &Handlers are automatically kept in alphabetical\n   order in the code to make the easier to find.\n\n n And at the very bottom are the buttons.\n\n   o {GOK} Click this one when you are happy with your new or revised &binding.\n   o {GDelete} Click this to remove the current &binding from the list of &bindings. You will be asked for\n     confirmation before the deletion takes place. If deleting this &binding means that there are no &bindings which\n     refer to the &handler then you are given the option of deleting the handler as well.\n   o {GHelp} Presumably obvious, but do remember that in $$ you can click the $hb over most things to get help about\n     that thing.\n   o {GCancel} Close the Bind Assist without saving any changes to the &binding. Clicking on the window managers\n     "close" icon for the Bind Assist has this same effect.'
p1812
sg8
(lp1813
S'bind assist'
p1814
asg10
(lp1815
S'2005/03/15'
p1816
asg12
I0
sg13
(lp1817
sg15
(lp1818
S'Bind editor - assist dialog'
p1819
assS'option.confine.generic'
p1820
(dp1821
g4
(lp1822
sg6
S'{H@0 - confine}\n\nIf true (the default) the @0 cannot be scrolled outside of the\n{fscrollregion}.'
p1823
sg8
(lp1824
sg10
(lp1825
S'2005/02/28'
p1826
asg12
I0
sg13
(lp1827
sg15
(lp1828
ssS'wid.tkinter.scrollbar.opt.takefocus'
p1829
(dp1830
g4
(lp1831
sg6
S'>option.takefocus.generic "Scrollbar"'
p1832
sg8
(lp1833
sg10
(lp1834
sg12
I0
sg13
(lp1835
sg15
(lp1836
ssS'wid.tkinter.scale.opt.repeatdelay'
p1837
(dp1838
g4
(lp1839
sg6
S'>option.repeatdelay.generic "Scale"'
p1840
sg8
(lp1841
sg10
(lp1842
sg12
I0
sg13
(lp1843
sg15
(lp1844
ssS'wid.pmw.scrolledtext.opt.text'
p1845
(dp1846
g4
(lp1847
sg6
S'{HScrolledText - text}\n\nThe text widget which is scrolled by the scrollbars. If the {gborderframe}\noption is true, this is created with a borderwidth of 0 to overcome a known\nproblem with text widgets: if a widget inside a text widget extends across\none of the edges of the text widget, then the widget obscures the border of\nthe text widget. Therefore, if the text widget has no border, then this\noverlapping does not occur.'
p1848
sg8
(lp1849
sg10
(lp1850
S'2005/03/23'
p1851
asg12
I0
sg13
(lp1852
sg15
(lp1853
ssS'wid.pmw.scrolledcanvas.opt.vscrollmode'
p1854
(dp1855
g4
(lp1856
sg6
S">option.pmw.vscrollmode.generic 'ScrolledCanvas'"
p1857
sg8
(lp1858
sg10
(lp1859
sg12
I0
sg13
(lp1860
sg15
(lp1861
ssS'wid.tkinter.scrollbar.opt.repeatdelay'
p1862
(dp1863
g4
(lp1864
sg6
S'>option.repeatdelay.generic "Scrollbar"'
p1865
sg8
(lp1866
sg10
(lp1867
sg12
I0
sg13
(lp1868
sg15
(lp1869
ssS'_temp'
p1870
(dp1871
g4
(lp1872
S'&bind editor'
p1873
aS'&bind assist'
p1874
aS'&bind editor'
p1875
aS'&bind assist'
p1876
asg6
S" n Find the binding you want to work on in the &bind editor and click on it's\n   {PIcons/pr-msc-assist.ppm} &bind assist button.\n\n n Find the binding you want to work on in the &bind editor and click on it'sddddddddddddd\n   &bind assist button."
p1877
sg8
(lp1878
sg10
(lp1879
sg12
I0
sg13
(lp1880
sg15
(lp1881
ssS'code-edit.action.swapwithtop'
p1882
(dp1883
g4
(lp1884
S'&remembered line'
p1885
aS'&remembered line'
p1886
aS'&remembered line'
p1887
aS'&editor actions'
p1888
asg6
S'{HCode editor - Swap with top}\n\n Key:   $tActionSwapWithTop\n Menu: {fEdit/Swap with top}\n\nThe actual action is:\n\n n The top entry from the &remembered line stack is popped.\n n The number of the current line is pushed on the &remembered line stack.\n n We goto the popped line.\n\nThe net effect is that each time you press this key you alternate betwee the\ncurrent line and the most recent &remembered line. Great for snapping back and\nforth between two pieces of code.\n\nCode &editor actions'
p1889
sg8
(lp1890
sg10
(lp1891
S'2005/04/07'
p1892
asg12
I0
sg13
(lp1893
sg15
(lp1894
S'Code editor - Swap with top'
p1895
assS'wid.tkinter.radiobutton.opt.font'
p1896
(dp1897
g4
(lp1898
sg6
S'>option.font.generic "Radiobutton"'
p1899
sg8
(lp1900
sg10
(lp1901
sg12
I0
sg13
(lp1902
sg15
(lp1903
ssS'import.failed'
p1904
(dp1905
S'Links'
p1906
(lp1907
S'=whatis.version-number'
p1908
asS'Text'
p1909
S"{HFile Version Conflict}\n\nI'm $$ @3 and I am able to handle Rapyd Project Form files (.rpf files) from version-@0 through version-@1, however\nthe form that you just asked to import is version-@2 which was produced, presumably, by a more recent version of $$,\nand which I am unable to handle. In order to be able to import that form you will need to upgrade to a more recent\nversion of $$.\n\n{LAll about File Version Numbers=whatis.version-number}"
p1910
sS'Hotlinks'
p1911
(lp1912
sS'Comments'
p1913
(lp1914
S'2014-02-27'
p1915
aS'@0 Lowest acceptable version number'
p1916
aS'@1 Highest acceptable version number'
p1917
aS'@2 Version number of form under import'
p1918
aS'@3 Version number of Rapyd'
p1919
asS'Wip'
p1920
I0
sS'Plurals'
p1921
(lp1922
sS'Abstracts'
p1923
(lp1924
ssS'wid.tkinter.toplevel.opt.width'
p1925
(dp1926
g4
(lp1927
sg6
S'{HToplevel - width}\n\nThe width of the Toplevel window in pixels.'
p1928
sg8
(lp1929
sg10
(lp1930
S'2005/04/28'
p1931
asg12
I0
sg13
(lp1932
sg15
(lp1933
ssS'option.closeenough.generic'
p1934
(dp1935
g4
(lp1936
S'&new mexico tech'
p1937
asg6
S'{H@0 - closeenough}\n\nA float that specifies how close the mouse must be to an item to be\nconsidered "inside it". Default is 1.0.\n\n$nmt'
p1938
sg8
(lp1939
sg10
(lp1940
S'2005/02/28'
p1941
asg12
I0
sg13
(lp1942
sg15
(lp1943
ssS'wid.tkinter.radiobutton.opt.value'
p1944
(dp1945
g4
(lp1946
sg6
S'>option.value.generic "Radiobutton"'
p1947
sg8
(lp1948
sg10
(lp1949
sg12
I0
sg13
(lp1950
sg15
(lp1951
ssS'option.pady.generic'
p1952
(dp1953
g4
(lp1954
S'&dimension'
p1955
aS'&new mexico tech'
p1956
asg6
S'{H@0 - pady}\n\nA &dimensioned number which specifies the amount of additional padding above\nand below the @1.\n\n$nmt'
p1957
sg8
(lp1958
sg10
(lp1959
S'2005/03/06'
p1960
asg12
I0
sg13
(lp1961
sg15
(lp1962
ssS'wid.tkinter.canvas.opt.insertbackground'
p1963
(dp1964
g4
(lp1965
sg6
S'>option.insertbackground.generic "Canvas"'
p1966
sg8
(lp1967
sg10
(lp1968
sg12
I0
sg13
(lp1969
sg15
(lp1970
ssS'wid.tkinter.scale.opt.highlightcolor'
p1971
(dp1972
g4
(lp1973
sg6
S'>option.highlightcolor.generic "Scale"'
p1974
sg8
(lp1975
sg10
(lp1976
sg12
I0
sg13
(lp1977
sg15
(lp1978
ssS'wid.tkinter.menubutton.opt.foreground'
p1979
(dp1980
g4
(lp1981
sg6
S'>option.foreground.generic "Menubutton"'
p1982
sg8
(lp1983
sg10
(lp1984
sg12
I0
sg13
(lp1985
sg15
(lp1986
ssS'option.indicatoron.generic'
p1987
(dp1988
g4
(lp1989
S'&new mexico tech'
p1990
asg6
S'{H@0 - indicatoron}\n\nNormally a @0 displays as its indicator a box that shows whether the @0 is\nset or not. You can get this behavior by setting this option to {gtrue}.\nHowever, if you set {findicatoron} to {gfalse}, the indicator disappears, and\nthe entire widget becomes a push-push button that looks raised when it is\ncleared and sunken when it is set. You may want to increase the borderwidth \nvalue to make it easier to see the state of such a control.\n\n$nmt'
p1991
sg8
(lp1992
sg10
(lp1993
S'2005/03/02'
p1994
asg12
I0
sg13
(lp1995
sg15
(lp1996
ssS'buffet.widget.generic2'
p1997
(dp1998
g4
(lp1999
S'=wid.pmw.timecounter.overview'
p2000
aS'&widget buffet'
p2001
aS'&layout area'
p2002
aS'&form'
p2003
asg6
S'{HWidget Buffet - @0 Icon}\n\nThis is the {L@0=@2} icon on the &widget buffet, which is itself part of the\n&layout area. Drag from this icon to place a@1 @0 widget on your &form.'
p2004
sg8
(lp2005
sg10
(lp2006
S'2006/03/19'
p2007
aS'Like buffet.widget.generic but contains a link to the widget info page'
p2008
aS'@0 - Name of the widget'
p2009
aS"@1 - 'n' if the widget starts with a vowel, else ''"
p2010
aS'@2 - The text of the link'
p2011
asg12
I0
sg13
(lp2012
sg15
(lp2013
ssS'wid.pmw.optionmenu.opt.command'
p2014
(dp2015
g4
(lp2016
S'&command option'
p2017
aS'&event'
p2018
aS'&handler'
p2019
asg6
S'{HOptionMenu - command}\n\nThis &command option specifies the &event &handler to call whenever a menu\nitem is selected or the {finvoke()} method is called. The function is called\nwith the currently selected value as its single argument.'
p2020
sg8
(lp2021
sg10
(lp2022
S'2006/03/21'
p2023
asg12
I0
sg13
(lp2024
sg15
(lp2025
ssS'wid.pmw.optionmenu.opt.initialitem'
p2026
(dp2027
g4
(lp2028
sg6
S'{HOptionMenu - initialitem}\n\nSpecifies the initial selected value. This option is treated in the same way\nas the index argument of the {fsetitems()} method.'
p2029
sg8
(lp2030
sg10
(lp2031
S'2006/03/21'
p2032
asg12
I0
sg13
(lp2033
sg15
(lp2034
ssS'wid.tkinter.button.opt.bitmap'
p2035
(dp2036
g4
(lp2037
sg6
S'>option.bitmap.generic "Button"'
p2038
sg8
(lp2039
sg10
(lp2040
sg12
I0
sg13
(lp2041
sg15
(lp2042
ssS'wid.pmw.entryfield.opt.labelmargin'
p2043
(dp2044
g4
(lp2045
sg6
S">option.pmw.labelmargin.generic 'EntryField'"
p2046
sg8
(lp2047
sg10
(lp2048
sg12
I0
sg13
(lp2049
sg15
(lp2050
ssS'wid.tkinter.text.opt.height'
p2051
(dp2052
g4
(lp2053
sg6
S'>option.height.generic "Text"'
p2054
sg8
(lp2055
sg10
(lp2056
sg12
I0
sg13
(lp2057
sg15
(lp2058
ssS'wid.tkinter.checkbutton.opt.state'
p2059
(dp2060
g4
(lp2061
sg6
S'>option.state.generic "Checkbutton"'
p2062
sg8
(lp2063
sg10
(lp2064
sg12
I0
sg13
(lp2065
sg15
(lp2066
ssS'buffet.widget.buttonbox'
p2067
(dp2068
g4
(lp2069
sg6
S'>buffet.widget.generic2 "Pmw.ButtonBox", \'\', \'wid.pmw.buttonbox.overview\''
p2070
sg8
(lp2071
sg10
(lp2072
sg12
I0
sg13
(lp2073
sg15
(lp2074
ssS'__whatever'
p2075
(dp2076
g4
(lp2077
sg6
S"\nThis is a dummy topic. It exists to be a target used by topics which want to refer to a topic that doesn't exist\nyet. By checking to see who links to this topic you can find references that need to be fixed up."
p2078
sg8
(lp2079
S'whatever'
p2080
asg10
(lp2081
sg12
I0
sg13
(lp2082
sg15
(lp2083
ssS'buffet.widget.radiobutton'
p2084
(dp2085
g4
(lp2086
sg6
S'>buffet.widget.generic "Radiobutton"'
p2087
sg8
(lp2088
sg10
(lp2089
sg12
I0
sg13
(lp2090
sg15
(lp2091
ssS'wid.pmw.notebook.opt.arrownavigation'
p2092
(dp2093
g4
(lp2094
S'&default'
p2095
asg6
S'{HNoteBook - arrownavigation}\n\nIf true and a tab button has the keyboard focus, then the Left and Right\narrow keys can be used to select the page before or after the tab button with\nthe focus. The &default is True.'
p2096
sg8
(lp2097
sg10
(lp2098
S'2006/02/21'
p2099
asg12
I0
sg13
(lp2100
sg15
(lp2101
ssS'wid.tkinter.scale.opt.sliderrelief'
p2102
(dp2103
g4
(lp2104
sg6
S'>option.sliderrelief.generic "Scale"'
p2105
sg8
(lp2106
sg10
(lp2107
sg12
I0
sg13
(lp2108
sg15
(lp2109
ssS'wid.pmw.scrolledcanvas.opt.labelmargin'
p2110
(dp2111
g4
(lp2112
sg6
S">option.pmw.labelmargin.generic 'ScrolledCanvas'"
p2113
sg8
(lp2114
sg10
(lp2115
sg12
I0
sg13
(lp2116
sg15
(lp2117
ssS'wid.tkinter.frame.opt.relief'
p2118
(dp2119
g4
(lp2120
sg6
S'>option.relief.generic "Frame"'
p2121
sg8
(lp2122
sg10
(lp2123
sg12
I0
sg13
(lp2124
sg15
(lp2125
ssS'wid.tkinter.entry.opt.borderwidth'
p2126
(dp2127
g4
(lp2128
sg6
S'>option.borderwidth.generic "Entry"'
p2129
sg8
(lp2130
sg10
(lp2131
sg12
I0
sg13
(lp2132
sg15
(lp2133
ssS'wid.pmw.scrolledframe.opt.vscrollmode'
p2134
(dp2135
g4
(lp2136
sg6
S">option.pmw.vscrollmode.generic 'ScrolledFrame'"
p2137
sg8
(lp2138
sg10
(lp2139
sg12
I0
sg13
(lp2140
sg15
(lp2141
ssS'howto.scrolledframe'
p2142
(dp2143
g4
(lp2144
S'=layout-frame-create'
p2145
asg6
S'{HHow to: Make a frame which is an instance of Pmw.ScrolledFrame}\n\no {LCreate a frame=layout-frame-create} in the usual manner.\n\no Right-click the mouse within the newly created frame.\n\no Click on the {gProperties} choice.\n\no Select the {gPmw.ScrolledFrame} choice.'
p2146
sg8
(lp2147
sg10
(lp2148
S'2006/03/22'
p2149
asg12
I0
sg13
(lp2150
sg15
(lp2151
S'How to: Make a frame which an instance of Pmw.ScrolledFrame'
p2152
aS'How to: Create a scrollable frame'
p2153
assS'wid.pmw.notebook.opt.name'
p2154
(dp2155
g4
(lp2156
sg6
S">option.name.generic 'NoteBook'"
p2157
sg8
(lp2158
sg10
(lp2159
sg12
I0
sg13
(lp2160
sg15
(lp2161
ssS'wid.pmw.scrolledframe.opt.label'
p2162
(dp2163
g4
(lp2164
sg6
S">option.pmw.label.generic 'ScrolledFrame'"
p2165
sg8
(lp2166
sg10
(lp2167
sg12
I0
sg13
(lp2168
sg15
(lp2169
ssS'wid.tkinter.canvas.opt.borderwidth'
p2170
(dp2171
g4
(lp2172
sg6
S'>option.borderwidth.generic "Canvas"'
p2173
sg8
(lp2174
sg10
(lp2175
sg12
I0
sg13
(lp2176
sg15
(lp2177
ssS'bindassist.badcomponent'
p2178
(dp2179
g4
(lp2180
S'=bindassist.compound'
p2181
asg6
S'{HBind assist - No such component}\n\nYou just clicked on {bOK}, but up at the top of the dialog you asked to creating the\nbinding against compenent "{g@0}" however there is no component of that name within the\ncurrent widget. Recommended course of action: use the dropdown at the top of the dialog\nto select a component or the widget itself to bind to.\n\nFor information on binding to compound widgets {lclick here.=bindassist.compound}'
p2182
sg8
(lp2183
sg10
(lp2184
sg12
I0
sg13
(lp2185
sg15
(lp2186
ssS'wid.tkinter.text.opt.tabs'
p2187
(dp2188
g4
(lp2189
sg6
S'>option.tabs.generic "Text"'
p2190
sg8
(lp2191
sg10
(lp2192
sg12
I0
sg13
(lp2193
sg15
(lp2194
ssS'wid.tkinter.text.opt.pyclass'
p2195
(dp2196
g4
(lp2197
sg6
S'>option.pyclass.generic "Text"'
p2198
sg8
(lp2199
sg10
(lp2200
sg12
I0
sg13
(lp2201
sg15
(lp2202
ssS'wid.tkinter.checkbutton.opt.borderwidth'
p2203
(dp2204
g4
(lp2205
sg6
S'>option.borderwidth.generic "Checkbutton"'
p2206
sg8
(lp2207
sg10
(lp2208
sg12
I0
sg13
(lp2209
sg15
(lp2210
ssS'wid.tkinter.canvas.opt.width'
p2211
(dp2212
g4
(lp2213
S'&dimension'
p2214
asg6
S'{HCanvas - width}\n\nA &dimensioned number specifying the width of the Canvas.'
p2215
sg8
(lp2216
sg10
(lp2217
S'2005/04/15'
p2218
asg12
I0
sg13
(lp2219
sg15
(lp2220
ssS'assist.proc.exist'
p2221
(dp2222
g4
(lp2223
S'&command option'
p2224
aS'&command option'
p2225
aS'&command option'
p2226
aS'=assist.proc.new'
p2227
aS'&command option'
p2228
aS'=bindassist.handlerchange'
p2229
aS'&command option'
p2230
aS'&command option'
p2231
aS'&binding'
p2232
aS'&event'
p2233
aS'&handler'
p2234
aS'&handler'
p2235
aS'&command option'
p2236
aS'&command option'
p2237
aS'&command option'
p2238
aS'&command option'
p2239
aS'&command option'
p2240
asg6
S'{HAssist - Command}\n\nThis assist helps you to revise an existing, already-set &command option.\n\nWhat happens here depends a lot on the type of the exsisting &command option\nsetting. The type was established when the &command option was first set;\n{Lclick here=assist.proc.new} for information on the two possible types.\n\n{bType: $$ maintained}\n\nt This is the usual case. If you want to change the name of the handler or\n  change the handler to which the &command option referrs then there are a\n  number of considerations, {Lclick here=bindassist.handlerchange} for\n  details.\n\n  To clear this &command option, click on the {gClear} button. If this is the\n  only &command option or &binding that refers to that &event &handler then\n  you get the opportunity to delete the &handler as well.\n\n{bType: User maintained}\n\nt This is the unusual case. You can change the event handler to which the\n  &command option refers simply by changing the name in the entry area. Since\n  this &command option is totally under your control no other action will be\n  taken.\n\n  You can clear this &command option by clicking on the {gClear} button\n\nNote: the only way to turn a "$$ maintained" &command option" into a "User\nmaintained" one or vice versa is to clear the &command option and then re-set\nit.'
p2241
sg8
(lp2242
sg10
(lp2243
sg12
I0
sg13
(lp2244
sg15
(lp2245
S'The option editor Command assist dialog (for already set command options)'
p2246
assS'wid.pmw.counter.opt.increment'
p2247
(dp2248
g4
(lp2249
sg6
S'{HCounter - increment}\n\nSpecifies how many units should be added or subtracted when\nthe counter is incremented or decremented. If the currently displayed\nvalue is not a multiple of {gincrement}, the value is\nchanged to the next multiple greather or less than the current value.\n\nFor the number datatypes, the value is a number. For the {gtime}\ndatatype, the value is in seconds. For the {gdate} datatype, the value is\nin days.'
p2250
sg8
(lp2251
sg10
(lp2252
S'2006/03/18'
p2253
asg12
I0
sg13
(lp2254
sg15
(lp2255
ssS'wid.pmw.messagebar.opt.hull'
p2256
(dp2257
g4
(lp2258
sg6
S'>option.pmw.hull.generic "MessageBar"'
p2259
sg8
(lp2260
sg10
(lp2261
sg12
I0
sg13
(lp2262
sg15
(lp2263
ssS'wid.tkinter.entry.opt.justify'
p2264
(dp2265
g4
(lp2266
S'&new mexico tech'
p2267
asg6
S"{H@0 - justify}\n\nThis option controls where the text is located when the text doesn't fill the\nwidget.\n\n$nmt"
p2268
sg8
(lp2269
sg10
(lp2270
S'2005/04/16'
p2271
asg12
I0
sg13
(lp2272
sg15
(lp2273
ssS'wid.tkinter.entry.opt.width'
p2274
(dp2275
g4
(lp2276
sg6
S'>option.width.generic "Entry"'
p2277
sg8
(lp2278
sg10
(lp2279
sg12
I0
sg13
(lp2280
sg15
(lp2281
ssS'wid.tkinter.button.opt.disabledforeground'
p2282
(dp2283
g4
(lp2284
sg6
S'>option.disabledforeground.generic "Button"'
p2285
sg8
(lp2286
sg10
(lp2287
sg12
I0
sg13
(lp2288
sg15
(lp2289
ssS'wid.pmw.labeledwidget.overview'
p2290
(dp2291
g4
(lp2292
sg6
S'{HWhat is: A LabeledWidget}\n\nThis megawidget consists of an interior frame with an associated label which\ncan be positioned on any side of the frame. The programmer can create other\nwidgets within the interior frame.'
p2293
sg8
(lp2294
sg10
(lp2295
S'2006/03/20'
p2296
asg12
I0
sg13
(lp2297
sg15
(lp2298
S'What is: A LabeledWidget'
p2299
assS'frame.delete'
p2300
(dp2301
g4
(lp2302
S'&form'
p2303
aS'=frame.popup'
p2304
aS'&parking lot'
p2305
asg6
S'{HHow to: Delete a frame from a form}\n\nTo delete a frame from a &form:\n\n n Move the cursor to a blank spot inside the frame to be deleted (i.e.\n   not over a widget).\n\n n Right click the mouse.\n\n n From the {Lpopup menu=frame.popup} choose the "Delete frame" choice.\n\n n When a dialog pops up to confirm the deletion, click "Delete".\n\nNote that "delete frame" works on the most deeply nested frame around the\ncursor location. In order to delete a frame which has sub-frames you must\nfirst delete the subframes. To delete a frame without losing it\'s widgets,\ntemporarily move them onto the &parking lot or another frame then delete\nthe subframe.'
p2306
sg8
(lp2307
sg10
(lp2308
S'2006/02/09'
p2309
asg12
I0
sg13
(lp2310
sg15
(lp2311
S'How to: Delete a frame from a form'
p2312
assS'layout-widget-select'
p2313
(dp2314
g4
(lp2315
S'&layout editor'
p2316
aS'&selector'
p2317
aS'&widgetator'
p2318
asg6
S"{HHow to: Select a particular widget}\n\nThere are two methods:\n\n n In the &layout editor, simply click over the widget.\n\nt or\n\n n In the &selector (upper left corner of the $$ window) call up the combo box and\n   click on the desired widget.\n\nWhen a widget is selected it's options appear in the &widgetator on the left."
p2319
sg8
(lp2320
S'select the widget'
p2321
asg10
(lp2322
S'2006/03/12'
p2323
asg12
I0
sg13
(lp2324
sg15
(lp2325
S'How to: Select a particular widget'
p2326
assS'wid.pmw.combobox.opt.name'
p2327
(dp2328
g4
(lp2329
sg6
S">option.name.generic 'ComboBox'"
p2330
sg8
(lp2331
sg10
(lp2332
sg12
I0
sg13
(lp2333
sg15
(lp2334
ssS'duplicator'
p2335
(dp2336
g4
(lp2337
S'&layout area'
p2338
aS'&select the widget'
p2339
aS'&form'
p2340
aS'&module'
p2341
aS'&parking lot'
p2342
aS'&form'
p2343
aS'&module'
p2344
aS'&parking lot'
p2345
aS'&form'
p2346
asg6
S'{HThe Duplicator}\n\nThe duplicator {P$imgpr-duplicator.ppm} is part of the &layout area and is used to make\nduplicate copies of widgets (other than frame widgets). Duplicated widgets retain the options,\nbindings and pack settings of the original widget.\n\nTo create a duplicate widget:\n\n n &Select the widget to be duplicated.\n\n n Click on the duplicator then drag.\n\n n A duplicate widgets is created which you can drag wherever you want.\n\nTo place a duplicated widget on a different &form or &module first create a duplicate as\ndescribed above and drop it on the &parking lot. Select the destination &form in the\ndestination &module and drag the duplicate widget from the &parking lot to that &form.\n\nIf no widget is selected or if the selected widget is a frame, then clicking on the duplicator\nhas no effect.'
p2347
sg8
(lp2348
g2335
asg10
(lp2349
S'2006/03/12'
p2350
asg12
I0
sg13
(lp2351
sg15
(lp2352
S'How to: Make copies (duplicates) of widgets'
p2353
assS'pack-editor.resizeknobs'
p2354
(dp2355
g4
(lp2356
S'&pack editor'
p2357
asg6
S"{bPack Editor - Resize Knobs} {P$imgpr-help-Resize.ppm}\n\nThese are the &pack editor's resize knobs, both of which can be dragged left\nor right.\n\n o Dragging the first resize knob adjusts the width of the area which shows\n   the option names.\n\n o Dragging the second resize knob adjusts the width of the edit area in\n   which you set the value of the options.\n\n{bNote}: To make the edit area wider, you can drag the second resize knob off\nthe right side of the option editor. Although the resize knob itself stops at\nthe edge of the option editor, the position of the mouse is still being\nfollowed and the edit area will resize appropriately."
p2358
sg8
(lp2359
sg10
(lp2360
S'2005/05/12'
p2361
asg12
I0
sg13
(lp2362
sg15
(lp2363
ssS'wid.pmw.timecounter.opt.pady'
p2364
(dp2365
g4
(lp2366
S'&default'
p2367
asg6
S'{HTimeCounter - pady}\n\nSpecifies how much higher to make each row of arrow buttons than the default\nhight. The arrow buttons are centered in the available space. The &default is\n0.'
p2368
sg8
(lp2369
sg10
(lp2370
S'2006/03/24'
p2371
asg12
I0
sg13
(lp2372
sg15
(lp2373
ssS'wid.tkinter.text.opt.takefocus'
p2374
(dp2375
g4
(lp2376
sg6
S'>option.takefocus.generic "Text"'
p2377
sg8
(lp2378
sg10
(lp2379
sg12
I0
sg13
(lp2380
sg15
(lp2381
ssS'wid.tkinter.entry.opt.validate'
p2382
(dp2383
g4
(lp2384
sg6
S'>option.validate.generic "Entry"'
p2385
sg8
(lp2386
sg10
(lp2387
sg12
I0
sg13
(lp2388
sg15
(lp2389
ssS'option.jump.generic'
p2390
(dp2391
g4
(lp2392
S'&new mexico tech'
p2393
asg6
S"{H@0 - jump}\n\nThis option controls what happens when a user drags the slider.\n\nNormally (jump=false), every small drag of the slider causes the command\ncallback to be called. If you set this option to true, the callback isn't\ncalled until the user releases the mouse button.\n\n$nmt"
p2394
sg8
(lp2395
sg10
(lp2396
S'2005/03/03'
p2397
asg12
I0
sg13
(lp2398
sg15
(lp2399
ssS'wid.pmw.scrolledframe.opt.labelpos'
p2400
(dp2401
g4
(lp2402
sg6
S">option.pmw.labelpos.generic 'ScrolledFrame'"
p2403
sg8
(lp2404
sg10
(lp2405
sg12
I0
sg13
(lp2406
sg15
(lp2407
ssS'bind-editor.resizeknobs'
p2408
(dp2409
g4
(lp2410
S'&bind editor'
p2411
aS'=bind-editor.abbreviation'
p2412
aS'&event'
p2413
aS'&handler'
p2414
aS'&handler'
p2415
aS'&bind editor'
p2416
asg6
S"{bBind Editor - Resize Knobs}   {p$img/pr-msc-resize.ppm}\n\nThese are the &bind editor's resize knobs, both of which can be dragged left or right.\n\n o Dragging the first resize knob adjusts the width of the area which shows the\n   {Labbreviation=bind-editor.abbreviation} of the &event description string.\n\n o Dragging the second resize knob adjusts the width of the area which shows the name of the &handler for this\n   binding.\n\n{bNote}: To make the &handler name area wider, you can drag the second resize knob off the right side of the &bind\neditor. Although the resize knob itself stops at the edge of the editor, the position of the mouse is still being\ntracked and the handler name area will resize appropriately."
p2417
sg8
(lp2418
sg10
(lp2419
S'2005/03/17'
p2420
asg12
I0
sg13
(lp2421
sg15
(lp2422
S'The Bind editor resize knobs'
p2423
assS'widget.instance'
p2424
(dp2425
g4
(lp2426
sg6
S"Hi there Partner!\n\nI'm @0. I'm a proud @4 @1 widget and at the moment I'm living cheerfully on the @2.\n\n@3\n\nIf you ever have trouble telling me from other @1's (it's hard to believe but I've been told that to humans, all\n@1's look alike) then just put the cursor over me (or some other widget if you must) and my name will pop up. Well,\nif you are over some other widget {itheir} name will pop up, but why would you want to do that when I'm available?"
p2427
sg8
(lp2428
sg10
(lp2429
S'<2005/04/16'
p2430
aS'@0 - The name of the widreq eg MyButton'
p2431
aS'@1 - The widget type eg Button'
p2432
aS'@2 - The current location of the widget'
p2433
aS'@3 - A paid political message from the widget'
p2434
aS'@4 - The module from which the widget is imported eg Tkinter'
p2435
asg12
I0
sg13
(lp2436
sg15
(lp2437
ssS'load.cancelled'
p2438
(dp2439
g4
(lp2440
sg6
S'{HChoice following cancelled load}\n\n$$ recently attempted to load a project but that load was cancelled.\n\nAt this point you have a choice between loading a different existing project,\ncreating a new project or exiting $$.'
p2441
sg8
(lp2442
sg10
(lp2443
S'2006/03/30'
p2444
asg12
I0
sg13
(lp2445
sg15
(lp2446
ssS'wid.pmw.scrolledtext.opt.pyclass'
p2447
(dp2448
g4
(lp2449
sg6
S'>option.pyclass.generic "ScrolledText"'
p2450
sg8
(lp2451
sg10
(lp2452
sg12
I0
sg13
(lp2453
sg15
(lp2454
ssS'bind-editor'
p2455
(dp2456
g4
(lp2457
S'&form'
p2458
aS'&event'
p2459
aS'&handler'
p2460
aS'&widgetator'
p2461
aS'&binding'
p2462
aS'&binding'
p2463
aS'&binding'
p2464
aS'&binding'
p2465
aS'&binding'
p2466
aS'&bind assist'
p2467
aS'&handler'
p2468
aS'&binding'
p2469
aS'&binding'
p2470
aS'&bind assist'
p2471
aS'&bind assist'
p2472
aS'=bind-display-compound'
p2473
aS'=bind-editor.abbreviation'
p2474
aS'&binding'
p2475
aS'&handler'
p2476
aS'&handler'
p2477
aS'&event'
p2478
aS'&handler'
p2479
aS'&event'
p2480
aS'&event'
p2481
aS'&event'
p2482
aS'&handler'
p2483
aS'=bind-editor.abbreviation'
p2484
asg6
S'{hThe Bind Editor}\n\nEach widget in a &form can be bound to &events. When the event happens, a user-written method, referred to as an\nevent &handler, is called.\n\nThe Bind Editor, which is part of the &widgetator, is where you create, modify and delete &bindings for a particular\nwidget. Note that &bindings specified in the bind editor are put into effect just after the widget itself is\ncreated. Your program can, of course, alter the &bindings at any time after the widget has been created. The bind\neditor is simply a convenience. It is entirely possible, although less convenient, for you to create any necessary\n&bindings programatically in your code.\n\no {BCreate}  To create a new &binding click on the {GCreate New Binding} button at the bottom of the bind editor.\n  This will bounce you into the &Bind Assist dialog where you can specify the event and the &handler for your new\n  &binding.\n\no {BModify}  To change an existing &binding, find it among the bindings listed in the Bind Editor, then click on the\n  {p$img/pr-msc-assist.ppm} assist button just to the right. This will bounce you into the &Bind Assist dialog where\n  you can make changes to the binding.\n\no {BDelete}  To delete an existing binding, find it among the bindings listed in the bind editor, then click on the\n  {p$img/pr-msc-assist.ppm} assist button just to the right. This will take you into the &Bind Assist dialog where\n  you can click on the {GDelete} button.\n\no {BGoto event handler}  To quickly find a handler\'s code, double click anywhere on the binding (other than the\n  {p$img/pr-msc-assist.ppm} assist button). If the code editor isn\'t already visible it is made visible and the\n  cursor is placed on the first line of the body of the handler.\n\n{BBind Editor Display} {P$imgpr-help-BindEditor.ppm}\n\nHere we cover regular widgets. Binding with compound (eg Pmw) widgets has some additional wrinkles. {LClick here for\ndetails=bind-display-compound}. The Bind Editor consists of three columns:\n\n n {BEvent}  The left column shows an {Labbreviation=bind-editor.abbreviation} of the event description string for\n   each &binding. To see the full event string put the mouse cursor over abbreviation and hold it still for a\n   second. To goto the &handler in the code, double click on this column or the middle column.\n\n n {BHandler}  The middle column shows the name of the event &handler associated with the &event. Depending on the\n   width of the &handler column (see Resize Knobs, below) long &event names may be truncated. To see the full &event\n   name put the mouse cursor over the &event name and hold it still for a second. To goto the the &handler in the\n   code, double click on this column or the left column.\n n {BAssist button}  The right column is a series of {p$img/pr-help-Assist.ppm} "assist" buttonss. Click on this\n   button to open a dialog where you can change or delete the corresponding binding.\n\n{BThe Resize Knobs}\n\nAt the top of the bind edit area are two {p$img/pr-help-Resize.ppm} small resize knobs, each of which can be dragged\nleft or right. Dragging the first resize knob adjusts the width of the area which shows the\n{Labbreviated=bind-editor.abbreviation} event description string. Dragging the second resize knob adjusts the width\nof the edit area which shows the event handler name. {bNote}: To make the event handler name area wider you can drag\nthe resize knob off the right edge of the bind editor. Although the resize knob loses visibility when the mouse\nleaves the bind editor, the position of the mouse is still being tracked and the event handler name area will resize\nappropriately.'
p2485
sg8
(lp2486
S'bind editor'
p2487
asg10
(lp2488
S'2005/03/17'
p2489
asg12
I0
sg13
(lp2490
sg15
(lp2491
S'The Bind Editor associates Events with Event-Handlers'
p2492
assS'option.postcommand.generic'
p2493
(dp2494
g4
(lp2495
S'&handler'
p2496
aS'&handler'
p2497
aS'&command option'
p2498
aS'&handler'
p2499
aS'&command option'
p2500
aS'&handler'
p2501
aS'&handler'
p2502
aS'&handler'
p2503
aS'&code editor'
p2504
asg6
S"{H@0 - postcommand}\n\nThe name of the &handler to be called when this menu is shown.\n\nIf no &handler is currently associated with this &command option then\nclicking on this option's {p$imgpr-help-Assist.ppm} icon will allow you to\neasily create a &handler and associate it with this &command option.\n\nIf this option already specifies a &handler then double-clicking on the\nname of the &handler in the option-editor will immediately take you to\nthat &handler in the &code editor."
p2505
sg8
(lp2506
sg10
(lp2507
S'2005/03/06'
p2508
asg12
I0
sg13
(lp2509
sg15
(lp2510
ssS'wid.pmw.scrolledcanvas.opt.canvasmargin'
p2511
(dp2512
g4
(lp2513
S'&dimension'
p2514
asg6
S'{HScrolledCanvas - canvasmargin}\n\nA &dimensioned number giving the margin around the items in the canvas. Used by the {gresizescrollregion()} method.\nThe default is 0.'
p2515
sg8
(lp2516
sg10
(lp2517
S'2006/03/22'
p2518
asg12
I0
sg13
(lp2519
sg15
(lp2520
ssS'wid.tkinter.checkbutton.opt.highlightbackground'
p2521
(dp2522
g4
(lp2523
sg6
S'>option.highlightbackground.generic "Checkbutton"'
p2524
sg8
(lp2525
sg10
(lp2526
sg12
I0
sg13
(lp2527
sg15
(lp2528
ssS'wid.tkinter.listbox.opt.highlightcolor'
p2529
(dp2530
g4
(lp2531
sg6
S'>option.highlightcolor.generic "Listbox"'
p2532
sg8
(lp2533
sg10
(lp2534
sg12
I0
sg13
(lp2535
sg15
(lp2536
ssS'wid.tkinter.button.opt.highlightbackground'
p2537
(dp2538
g4
(lp2539
sg6
S'>option.highlightbackground.generic "Button"'
p2540
sg8
(lp2541
sg10
(lp2542
sg12
I0
sg13
(lp2543
sg15
(lp2544
ssS'option.highlightcolor.generic'
p2545
(dp2546
g4
(lp2547
S'&color'
p2548
aS'&focus'
p2549
asg6
S'{H@0 - highlightcolor}\n\nThe &color of the &focus highlight when this @0 has the focus.'
p2550
sg8
(lp2551
sg10
(lp2552
S'2005/03/02'
p2553
asg12
I0
sg13
(lp2554
sg15
(lp2555
ssS'wid.pmw.entryfield.opt.hull'
p2556
(dp2557
g4
(lp2558
sg6
S">option.pmw.hull.generic 'EntryField'"
p2559
sg8
(lp2560
sg10
(lp2561
sg12
I0
sg13
(lp2562
sg15
(lp2563
ssS'wid.tkinter.text.opt.selectbackground'
p2564
(dp2565
g4
(lp2566
sg6
S'>option.selectbackground.generic "Text","text"'
p2567
sg8
(lp2568
sg10
(lp2569
sg12
I0
sg13
(lp2570
sg15
(lp2571
ssS'wid.pmw.scrolledfield.overview'
p2572
(dp2573
g4
(lp2574
sg6
S'{HWhat is: A ScrolledField widget}\n\nA scrolled field displays a single line of text. If the text is too wide to\ndisplay in the megawidget it can be scrolled to the left and right by the\nuser by dragging with the middle mouse button. The text is also selectable by\nclicking or dragging with the left mouse button.\n\nIt can be used instead of a Tkinter.Label widget when displaying text of\nunknown width such as application status messages.'
p2575
sg8
(lp2576
sg10
(lp2577
S'2006/03/21'
p2578
asg12
I0
sg13
(lp2579
sg15
(lp2580
S'What is: A ScrolledField widget'
p2581
assS'layout.menu.modules'
p2582
(dp2583
g4
(lp2584
S'&module'
p2585
aS'&project'
p2586
aS'&project'
p2587
aS'&module'
p2588
aS'&module'
p2589
aS'&module'
p2590
aS'&project'
p2591
aS'&project'
p2592
aS'&module'
p2593
aS'&module'
p2594
aS'&module'
p2595
aS'&module'
p2596
aS'&module'
p2597
aS'&project'
p2598
aS'&module'
p2599
aS'&module'
p2600
aS'&module'
p2601
aS'&module'
p2602
aS'&module'
p2603
aS'&module'
p2604
aS'&module'
p2605
aS'&project'
p2606
aS'&module'
p2607
aS'&module'
p2608
aS'&project'
p2609
aS'&module'
p2610
aS'&project'
p2611
aS'&project'
p2612
aS'&module'
p2613
aS'&project'
p2614
aS'&module'
p2615
aS'&project'
p2616
aS'&module'
p2617
aS'&project'
p2618
aS'&form'
p2619
aS'&module'
p2620
aS'&module'
p2621
aS'&project'
p2622
aS'&form'
p2623
aS'&module'
p2624
aS'&project'
p2625
aS'&module'
p2626
aS'&project'
p2627
aS'&module'
p2628
aS'&module'
p2629
aS'&module'
p2630
aS'&module'
p2631
aS'&project'
p2632
aS'&project'
p2633
aS'&project'
p2634
asg6
S'{HLayout area - Modules menu}\n\nThe {bModules menu} is where you mess with &modules. Modules live inside a\n&project.\n\no {gModule select}\n   If your &project consists of more than one &module, use this to select which\n  &module you want to work on now. It presents you with a list of all the &modules\n  in your &project. Select the one you want and press OK.\n\no {gModule alternate}\n   If your &project consists of more than one &module there there will be times\n  when it is convenient to quickly switch between two &modules. The {galternate}\n  choice switches between the current &module and the &module that you were\n  previously working on. You can also use the {g$tActionModuleAlternate} key to\n  alternate betwee &modules.\n\no {GModule next}\n   If your &project consists of more than one &module then this choice switches to\n  the next &module, in alphabetical order by &module name. If your are currently\n  on the last &module, then this choice wraps around to the first &module. You can\n  also use the {g$tActionModuleNext} key combination to advance to the next\n  &module.\n\no {gAdd new module to project}\n   Use this to add a new, empty &module to your &project. You will have to supply\n  a name for the new &module which is different from the name of any other &module\n  in the current &project.\n\no {gRename the current module}\n   Use this to change the name of the current &module within the current &project.\n  The next time you build the &project the &module will be saved under the new\n  name. If you have already built the &project and created a copy of the &module\n  under the old name, that file will continue to exist. If you want it to go away\n  you will have to delete if yourself from the operating system.\n\n  Note that the name of the &project, the name of the primary &module of the\n  &project, and the name of the main &form of the main &module are one and the\n  same. Therefore if you rename the primary &module of the project this will\n  rename the &project and the main &form of the main module as well.\n\no {gDelete the current module}\n   Use this to delete the current &module from the current &project. Once a\n  &module has been deleted you can\'t un-delete it so be careful with this one. If\n  you built the &project prior to deleting this &module then the "{g.py}" file for\n  the deleted &module will continue to exist. If you want it to go away you will\n  have to delete if yourself from the operating system.\n\n  Note that since a $$ project consists of at least one &module, you can\'t delete\n  the last &module of a &project. If you want the whole &project to go away then,\n  from the operating system, delete the $rpj file which holds the &project.'
p2635
sg8
(lp2636
sg10
(lp2637
S'<2005/05/27'
p2638
asg12
I0
sg13
(lp2639
sg15
(lp2640
S'The Layout area Modules menu'
p2641
aS'How to: Alternates between modules'
p2642
aS'How to: Cycle through all modules'
p2643
aS'How to: Select a module'
p2644
aS'How to: Add a new module to your project'
p2645
aS'How to: Remove (delete) a module from your project'
p2646
assS'wid.pmw.entryfield.opt.validate'
p2647
(dp2648
g4
(lp2649
S'=option.verbatim'
p2650
asg6
S'{HEntryField - validate}\n\nSpecifies what kind of validation should be performed on the entry input\ntext.\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.\n\nThe most general way to specify the validate option is as a dictionary. The\nkind of validation is specified by the \'validator\' dictionary field, which\nmay be the name of one of the standard validators described below, the name\nof a validator supplied by the extravalidators option, a function or None.\nThe default is None.\n\nAny other dictionary fields specify other restrictions on the entered values.\nFor all validators, the following fields may be specified:\n\no {g\'min\'} Specifies the minimum acceptable value, or None if no minimum\n  checking should be performed. The default is None.\n\no {g\'max\'} Specifies the maximum acceptable value, or None if no maximum\n  checking should be performed. The default is None.\n\no {g\'minstrict\'} If true, then minimum checking is strictly enforced.\n  Otherwise, the entry input may be less than min, but will be displayed\n  using the errorbackground color. The default is true.\n\no {g\'maxstrict\'} If true, then maximum checking is strictly enforced.\n  Otherwise, the entry input may be more than max, but will be displayed\n  using the errorbackground color. The default is true.\n\nIf the dictionary contains a {g\'stringtovalue\'} field, it overrides the\nnormal {istringtovalue} function for the validator. The {istringtovalue}\nfunction is described below.\n\nOther fields in the dictionary (apart from the core fields mentioned above)\nare passed on to the {ivalidator} and {istringtovalue} functions as keyword\narguments.\n\nIf {gvalidate} is not a dictionary, then it is equivalent to specifying it as\na dictionary with a single \'validator\' field. For example, validate = \'real\'\nis equivalent to "validate = {{\'validator\' : \'real\'}" and specifies real\nnumbers without any minimum or maximum limits and using \'.\' as the decimal\npoint character.\n\nThe standard validators accepted in the \'validator\' field are:\n\no {g\'numeric\'} An integer greater than or equal to 0. Digits only. No sign.\n\no {g\'integer\'} Any integer (negative, 0 or positive) as accepted by\n  string.atol().\n\no {g\'hexadecimal\'} Hex number (with optional leading \'0x\'), as accepted by\n  string.atol(text, 16).\n\no {g\'real\'} A number, with or without a decimal point and optional exponent\n  (e or E), as accepted by string.atof(). This validator accepts a\n  \'separator\' argument, which specifies the character used to represent the\n  decimal point. The default \'separator\' is \'.\'.\n\no {g\'alphabetic\'} Consisting of the letters \'a-z\' and \'A-Z\'. In this case,\n  \'min\' and \'max\' specify limits on the length of the text.\n\no {g\'alphanumeric\'} Consisting of the letters \'a-z\', \'A-Z\' and \'0-9\'. In this\n  case, \'min\' and \'max\' specify limits on the length of the text.\n\no {g\'time\'} Hours, minutes and seconds, in the format \'HH:MM:SS\', as accepted\n  by Pmw.timestringtoseconds(). This validator accepts a \'separator\'\n  argument, which specifies the character used to separate the three fields.\n  The default separator is \':\'. The time may be negative.\n\no {g\'date\'} Day, month and year, as accepted by Pmw.datestringtojdn(). This\n  validator accepts a \'separator\' argument, which specifies the character\n  used to separate the three fields. The default is \':\'. This validator also\n  accepts a \'format\' argument, which is passed to Pmw.datestringtojdn() to\n  specify the desired ordering of the fields. The default is \'ymd\'.\n\nIf \'validator\' is a function, then it will be called whenever the contents of\nthe entry may have changed due to user action or by a call to {fsetentry()}.\nThe function is called with at least one argument, the first one being the\nnew text as modified by the user or {fsetentry()}. The other arguments are\nkeyword arguments made up of the non-core fields of the validate dictionary.\n\nThe validator function should return Pmw.OK, Pmw.ERROR or Pmw.PARTIAL as\ndescribed above. It should not perform minimum and maximum checking. This is\ndone after the call, if it returns Pmw.OK.\n\nThe \'stringtovalue\' field in the dictionary may be specified as the name of\none of the standard validators, the name of a validator supplied by the\nextravalidators option, a function or None.\n\nThe stringtovalue function is used to convert the entry input into a value\nwhich can then be compared with any minimum or maximum values specified for\nthe validator. If the \'min\' or \'max\' fields are specified as strings, they\nare converted using the stringtovalue function. The stringtovalue function is\ncalled with the same arguments as the validator function. The stringtovalue\nfunction for the standard number validators convert the string to a number.\nThose for the standard alpha validators return the length of the string.\nThose for the standard \'time\' and \'date\' validators return the number of\nseconds and the Julian Day Number, respectively. See Pmw.stringtoreal(),\nPmw.timestringtoseconds() and Pmw.datestringtojdn().\n\nIf the validator has been specified as a function and no \'stringtovalue\'\nfield is given, then it defaults to the standard python len() function.\n\nIf \'validator\' is None, no validation is performed. However, minimum and\nmaximum checking may be performed, according to the stringtovalue function.\nFor example, to limit the entry text to a maximum of five characters:\n\n Pmw.EntryField(validate = {{\'max\' : 5})\n\nThe validator functions for each of the standard validators can be accessed\nas:\n\nt {fPmw.numericvalidator\nt Pmw.integervalidator\nt Pmw.hexadecimalvalidator\nt Pmw.realvalidator\nt Pmw.alphabeticvalidator\nt Pmw.alphanumericvalidator\nt Pmw.timevalidator\nt Pmw.datevalidator}\n\nWhenever the validate option is configured, the text currently displayed in\nthe entry widget is revalidated. If it is not valid, the errorbackground\ncolor is set and the invalidcommand function is called. However, the\ndisplayed text is not modified.'
p2651
sg8
(lp2652
sg10
(lp2653
S'2006/03/19'
p2654
asg12
I0
sg13
(lp2655
sg15
(lp2656
ssS'wid.tkinter.scrollbar.opt.jump'
p2657
(dp2658
g4
(lp2659
sg6
S'>option.jump.generic "Scrollbar"'
p2660
sg8
(lp2661
sg10
(lp2662
sg12
I0
sg13
(lp2663
sg15
(lp2664
ssS'wid.pmw.timecounter.opt.secondentryfield'
p2665
(dp2666
g4
(lp2667
sg6
S'{HTimeCounter - secondentryfield}\n\nThe entry field where the seconds are entered and displayed.'
p2668
sg8
(lp2669
sg10
(lp2670
S'2006/03/24'
p2671
asg12
I0
sg13
(lp2672
sg15
(lp2673
ssS'wid.pmw.scrolledframe.opt.nametop'
p2674
(dp2675
g4
(lp2676
sg6
S'>option.nametop.generic "ScrolledFrame"'
p2677
sg8
(lp2678
sg10
(lp2679
sg12
I0
sg13
(lp2680
sg15
(lp2681
ssS'wid.pmw.scrolledcanvas.overview'
p2682
(dp2683
g4
(lp2684
sg6
S'{HWhat is: A ScrolledCanvas widget}\n\nA scrolled canvas consists of a standard canvas widget with optional\nscrollbars which can be used to scroll the canvas. The scrollbars can be\ndynamic, which means that a scrollbar will only be displayed if it is\nnecessary, that is, if the scrollregion of the canvas is larger than the\ncanvas.'
p2685
sg8
(lp2686
sg10
(lp2687
S'2006/03/21'
p2688
asg12
I0
sg13
(lp2689
sg15
(lp2690
S'What is: A ScrolledCanvas widget'
p2691
assS'error.reporting'
p2692
(dp2693
g4
(lp2694
sg6
S'{HHow to: Report errors found in $$}\n\nThe short answer is to email us a bug report at $mailto\n\n{bThe long story}\n\no {BProgram execution bugs} For these we need some reliable way of making the\n  problem happen. If we can\'t make the problem happen then we have no way of\n  knowing if we have fixed it. Error reports of the form "occasionally it\n  does yada" are almost useless. The ideal bug report is a clear and\n  comprehensible list of things to do which culminates in the problem\n  happening. Keeping the list of things to do free of unnecessary steps is\n  helpful.\n\no {BHelp message problems} If you find a factual error or a typo in a help\n  message or if you find a help message that is simply not on topic then we\n  would like to know about it. While the erronious help message is showing,\n  right-click the mouse over the {gClose} button in the upper right corner of\n  the "Help" window; this will pop up a dialog showing the unique name of the\n  current help topic. In your report, please mention the Topic Name along\n  with the problem in the text.\n\no {BFeature requests} By all means send these in, but keep in mind that $$ is\n  maintained by volunteers who have lives apart from the computer. This is\n  open-source. If you feel a feature is Really Really needed you might\n  consider implementing it yourself and then submitting the code. Some\n  caveats:\n\n o If you are submitting a suggestion then for best effect it should come\n   with a ludid and compelling explanation of what the suggested feature\n   would do, how this feature would be of benefit to a majority of $$\'s users\n   and how it fits in nicely with the spirit of the existing project.\n\n o If you propose to modify $$ and submit the modification then you might\n   check with the $$ team in advance to see if we think the suggested\n   modification makes sense, particularly if the time required on your part\n   is large. Modification which we think violate the existing spirit of the\n   project are not likely to be included, regardless of how much you like\n   them.'
p2695
sg8
(lp2696
sg10
(lp2697
S'2006/03/31'
p2698
asg12
I0
sg13
(lp2699
sg15
(lp2700
S'How to: Report errors/bugs found in $$'
p2701
assS'eventhandler-popup-menu'
p2702
(dp2703
g4
(lp2704
S'&event'
p2705
aS'&code editor'
p2706
aS'=dialog-handlerreference'
p2707
aS'&maintained'
p2708
aS'&binding'
p2709
aS'&command option'
p2710
aS'&handler'
p2711
aS'=dialog-handlerrename'
p2712
aS'&handler'
p2713
aS'&maintained'
p2714
aS'=dialog-handlerdelete'
p2715
aS'&handler'
p2716
asg6
S'{HThe event handler popup menu}\n\nThis menu lets you mess with &event handlers. To get the menu, from the\n&code editor place the cursor over the "def" part of the handler (anywhere\ninside the text that is on a different colored background will do) and\nright click.\n\no {LSee references=dialog-handlerreference}\n   To find out which $$ &maintained &bindings and &command options refer\n  to this &handler.\n\no {LRename=dialog-handlerrename}\n   To rename this &handler and have all the $$ &maintained references to\n  it updated.\n\no {LDelete=dialog-handlerdelete}\n   To delete this &handler.'
p2717
sg8
(lp2718
sg10
(lp2719
S'2006/02/07'
p2720
asg12
I0
sg13
(lp2721
sg15
(lp2722
S'The event handler popup menu'
p2723
assS'load.identity.crisis'
p2724
(dp2725
S'Links'
p2726
(lp2727
sS'Text'
p2728
S'{HIdentity crisis detected at project-load time}\n\nYou just asked me to load project "{g@1.rpj}" from directory\n\nt {g@0}\n\nhowever that project is quite convinced that its name is "{g@2}". This probably means that someone used the\noperating system to rename the file "{g@2.rpj}" to be "{g@1.rpj}". Alas, there are a number of internal consistency\nchecks that need to be done when a project is renamed so you can\'t just rename it with the operating system and\nexpect it work.\n\nYou have two choices:\n\n{bChoice One}\n\nIf you want to load the subject file then, using the operating system, rename it back to "{g@2.rpj}" and try loading\nit again. Assuming there are no other issues then it should load fine.\n\n{bChoice Two}\n\nThe officially sanctioned way to make a copy of a project under another name is thus:\n\n n Load the project you want to make a copy of.\n n From the {gProject} menu click on {gRename Project}.\n n Enter the name for the new copy and click {gOK}. The various necessary consistency checks happen at this point.\n n Save the renamed project.\n\nThis procedure will leave the original project untouched while creating a duplicate of the project under the new\nname.'
p2729
sS'Hotlinks'
p2730
(lp2731
sS'Comments'
p2732
(lp2733
S'2014-03-27'
p2734
asS'Wip'
p2735
I0
sS'Plurals'
p2736
(lp2737
sS'Abstracts'
p2738
(lp2739
ssS'wid.pmw.timecounter.opt.downhourarrow'
p2740
(dp2741
g4
(lp2742
sg6
S">wid.pmw.timecounter.arrow 'down','dec','hour'"
p2743
sg8
(lp2744
sg10
(lp2745
sg12
I0
sg13
(lp2746
sg15
(lp2747
ssS'wid.pmw.counter.opt.autorepeat'
p2748
(dp2749
g4
(lp2750
sg6
S'{HCounter - autorepeat}\n\nIf True, the counter will continue to count up or down\nas long as the arrow button is held down.'
p2751
sg8
(lp2752
sg10
(lp2753
S'2006/03/18'
p2754
asg12
I0
sg13
(lp2755
sg15
(lp2756
ssS'wid.tkinter.radiobutton.opt.foreground'
p2757
(dp2758
g4
(lp2759
sg6
S'>option.foreground.generic "Radiobutton"'
p2760
sg8
(lp2761
sg10
(lp2762
sg12
I0
sg13
(lp2763
sg15
(lp2764
ssS'wid.pmw.timecounter.opt.pyclass'
p2765
(dp2766
g4
(lp2767
sg6
S'>option.pyclass.generic "TimeCounter"'
p2768
sg8
(lp2769
sg10
(lp2770
sg12
I0
sg13
(lp2771
sg15
(lp2772
ssS'wid.tkinter.menu.opt.activeforeground'
p2773
(dp2774
g4
(lp2775
S'&color'
p2776
aS'&new mexico tech'
p2777
asg6
S'{HMenu - activeforeground}\n\nThe foreground &color that will appear on a choice when it is under the\nmouse.\n\n$nmt'
p2778
sg8
(lp2779
sg10
(lp2780
S'2005/04/19'
p2781
asg12
I0
sg13
(lp2782
sg15
(lp2783
ssS'option.foreground.generic'
p2784
(dp2785
g4
(lp2786
S'&color'
p2787
asg6
S'{H@0 - foreground}\n\nThe normal foreground &color to use with this @0.'
p2788
sg8
(lp2789
sg10
(lp2790
S'2005/03/02'
p2791
asg12
I0
sg13
(lp2792
sg15
(lp2793
ssS'wid.tkinter.menu.opt.activebackground'
p2794
(dp2795
g4
(lp2796
sg6
S'>option.activebackground.generic "Menu"'
p2797
sg8
(lp2798
sg10
(lp2799
sg12
I0
sg13
(lp2800
sg15
(lp2801
ssS'wid.pmw.combobox.opt.fliparrow'
p2802
(dp2803
g4
(lp2804
sg6
S'{HComboBox - fliparrow}\n\nUsed only in dropdown ComboBoxes. If True, the arrow button is drawn upside down\nwhen the ListBox is being displayed.  The &default is {gTrue}.'
p2805
sg8
(lp2806
sg10
(lp2807
S'2006/03/18'
p2808
asg12
I0
sg13
(lp2809
sg15
(lp2810
ssS'wid.tkinter.button.opt.underline'
p2811
(dp2812
g4
(lp2813
sg6
S'>option.underline.generic "Button"'
p2814
sg8
(lp2815
sg10
(lp2816
sg12
I0
sg13
(lp2817
sg15
(lp2818
ssS'wid.pmw.timecounter.overview'
p2819
(dp2820
g4
(lp2821
S'=wid.pmw.counter.overview'
p2822
asg6
S'{HWhat is: A TimeCounter widget}\n\nA time counter is similar to a regular\n{LPmw.Counter=wid.pmw.counter.overview} except that the user may increment\nand decrement the hours, minutes and seconds individually.'
p2823
sg8
(lp2824
sg10
(lp2825
S'2006/03/21'
p2826
asg12
I0
sg13
(lp2827
sg15
(lp2828
S'What is: A TimeCounter widget'
p2829
assS'wid.tkinter.entry.opt.insertbackground'
p2830
(dp2831
g4
(lp2832
sg6
S'>option.insertbackground.generic "Entry"'
p2833
sg8
(lp2834
sg10
(lp2835
sg12
I0
sg13
(lp2836
sg15
(lp2837
ssS'wid.tkinter.canvas.opt.insertborderwidth'
p2838
(dp2839
g4
(lp2840
sg6
S'>option.insertborderwidth.generic "Canvas"'
p2841
sg8
(lp2842
sg10
(lp2843
sg12
I0
sg13
(lp2844
sg15
(lp2845
ssS'wid.pmw.counter.opt.padx'
p2846
(dp2847
g4
(lp2848
S'&default'
p2849
asg6
S'{HCounter - padx}\n\nA &dimensioned number which specifies a padding distance to leave around the arrow buttons in the x direction. The &default is 0.'
p2850
sg8
(lp2851
sg10
(lp2852
S'2006/02/20'
p2853
asg12
I0
sg13
(lp2854
sg15
(lp2855
ssS'option.pmw.label.generic'
p2856
(dp2857
g4
(lp2858
sg6
S'{H@0 - label}\n\nIf the {glabelpos} option is not {gNone}, this component is created as a\ntext label for the @0 megawidget.'
p2859
sg8
(lp2860
sg10
(lp2861
S'2006/03/19'
p2862
asg12
I0
sg13
(lp2863
sg15
(lp2864
ssS'bind.eventwizard.basicevent'
p2865
(dp2866
g4
(lp2867
S'&event'
p2868
aS'&bind wizard'
p2869
aS'&event'
p2870
aS'&focus'
p2871
aS'&focus'
p2872
aS'&new mexico tech'
p2873
asg6
S'{HBind Event Wizard - Basic Types}\n\nAn &Event string consists of a {bbasic event} plus optional other stuff. Right now the &bind\nwizard is waiting for you to choose the basic &event. Having made your choice you should\npress the {gNext} button to continue the process.\n\nThe basic event types available through the wizard are:\n\no {GActivate}  A widget is changing from being inactive to being active. This refers to\n  changes in the state option of a widget such as a button changing from inactive (grayed\n  out) to active.\n\no {gButtonPress}  The user pressed one of the mouse buttons.\n\no {gButtonRelease} The user let up on a mouse button. This is probably a better choice in\n  most cases than the ButtonPress event, because if the user accidentally presses the\n  button, they can move it off the widget to avoid setting off the event.\n\no {GConfigure}  The user changed the size of a widget, for example by dragging a corner or\n  side of the window.\n\no {gDeactivate}  A widget is changing from being active to being inactive. This refers to\n  changes in the state option of a widget such as a radiobutton changing from active to\n  inactive (grayed out).\n\no {gDestroy}  A widget is being destroyed.\n\no {gEnter}  The user moved the mouse pointer into a visible part of a widget. (This is\n  different than the enter key, which is a KeyPress event for a key whose name is actually\n  "return".)\n\no {gExpose}  This event occurs whenever at least some part of your application or widget\n  becomes visible after having been covered up by another window.\n\no {gFocusIn}  A widget got the input &focus. This can happen either in response to a user\n  event (like using the tab key to move focus between widgets) or programmatically (for\n  example, your program calls the {f.focus_set()} on a widget).\n\no {gFocusOut} The input &focus was moved out of a widget. As with FocusIn, the user can\n  cause this event, or your program can cause it.\n\no {gKeyPress}  The user pressed a key on the keyboard.\n\no {gKeyRelease}  The user let up on a key.\n\no {gLeave}  The user moved the mouse pointer out of a widget.\n\no {gMap}  A widget is being mapped, that is, made visible in the application. This will\n  happen, for example, when you call the widget\'s {f.pack()} method.\n\no {gMotion}  The user moved the mouse pointer entirely within a widget.\n\no {gUnmap}  A widget is being unmapped and is no longer visible. This happens, for example,\n  when you use the widget\'s {f.pack_remove()} method.\n\no {gVisibility}  Happens when at least some part of the application window becomes visible\n  on the screen.\n\n$nmt'
p2874
sg8
(lp2875
sg10
(lp2876
S'2005/03/13'
p2877
asg12
I0
sg13
(lp2878
sg15
(lp2879
S'Bind Event Wizard - Basic event types'
p2880
assS'wid.pmw.scrolledtext.opt.scrollmargin'
p2881
(dp2882
g4
(lp2883
S'&default'
p2884
asg6
S'{HScrolledText - scrollmargin}\n\nThe distance between the scrollbars and the text widget. The &default is 2.'
p2885
sg8
(lp2886
sg10
(lp2887
S'2006/03/23'
p2888
asg12
I0
sg13
(lp2889
sg15
(lp2890
ssS'bind.on.parkinglot'
p2891
(dp2892
g4
(lp2893
S'&binding'
p2894
aS'&a widget'
p2895
aS'&event'
p2896
aS'&handler'
p2897
aS'&form'
p2898
aS'&a widget'
p2899
aS'&form'
p2900
aS'&binding'
p2901
aS'&parking lot'
p2902
aS'&form'
p2903
aS'&a widget'
p2904
aS'&parking lot'
p2905
aS'&binding'
p2906
aS'&form'
p2907
aS'&binding'
p2908
aS'&handler'
p2909
asg6
S"{HEvent bindings while on parking lot}\n\nA &binding is a connection between &a widget related &event and an event &handler method of\na &form. You need both &a widget and a &form in order to create or modify a &binding.\n\nThe current widget is presently on the &parking lot and thus is not part of any &form. When\n&a widget is moved to the &parking lot any &bindings it had are retained, in escrow so to\nspeak, and when that widget is moved back onto a &form it will attempt to reconnect it's\n&bindings to event &handlers of the corresponding name. However, you can't alter it's\nbindings as long as the widget is on the parking lot."
p2910
sg8
(lp2911
sg10
(lp2912
S'2005/05/13'
p2913
aS'This one is for when the user attempts to modify bindings of a widreq which'
p2914
aS'is on the parking lot.'
p2915
asg12
I0
sg13
(lp2916
sg15
(lp2917
ssS'wid.tkinter.entry.opt.selectforeground'
p2918
(dp2919
g4
(lp2920
sg6
S'>option.selectforeground.generic "Entry", "selected text"'
p2921
sg8
(lp2922
sg10
(lp2923
sg12
I0
sg13
(lp2924
sg15
(lp2925
ssS'option.pmw.frame.generic'
p2926
(dp2927
g4
(lp2928
sg6
S'{H@0 - frame}\n\nIf the {glabel} component has been created (that is, the {glabelpos} option is not\n{gNone}), the {gframe} component is created to act as the container of the @1\ncreated by the @2. If there is no {glabel} component then no {gframe} component\nis created and the {ghull} component acts as the container.'
p2929
sg8
(lp2930
sg10
(lp2931
S'@0 Type of widget eg ButtonBox'
p2932
aS'@1 Type of widget created inside the frame eg Buttons'
p2933
aS'@2 The methods eg "add() and insert() methods"'
p2934
asg12
I0
sg13
(lp2935
sg15
(lp2936
ssS'wid.pmw.buttonbox.opt.labelpos'
p2937
(dp2938
g4
(lp2939
sg6
S'>option.pmw.labelpos.generic "ButtonBox"'
p2940
sg8
(lp2941
sg10
(lp2942
sg12
I0
sg13
(lp2943
sg15
(lp2944
ssS'wid.tkinter.checkbutton.opt.activeforeground'
p2945
(dp2946
g4
(lp2947
sg6
S'>option.activeforeground.generic "Checkbutton"'
p2948
sg8
(lp2949
sg10
(lp2950
sg12
I0
sg13
(lp2951
sg15
(lp2952
ssS'wid.tkinter.label.opt.takefocus'
p2953
(dp2954
g4
(lp2955
sg6
S'>option.takefocus.generic "Label"'
p2956
sg8
(lp2957
sg10
(lp2958
sg12
I0
sg13
(lp2959
sg15
(lp2960
ssS'option.from_.generic'
p2961
(dp2962
g4
(lp2963
S'=option.to.generic'
p2964
aS'&new mexico tech'
p2965
asg6
S'{H@0 - from_}\n\nA float or integer value that defines one end of the scale\'s range.\n\nFor vertical scales, this is the top end; for horizontal scales, the left\nend.\n\nThe underbar (_) is not a typo: because {gfrom} is a reserved word in\nPython, this option is spelled {Bfrom_}. The default is 0. See the "{Lto\noption=option.to.generic}" for the other end of the range.\n\n$nmt'
p2966
sg8
(lp2967
sg10
(lp2968
S'2005/03/02'
p2969
asg12
I0
sg13
(lp2970
sg15
(lp2971
ssS'code-editor.recolorizing-long'
p2972
(dp2973
g4
(lp2974
sg6
S'{HRecolorizing - the long story}\n\nConsider a 10,000 line file which currently has no triple quotes. You insert\nthis line somewhere near the top:\n\nt {gJ = \'\'\'}\n\nIn theory, the thousands of lines following should now be recolorized as strings\nsince there is an open triple quote and no closing quote. In fact what you are\nprobably doing is keying in a triple quoted string of some modest length and\nReal Soon now you are going to key in the closing triple quote.\n\nn On a theoretical level there is some question as to the usefulness of having\n  the entire rest of the file flash into string colors when in fact you have no\n  intention of making all that stuff into a string.\n\nn There is the practical issue of the time it would take to recolorize the\n  entire file. Colorizing is not fast and roaring ahead chewing up lots of\n  processor cycle to do pointless colorization isn\'t an obvious winner.\n\nSo instead, what the editor does in the face of a new set of triple quotes is to\ncolor the current line, and any subsequent lines you move to, based on the new\nquotes but it doesn\'t start recolorizing the whole file. For most situations\nthis works fine.\n\nThe one time it doesn\'t work fine is if you "comment out" an area of existing\ntext by putting triple quotes at the start and end of the area. If the area is\nof modest size you can recolorize it simply by zipping over it with the cursor\nup or down keys. If the area is large then recolorization is in order. Go to the\ntop of the area and press the {grecolorize} ($tActionRecolorize) key. The reason\nyou move to the top of the area is that the recolorization will start from the\ntop most line visible on the screen and work down. If you start from the bottom\nof the area the colorizer will {ieventually} get it done but it may take some\ntime. Given that you are manually provoking a recolorization you might as well\ndo so from the optimum location.\n\nIf you are inspired to write a Really Fast colorizer, great. It is probably not\npossible to write a Really Fast colorizer in Python. Guido\'s Idle colorizer is\nway faster than ours but:\n\nn He\'s Guido and we\'re not.\n\nn His doesn\'t colorize format phrases and escape characters in strings, and we\n  really like that feature.\n\nn Even his is still too slow to go recolorizing long files in a flash.\n\nOnce you have written your Amazingly Fast and Fully Compatible colorizer, you\ncan get in touch with us at $mailto'
p2975
sg8
(lp2976
sg10
(lp2977
S'2004/04/08'
p2978
asg12
I0
sg13
(lp2979
sg15
(lp2980
S'Recolorizing - the long story'
p2981
assS'wid.tkinter.scrollbar.opt.relief'
p2982
(dp2983
g4
(lp2984
sg6
S'>option.relief.generic "Scrollbar"'
p2985
sg8
(lp2986
sg10
(lp2987
sg12
I0
sg13
(lp2988
sg15
(lp2989
ssS'whatis.config.file'
p2990
(dp2991
g4
(lp2992
sg6
S'{HWhat is: The configuration file}\n\nThe configuration file - $configfile - contains a great pile of setup and configuration information used by $$\nincluding:\n\n o One or more text editor "schemes". Each scheme specifies the colors and bindings used by the code editor.\n\n o A line which say which of the defined schemes to use for the code editors.\n\n o Definitions of all the options of all the widgets.\n\n o A specification that says whether each widget-providing module (eg Tkinter and Pmw) should be imported using\n   "import yada" or "from yada import *".\n\n$$ comes with two already-defined text editor schemes: one based on the {gIdle} colors and bindings, one based on\nthe {gMidnight Commander} (aka CoolEdit) colors and bindings. Unless you change the config file you get the {gIdle}\nscheme. If you want to change the scheme then look in the config file for the line that says\n"DefaultEditorScheme=Idle".\n\nIt\'s not hard to define your own editor scheme. Check the documentation in the config file itself for details.\n\nBy default $$ used "{gfrom Tkinter import *}" for Tkinter (so that all the handy Tkinter constants are available\nwithout having to prefix them with "Tkinter.") and "{gimport Pmw}" for Pmw. If you change one or both of these in\nthe config file then the startup code in the main code area of the main module of any existing projects will need\nupdating to take the change into account. Although this code is created at new-project-creation time it is *not*\nautomatically updated by $$.\n\nThere is a fair bit of documentation in the config file. If you have specific questions take a look in the file\nitself.'
p2993
sg8
(lp2994
S'config file'
p2995
asg10
(lp2996
sg12
I0
sg13
(lp2997
sg15
(lp2998
S'What is: The configuration file'
p2999
assS'frame-properties-dialog'
p3000
(dp3001
g4
(lp3002
S'=layout-frame-select'
p3003
aS'=form-properties-dialog-noname'
p3004
asg6
S"{HFrame properties dialog}\n\nInterior frames in a form are instances of either:\n\n o {gTkinter.Frame}\n t or\n o {gPmw.ScrolledFrame}\n\nNewly created frames are always instances of {gTkinter.Frame}. Use this dialog if you want\nthem to be an instance of {gPmw.ScrolledFrame}.\n\nTo call up the frame properties dialog, {Lselect=layout-frame-select} the frame, right-click\nand from the popup-menu choose {gProperties}.\n\nThe outermost frame of a form represents the form itself and of necessity it's properties\nare different from those of interior frames; {Lclick here=form-properties-dialog-noname} for\ndetails."
p3005
sg8
(lp3006
sg10
(lp3007
S'2006/03/12'
p3008
asg12
I0
sg13
(lp3009
sg15
(lp3010
S'The frame properties dialog'
p3011
assS'wid.pmw.combobox.opt.hull'
p3012
(dp3013
g4
(lp3014
sg6
S">option.pmw.hull.generic 'ComboBox'"
p3015
sg8
(lp3016
sg10
(lp3017
sg12
I0
sg13
(lp3018
sg15
(lp3019
ssS'wid.pmw.group.opt.tag'
p3020
(dp3021
g4
(lp3022
sg6
S'{HGroup - tag}\n\nThe identifying tag displayed over the top edge of the enclosing ring. If the\npyclass for this component is None, ({fie: tag_pyclass = None}), then no tag\ncomponent is created.'
p3023
sg8
(lp3024
sg10
(lp3025
S'2006/03/19'
p3026
asg12
I0
sg13
(lp3027
sg15
(lp3028
ssS'wid.tkinter.toplevel.opt.name'
p3029
(dp3030
g4
(lp3031
sg6
S'>option.name.generic "Toplevel"'
p3032
sg8
(lp3033
sg10
(lp3034
sg12
I0
sg13
(lp3035
sg15
(lp3036
ssS'wid.tkinter.scale.opt.state'
p3037
(dp3038
g4
(lp3039
sg6
S'>option.state.generic "Scale"'
p3040
sg8
(lp3041
sg10
(lp3042
sg12
I0
sg13
(lp3043
sg15
(lp3044
ssS'wid.pmw.scrolledlistbox.opt.selectioncommand'
p3045
(dp3046
g4
(lp3047
sg6
S">option.pmw.selectioncommand.generic 'ScrolledListBox'"
p3048
sg8
(lp3049
sg10
(lp3050
sg12
I0
sg13
(lp3051
sg15
(lp3052
ssS'option.underline.generic'
p3053
(dp3054
g4
(lp3055
S'&new mexico tech'
p3056
asg6
S"{H@0 - underline}\n\nDefault is {g-1}, meaning that no character of the @0's text will be\nunderlined. If non-negative, the corresponding text character will be\nunderlined. For example, underline {g1} would underline the second character\nof the @0's text.\n\n$nmt"
p3057
sg8
(lp3058
sg10
(lp3059
S'2005/04/05'
p3060
asg12
I0
sg13
(lp3061
sg15
(lp3062
ssS'wid.tkinter.menubutton.opt.height'
p3063
(dp3064
g4
(lp3065
sg6
S'>option.height.generic "Menubutton"'
p3066
sg8
(lp3067
sg10
(lp3068
sg12
I0
sg13
(lp3069
sg15
(lp3070
ssS'option.justify.generic'
p3071
(dp3072
g4
(lp3073
sg6
S'{H@0 - justify}\n\nHow to show multiple text lines on this @0:\n\nt {gcenter} to center each line.\nt {gleft  } to left-justify each line.\nt {gright } to right-justify each line.'
p3074
sg8
(lp3075
sg10
(lp3076
S'2005/03/04'
p3077
asg12
I0
sg13
(lp3078
sg15
(lp3079
ssS'wid.tkinter.canvas.opt.insertofftime'
p3080
(dp3081
g4
(lp3082
sg6
S'>option.insertofftime.generic "Canvas"'
p3083
sg8
(lp3084
sg10
(lp3085
sg12
I0
sg13
(lp3086
sg15
(lp3087
ssS'wid.tkinter.menubutton.opt.activebackground'
p3088
(dp3089
g4
(lp3090
sg6
S'>option.activebackground.generic "Menubutton"'
p3091
sg8
(lp3092
sg10
(lp3093
sg12
I0
sg13
(lp3094
sg15
(lp3095
ssS'wid.pmw.panedwidget.opt.pyclass'
p3096
(dp3097
g4
(lp3098
sg6
S'>option.pyclass.generic "Panedwidget"'
p3099
sg8
(lp3100
sg10
(lp3101
sg12
I0
sg13
(lp3102
sg15
(lp3103
ssS'wid.tkinter.label.opt.pyclass'
p3104
(dp3105
g4
(lp3106
sg6
S'>option.pyclass.generic "Label"'
p3107
sg8
(lp3108
sg10
(lp3109
sg12
I0
sg13
(lp3110
sg15
(lp3111
ssS'wid.tkinter.checkbutton.opt.disabledforeground'
p3112
(dp3113
g4
(lp3114
sg6
S'>option.disabledforeground.generic "Checkbutton"'
p3115
sg8
(lp3116
sg10
(lp3117
sg12
I0
sg13
(lp3118
sg15
(lp3119
ssS'run-error-dialog'
p3120
(dp3121
g4
(lp3122
S'&project'
p3123
aS'&module'
p3124
aS'&form'
p3125
aS'&module'
p3126
aS'&form'
p3127
aS'&form'
p3128
aS'&project'
p3129
aS'&module'
p3130
aS'&form'
p3131
asg6
S'{HError in run project}\n\nYou just ran your &project and it encountered an error. The traceback shows the\nerror history. The traceback lines are generally like this:\n\nt Module {gMM}, form {gFF}, line {gLL} in {gRR}  (File {gPP}, line {gNN})\n\n o {gMM} is the name of a &module.\n o {gFF} is the name of the $$ &form (or "{f-Main-}" if within the main code area\n   of a &module).\n o {gLL} is the line number within the &form.\n o {gRR} is the name of the routine or function within the &form.\n o {gPP} is the name of the generated file that was actually running.\n o {gNN} is the line number within the generated file. Since the generated file\n   contains all the code from the main code area and all the forms, this number is\n   different from the number of the line number within the form.\n\nFollowing each traceback line is the line of text in question. These are green to\nindicate that they are links. Click on one of the green lines to be taken to that\nline in the appropriate code editor.\n\nClick on the {bDismiss} button to close the error dialog.\n\nSome of the traceback lines may refer to code which is not part of the current\n&project (for example if your project does an {ginclude} of a non-project module).\nIn this case the traceback line shows {g<None>} for &module, &form and line number\nwithin form, and the text line does not show up in green. To look at such lines\ninvoke your favorite text editor.'
p3132
sg8
(lp3133
sg10
(lp3134
S'2006/01/29'
p3135
asg12
I0
sg13
(lp3136
sg15
(lp3137
S'The traceback when a run project hits an error'
p3138
assS'wid.tkinter.scale.opt.resolution'
p3139
(dp3140
g4
(lp3141
sg6
S'>option.resolution.generic "Scale"'
p3142
sg8
(lp3143
sg10
(lp3144
sg12
I0
sg13
(lp3145
sg15
(lp3146
ssS'wid.tkinter.label.opt.foreground'
p3147
(dp3148
g4
(lp3149
sg6
S'>option.foreground.generic "Label"'
p3150
sg8
(lp3151
sg10
(lp3152
sg12
I0
sg13
(lp3153
sg15
(lp3154
ssS'option.selectmode.generic'
p3155
(dp3156
g4
(lp3157
S'&new mexico tech'
p3158
asg6
S"{H@0 - selectmode}\n\nDetermines how many items can be selected, and how mouse drags affect the\nselection:\n\no {GBROWSE} Normally, you can only select one line out of a listbox. If you\n  click on an item and then drag to a different line, the selection will\n  follow the mouse. This is the default.\n\no {GSINGLE} You can only select one line, and you can't drag the\n  mouse--wherever you click button 1, that line is selected.\n\no {GMULTIPLE} You can select any number of lines at once. Clicking on any\n  line toggles whether or not it is selected.\n\no {GEXTENDED} You can select any adjacent group of lines at once by clicking\n  on the first line and dragging to the last line.\n\n$nmt"
p3159
sg8
(lp3160
sg10
(lp3161
S'2005/04/03'
p3162
asg12
I0
sg13
(lp3163
sg15
(lp3164
ssS'parking-lot.main'
p3165
(dp3166
g4
(lp3167
S'&layout editor'
p3168
aS'&form'
p3169
aS'&module'
p3170
aS'&form'
p3171
aS'&form'
p3172
aS'&project'
p3173
asg6
S"\n{P$imgpr-parking.ppm}  {HThe Parking Lot}\n\nHi!\n\nI'm the parking lot, down near the bottom of the &layout editor. If you want\nto move a widget from one &form to another, from one &module to another, or\nif you want to temporarily move a widget off a &form (but you don't want to\nlose the widget) then I'm for you. Just drag your widget and drop it on me.\nTo put the widget back on a &form, just drag it back again. What could be\nsimpler.\n\nWidgets which are on the parking lot are saved when you save your &project\nand will reappear on the parking lot when you reload your project."
p3174
sg8
(lp3175
S'parking lot'
p3176
asg10
(lp3177
sg12
I0
sg13
(lp3178
sg15
(lp3179
S'The Parking Lot'
p3180
assS'wid.tkinter.checkbutton.opt.variable'
p3181
(dp3182
g4
(lp3183
sg6
S'>option.variable.generic "Checkbutton"'
p3184
sg8
(lp3185
sg10
(lp3186
sg12
I0
sg13
(lp3187
sg15
(lp3188
ssS'wid.pmw.combobox.opt.arrowbutton'
p3189
(dp3190
g4
(lp3191
sg6
S'{HComboBox - arrowbutton}\n\nIn a dropdown ComboBox, the button to popup the listbox.'
p3192
sg8
(lp3193
sg10
(lp3194
S'2006/03/18'
p3195
asg12
I0
sg13
(lp3196
sg15
(lp3197
ssS'wid.tkinter.listbox.opt.font'
p3198
(dp3199
g4
(lp3200
sg6
S'>option.font.generic "Listbox"'
p3201
sg8
(lp3202
sg10
(lp3203
sg12
I0
sg13
(lp3204
sg15
(lp3205
ssS'option.resolution.generic'
p3206
(dp3207
g4
(lp3208
S'&new mexico tech'
p3209
asg6
S"{H@0 - resolution}\n\nNormally, the user is only able to change the scale in whole units.\n\nSet this option to some other value to set the smallest increment of the\nscale's value.\n\nFor example, if {Gfrom_} is -1.0 and {gto} is 1.0, and you set {gresolution}\nto 0.5, the @0 will have 5 possible values:\n\nt {f-1.0\nt -0.5\nt  0.0\nt +0.5\nt +1.0}\n\nAll smaller movements will be ignored.\n\n$nmt"
p3210
sg8
(lp3211
sg10
(lp3212
S'2005/03/06'
p3213
asg12
I0
sg13
(lp3214
sg15
(lp3215
ssS'wid.tkinter.toplevel.opt.highlightbackground'
p3216
(dp3217
g4
(lp3218
sg6
S'>option.highlightbackground.generic "Toplevel"'
p3219
sg8
(lp3220
sg10
(lp3221
sg12
I0
sg13
(lp3222
sg15
(lp3223
ssS'wid.tkinter.button.opt.height'
p3224
(dp3225
g4
(lp3226
sg6
S'{HButton - Height}\n\nThe height of the button in pixels (for images or bitmaps), or in lines (for text Buttons).'
p3227
sg8
(lp3228
sg10
(lp3229
S'2005/04/08'
p3230
asg12
I0
sg13
(lp3231
sg15
(lp3232
ssS'project.new.dialog.badname'
p3233
(dp3234
S'Links'
p3235
(lp3236
sS'Text'
p3237
S'{HInvalid name at new-project time}\n\nProject names need to be valid Python names, thus they:\n\no Must start with a letteor or underscore, and\no Can then consist of letters, numbers or underscores\n\nThe name you just entered for the new project doesn\'t follow the above rules and thus is not acceptable.\n\nThe name of a project has to be Python-legal because both the main module and the main form of the main module share\nthe same name and they are both Python objects.\n\nIf, for some reason, you absolutely must end up with a {g.py} file named, for example, "{gmy-project.py"} (note the\nminus-sign which makes it an invalid name) then the best approach is to give the project a legal name, for example\n"my_project", and then rename the {gmy_project.py} file once the project has been debugged and is working.'
p3238
sS'Hotlinks'
p3239
(lp3240
sS'Comments'
p3241
(lp3242
S'2014-03-24'
p3243
asS'Wip'
p3244
I0
sS'Plurals'
p3245
(lp3246
sS'Abstracts'
p3247
(lp3248
ssS'wid.pmw.notebook.opt.pagemargin'
p3249
(dp3250
g4
(lp3251
S'&dimension'
p3252
aS'&default'
p3253
asg6
S"{HNoteBook - pagemargin}\n\nA &dimensioned number giving the margin around the selected page inside the notebook's page border. The &default is\n4 pixels."
p3254
sg8
(lp3255
sg10
(lp3256
S'2006/03/21'
p3257
asg12
I0
sg13
(lp3258
sg15
(lp3259
ssS'code-edit.action.undo'
p3260
(dp3261
S'Links'
p3262
(lp3263
sS'Text'
p3264
S'{HCode editor - Undo}\n\n Key:   $tActionUndo\n Menu: {fEdit/Undo}\n\nThis undoes a recent edit action. There is only so much room in the undo-buffer so you may not be able to undo every\naction back to square-one. Mostly this is useful for correcting "oops - I didn\'t really mean that" sort of mistakes.\n\nThat said there is room in the undo buffer for 1000 actions which give you pretty reasonable scope for undoing\nthings.'
p3265
sS'Hotlinks'
p3266
(lp3267
sS'Comments'
p3268
(lp3269
S'2014-04-06'
p3270
asS'Wip'
p3271
I0
sS'Plurals'
p3272
(lp3273
sS'Abstracts'
p3274
(lp3275
S'Code editor - Undo'
p3276
assS'wid.tkinter.frame.opt.name'
p3277
(dp3278
g4
(lp3279
sg6
S'>option.name.generic "Frame"'
p3280
sg8
(lp3281
sg10
(lp3282
sg12
I0
sg13
(lp3283
sg15
(lp3284
ssS'assist.image'
p3285
(dp3286
g4
(lp3287
sg6
S'{HAssist - image}\n\nSince this is a placeholder assist dialog all you can do is enter the name of the image to be used with this widget.'
p3288
sg8
(lp3289
sg10
(lp3290
sg12
I0
sg13
(lp3291
sg15
(lp3292
S'The option editor image assist dialog'
p3293
assS'commandassist.handlerinvalidname'
p3294
(dp3295
g4
(lp3296
S'&event'
p3297
aS'&handler'
p3298
aS'&command option'
p3299
asg6
S'{HInvalid name of command-option handler}\n\n\nThe name of the &event &handler for a &command option must conform to the usual\nPython rules for names but the name you supplied violates those rules. Either\ncorrect the name or click {gCancel}.'
p3300
sg8
(lp3301
sg10
(lp3302
S'2006/04/13'
p3303
asg12
I0
sg13
(lp3304
sg15
(lp3305
ssS'wid.tkinter.radiobutton.opt.highlightbackground'
p3306
(dp3307
g4
(lp3308
sg6
S'>option.highlightbackground.generic "Radiobutton"'
p3309
sg8
(lp3310
sg10
(lp3311
sg12
I0
sg13
(lp3312
sg15
(lp3313
ssS'wid.pmw.notebook.overview'
p3314
(dp3315
g4
(lp3316
sg6
S'{HWhat is: A NoteBook widget}\n\nA notebook contains a set of tabbed pages. At any one time only one of these\npages (the selected page) is visible, with the other pages being hidden\n"beneath" it. Another page in the notebook may be displayed by clicking on\nthe tab attached to the page. The tabs are displayed along the top edge.\n\nOptionally, the notebook may be displayed without tabs. In this case, another\nselection widget, such as Pmw.OptionMenu, may be used to select the pages.\n\nThis megawidget is derived from Pmw.MegaArchetype (not Pmw.MegaWidget like\nmost other megawidgets), with the hull class being Tkinter.Canvas.'
p3317
sg8
(lp3318
sg10
(lp3319
S'2006/03/21'
p3320
asg12
I0
sg13
(lp3321
sg15
(lp3322
S'What is: A NoteBook widget'
p3323
assS'wid.pmw.entryfield.opt.labelpos'
p3324
(dp3325
g4
(lp3326
sg6
S">option.pmw.labelpos.generic 'EntryField'"
p3327
sg8
(lp3328
sg10
(lp3329
sg12
I0
sg13
(lp3330
sg15
(lp3331
ssS'wid.pmw.mainmenubar.opt.hotkeys'
p3332
(dp3333
g4
(lp3334
sg6
S">option.pmw.hotkeys.generic 'MainMenuBar'"
p3335
sg8
(lp3336
sg10
(lp3337
sg12
I0
sg13
(lp3338
sg15
(lp3339
ssS'color.magenta'
p3340
(dp3341
g51
(lp3342
sg53
S'{hMagenta}\n\n {f#8B008B}  dark magenta\n {f#8B008B}  DarkMagenta\n {f#FF00FF}  magenta\n {f#FF00FF}  magenta1\n {f#EE00EE}  magenta2\n {f#CD00CD}  magenta3\n {f#8B008B}  magenta4\n {f#9370DB}  medium purple\n {f#9370DB}  MediumPurple\n {f#AB82FF}  MediumPurple1\n {f#9F79EE}  MediumPurple2\n {f#8968CD}  MediumPurple3\n {f#5D478B}  MediumPurple4\n {f#A020F0}  purple\n {f#9B30FF}  purple1\n {f#912CEE}  purple2\n {f#7D26CD}  purple3\n {f#551A8B}  purple4'
p3343
sg55
(lp3344
sg57
(lp3345
sg59
I0
sg60
(lp3346
sg62
(lp3347
ssS'wid.pmw.entryfield.opt.command'
p3348
(dp3349
g4
(lp3350
S'&command option'
p3351
aS'&event'
p3352
aS'&handler'
p3353
asg6
S'{HEntryField - command}\n\nThis &command option specifies the name of the &event &handler to be called\nwhenever the {gReturn} key is pressed or {ginvoke()} is called.'
p3354
sg8
(lp3355
sg10
(lp3356
S'2006/03/19'
p3357
asg12
I0
sg13
(lp3358
sg15
(lp3359
ssS'option.command.generic'
p3360
(dp3361
g4
(lp3362
S'=command-option.whatis'
p3363
asg6
S'{H@0 - command}\n\nA {Lcommand=command-option.whatis} to be called whenever @1'
p3364
sg8
(lp3365
sg10
(lp3366
S'2005/02/28'
p3367
asg12
I0
sg13
(lp3368
sg15
(lp3369
ssS'wid.pmw.scrolledframe.opt.labelmargin'
p3370
(dp3371
g4
(lp3372
sg6
S">option.pmw.labelmargin.generic 'ScrolledFrame'"
p3373
sg8
(lp3374
sg10
(lp3375
sg12
I0
sg13
(lp3376
sg15
(lp3377
ssS'bindassist.name-suggestion'
p3378
(dp3379
g4
(lp3380
S'&event'
p3381
aS'&handler'
p3382
aS'&event'
p3383
aS'&handler'
p3384
aS'&event'
p3385
aS'&handler'
p3386
aS'&event'
p3387
aS'&handler'
p3388
aS'&handler'
p3389
aS'&handler'
p3390
aS'&handler'
p3391
aS'&handler'
p3392
aS'&handler'
p3393
aS'&handler'
p3394
aS'&handler'
p3395
aS'&handler'
p3396
aS'&handler'
p3397
asg6
S"{hWhy we recommend handler names of the form on_widgetname_whatever}\n\nActually we recommend &event &handler names of the format {gon_widgetname_whatever} only if the &event &handler is\nsolely for use by a single widget. This is generally the case, but if you plan to use one &event &handler for many\nwidgets then by all means name it anything you want.\n\nAssuming the &event &handler is for use only by a single widget then the advantages of the suggested format are:\n\n o Since the name of the widget is part of the &handler name and since $$ keeps &handlers in alphabetical order by\n   &handler name, then all the &handlers for a given widget will stay together.\n\n o Having the widget name as part of the &handler name makes it easy to know, as you review the code, which\n   &handlers belong to which widgets. If a widget named {GFox} has a &handler named {GBanana} then the connection is\n   somewhat less than obvious.\n\n o If you rename a widget, and the widget's &handlers are of the recommended form, then $$ will notice this and give you the\n   option to automatically rename all the &handlers at the same time. This can be very convenient."
p3398
sg8
(lp3399
S'recommend'
p3400
asg10
(lp3401
S'2005/03/15'
p3402
asg12
I0
sg13
(lp3403
sg15
(lp3404
S'Why we recommend handler names of the form on_widgetname_whatever'
p3405
assS'pack.option.ipady'
p3406
(dp3407
g4
(lp3408
S'&dimension'
p3409
asg6
S'{HPack Option - ipady}\n\nA &dimensioned number specifying the amount of padding to add inside the\nwidget on the top and bottom.'
p3410
sg8
(lp3411
sg10
(lp3412
S'2005/05/19'
p3413
asg12
I0
sg13
(lp3414
sg15
(lp3415
ssS'pack.option.ipadx'
p3416
(dp3417
g4
(lp3418
S'&dimension'
p3419
asg6
S'{HPack Option - ipadx}\n\nA &dimensioned number specifying the amount of padding to add inside the\nwidget on the left and right.'
p3420
sg8
(lp3421
sg10
(lp3422
S'2005/05/19'
p3423
asg12
I0
sg13
(lp3424
sg15
(lp3425
ssS'wid.tkinter.entry.opt.exportselection'
p3426
(dp3427
g4
(lp3428
sg6
S'>option.exportselection.generic "Entry"'
p3429
sg8
(lp3430
sg10
(lp3431
sg12
I0
sg13
(lp3432
sg15
(lp3433
ssS'option.wraplength.generic'
p3434
(dp3435
g4
(lp3436
S'&dimension'
p3437
aS'&image'
p3438
aS'&bitmap'
p3439
asg6
S'{H@0 - wraplength}\n\nNormally, lines are not wrapped. If this option is set to a &dimension\ngreater than zero, the text of the @0 will be wrapped to fit within the\nspecified size.\n\nIf an &image or &bitmap is specified for this @0, no text is displayed and\nthis option has no effect.'
p3440
sg8
(lp3441
sg10
(lp3442
S'2005/03/07'
p3443
asg12
I0
sg13
(lp3444
sg15
(lp3445
ssS'buffet.widget.radioselect'
p3446
(dp3447
g4
(lp3448
sg6
S'>buffet.widget.generic2 "Pmw.RadioSelect", \'\', \'wid.pmw.radioselect.overview\''
p3449
sg8
(lp3450
sg10
(lp3451
sg12
I0
sg13
(lp3452
sg15
(lp3453
ssS'wid.tkinter.scale.opt.orient'
p3454
(dp3455
g4
(lp3456
sg6
S'>option.orient.generic "Scale"'
p3457
sg8
(lp3458
sg10
(lp3459
sg12
I0
sg13
(lp3460
sg15
(lp3461
ssS'wid.tkinter.label.opt.height'
p3462
(dp3463
g4
(lp3464
S'&default'
p3465
aS'&image'
p3466
aS'&bitmap'
p3467
aS'&dimension'
p3468
asg6
S'{HLabel - height}\n\nIf {gheight} remains at the &default value of {g0} then the Label will\nautomatically be sized to fit its content.\n\no If an &image or &bitmap is supplied for this Label, then {gheight} is a\n  &dimensioned number indicating the height of the Label. If you enter just\n  an integer, it is taken to be in pixels.\n\no If text (no image, no bitmap) is supplied for this Label, then {gheight} is\n  an integer indicating the height of the Label in lines.'
p3469
sg8
(lp3470
sg10
(lp3471
S'2005/04/16'
p3472
asg12
I0
sg13
(lp3473
sg15
(lp3474
ssS'wid.tkinter.checkbutton.opt.font'
p3475
(dp3476
g4
(lp3477
sg6
S'>option.font.generic "Checkbutton"'
p3478
sg8
(lp3479
sg10
(lp3480
sg12
I0
sg13
(lp3481
sg15
(lp3482
ssS'wid.tkinter.button.opt.activeforeground'
p3483
(dp3484
g4
(lp3485
sg6
S'>option.activeforeground.generic "Button"'
p3486
sg8
(lp3487
sg10
(lp3488
sg12
I0
sg13
(lp3489
sg15
(lp3490
ssS'layout-widget-move'
p3491
(dp3492
g4
(lp3493
S'&layout area'
p3494
aS'&parking lot'
p3495
asg6
S"{HMoving Widgets around}\n\nTo move a widget around within the &layout area, simply click anwhere within\nthe widget and drag it to it's new location.\n\nIf you don't want the widget on the form right now, but you don't want to\nlose this particular widget either (perhaps you have set it's options in a\nparticular way) then drag it to the &parking lot just below the layout area."
p3496
sg8
(lp3497
sg10
(lp3498
S'2005/03/05'
p3499
asg12
I0
sg13
(lp3500
sg15
(lp3501
S'How to: Move widgets in your form'
p3502
assS'wid.tkinter.toplevel.opt.height'
p3503
(dp3504
g4
(lp3505
sg6
S'{HToplevel - height}\n\nThe height of the Toplevel window in pixels.'
p3506
sg8
(lp3507
sg10
(lp3508
S'2005/04/28'
p3509
asg12
I0
sg13
(lp3510
sg15
(lp3511
ssS'wid.tkinter.menubutton.opt.highlightbackground'
p3512
(dp3513
g4
(lp3514
sg6
S'>option.highlightbackground.generic "Menubutton"'
p3515
sg8
(lp3516
sg10
(lp3517
sg12
I0
sg13
(lp3518
sg15
(lp3519
ssS'wid.tkinter.text.opt.highlightbackground'
p3520
(dp3521
g4
(lp3522
sg6
S'>option.highlightbackground.generic "Text"'
p3523
sg8
(lp3524
sg10
(lp3525
sg12
I0
sg13
(lp3526
sg15
(lp3527
ssS'wid.tkinter.label.opt.pady'
p3528
(dp3529
g4
(lp3530
sg6
S'>option.pady.generic "Label", "text"'
p3531
sg8
(lp3532
sg10
(lp3533
sg12
I0
sg13
(lp3534
sg15
(lp3535
ssS'wid.tkinter.label.opt.padx'
p3536
(dp3537
g4
(lp3538
sg6
S'>option.padx.generic "Label", "text"'
p3539
sg8
(lp3540
sg10
(lp3541
sg12
I0
sg13
(lp3542
sg15
(lp3543
ssS'wid.pmw.messagebar.opt.name'
p3544
(dp3545
g4
(lp3546
sg6
S">option.name.generic 'MessageBar'"
p3547
sg8
(lp3548
sg10
(lp3549
sg12
I0
sg13
(lp3550
sg15
(lp3551
ssS'wid.pmw.entryfield.opt.value'
p3552
(dp3553
g4
(lp3554
S'&default'
p3555
asg6
S"{HEntryField - value}\n\nSpecifies the initial contents of the entry. If this\ntext is invalid, it will be displayed with the errorbackground color and the\ninvalidcommand function will be called. If both value and entry_textvariable\noptions are specified in the constructor, value will take precedence. The\n&default is ''."
p3556
sg8
(lp3557
sg10
(lp3558
S'2006/03/19'
p3559
asg12
I0
sg13
(lp3560
sg15
(lp3561
ssS'wid.tkinter.canvas.opt.insertontime'
p3562
(dp3563
g4
(lp3564
sg6
S'>option.insertontime.generic "Canvas"'
p3565
sg8
(lp3566
sg10
(lp3567
sg12
I0
sg13
(lp3568
sg15
(lp3569
ssS'wid.tkinter.checkbutton.opt.selectimage'
p3570
(dp3571
g4
(lp3572
sg6
S'>option.selectimage.generic "Checkbutton"'
p3573
sg8
(lp3574
sg10
(lp3575
sg12
I0
sg13
(lp3576
sg15
(lp3577
ssS'wid.tkinter.menubutton.opt.bitmap'
p3578
(dp3579
g4
(lp3580
sg6
S'>option.bitmap.generic "Menubutton"'
p3581
sg8
(lp3582
sg10
(lp3583
sg12
I0
sg13
(lp3584
sg15
(lp3585
ssS'wid.tkinter.button.opt.pyclass'
p3586
(dp3587
g4
(lp3588
sg6
S'>option.pyclass.generic "Button"'
p3589
sg8
(lp3590
sg10
(lp3591
sg12
I0
sg13
(lp3592
sg15
(lp3593
ssS'wid.tkinter.text.opt.insertborderwidth'
p3594
(dp3595
g4
(lp3596
sg6
S'>option.insertborderwidth.generic "Text"'
p3597
sg8
(lp3598
sg10
(lp3599
sg12
I0
sg13
(lp3600
sg15
(lp3601
ssS'wid.tkinter.canvas.opt.highlightcolor'
p3602
(dp3603
g4
(lp3604
sg6
S'>option.highlightcolor.generic "Canvas"'
p3605
sg8
(lp3606
sg10
(lp3607
sg12
I0
sg13
(lp3608
sg15
(lp3609
ssS'wid.tkinter.button.opt.background'
p3610
(dp3611
g4
(lp3612
sg6
S'>option.background.generic "Button"'
p3613
sg8
(lp3614
sg10
(lp3615
sg12
I0
sg13
(lp3616
sg15
(lp3617
ssS'wid.tkinter.scrollbar.opt.command'
p3618
(dp3619
g4
(lp3620
sg6
S'>option.command.generic "Scrollbar","the scrollbar is moved."'
p3621
sg8
(lp3622
sg10
(lp3623
sg12
I0
sg13
(lp3624
sg15
(lp3625
ssS'wid.tkinter.radiobutton.opt.command'
p3626
(dp3627
g4
(lp3628
sg6
S'>option.command.generic "Radiobutton","the state of the Radiobutton changes."'
p3629
sg8
(lp3630
sg10
(lp3631
sg12
I0
sg13
(lp3632
sg15
(lp3633
ssS'whatis.frame'
p3634
(dp3635
g4
(lp3636
S'&form'
p3637
aS'&layout editor'
p3638
asg6
S'{HWhat is: A frame}\n\nA frame is a rectangular area with a &form which can contain widgets or sub-frames. Use the &layout editor to\ncreate, maintain and delete frames.'
p3639
sg8
(lp3640
S'frame'
p3641
asg10
(lp3642
S'2003/03/13'
p3643
asg12
I0
sg13
(lp3644
sg15
(lp3645
S'What is: A frame'
p3646
assS'formimportnameselect'
p3647
(dp3648
S'Links'
p3649
(lp3650
sS'Text'
p3651
S'{HSetting the name at form-import time}\n\nYou just asked to import a form. Regardless of what the form was named when it was saved, you can name it whatever\nyou want as long as:\n\n o The name is a valid Python name, and\n o No other form in this module has the same name.\n\nYou are prompted with the name that was in use when the form was saved. If you are happy with that name then go\nahead and click {gOK}. Otherwise, now is you opportunity to revise the name.'
p3652
sS'Hotlinks'
p3653
(lp3654
sS'Comments'
p3655
(lp3656
S'2008-09-24'
p3657
asS'Wip'
p3658
I0
sS'Plurals'
p3659
(lp3660
sS'Abstracts'
p3661
(lp3662
ssS'wid.tkinter.toplevel.opt.relief'
p3663
(dp3664
g4
(lp3665
sg6
S'>option.relief.generic "Toplevel"'
p3666
sg8
(lp3667
sg10
(lp3668
sg12
I0
sg13
(lp3669
sg15
(lp3670
ssS'wid.tkinter.entry.opt.foreground'
p3671
(dp3672
g4
(lp3673
sg6
S'>option.foreground.generic "Entry"'
p3674
sg8
(lp3675
sg10
(lp3676
sg12
I0
sg13
(lp3677
sg15
(lp3678
ssS'wid.tkinter.radiobutton.opt.height'
p3679
(dp3680
g4
(lp3681
sg6
S'>option.height.generic "Radiobutton"'
p3682
sg8
(lp3683
sg10
(lp3684
sg12
I0
sg13
(lp3685
sg15
(lp3686
ssS'option.tickinterval.generic'
p3687
(dp3688
g4
(lp3689
S'&new mexico tech'
p3690
asg6
S'{H@0 - tickinterval}\n\nNormally, no "ticks" are displayed along the @0.\n\nTo display periodic @0 values, set this option to a number, and ticks will be\ndisplayed on multiples of that value. For example, if {gfrom_=0.0, to=1.0},\nand {gtickinterval=0.25}, labels will be displayed along the @0 at values\n0.0, 0.25, 0.50, 0.75, and 1.00.\n\nThese labels appear below the scale if horizontal, to its left if vertical.\n\nDefault is 0, which suppresses display of ticks.\n\n$nmt'
p3691
sg8
(lp3692
sg10
(lp3693
S'2005/04/05'
p3694
asg12
I0
sg13
(lp3695
sg15
(lp3696
ssS'resizevarifyfailed'
p3697
(dp3698
S'Links'
p3699
(lp3700
S'=optioneditor.resizeknobs'
p3701
asS'Text'
p3702
S'{HResize Knob - Invalid Value}\n\nYou just clicked on one of the {Lresize knobs=optioneditor.resizeknobs} but the value of the currently selected option is invalid, as was shown\nin the error dialog.\n\nIt is not possible to use the resize knobs until the incorrect value has been corrected.'
p3703
sS'Hotlinks'
p3704
(lp3705
sS'Comments'
p3706
(lp3707
S'2014-03-30'
p3708
asS'Wip'
p3709
I0
sS'Plurals'
p3710
(lp3711
sS'Abstracts'
p3712
(lp3713
ssS'widget.drop.missing.handlers'
p3714
(dp3715
g4
(lp3716
S'&parking lot'
p3717
aS'&form'
p3718
aS'&event'
p3719
aS'&handler'
p3720
aS'&handler'
p3721
aS'&handler'
p3722
aS'&handler'
p3723
aS'&binding'
p3724
aS'&command option'
p3725
aS'&handler'
p3726
aS'&binding'
p3727
aS'&handler'
p3728
asg6
S"{HDropped widget seeks handlers}\n\nYou just moved widget @4 from the &parking lot to &form @5 and now it's\nlooking for <0an> &event &handler<0/s> to match up with @0which reference\n<0that/those> &handler<0/s>. The &handler<0/s> it's looking for <0is/are>:\n\n@1\n\no If the @0<1is/are> important then choose {gCreate handler<0/s>}. This will\n  create <0an >empty &handler<0/s> in the code which you can then edit to add\n  whatever action is necessary.\n\no If the @0<1is/are> not important then choose {gDelete reference<1/s>} which\n  will delete any &bindings and clear any &command options in widget @4 which\n  refer to <0this/these> &handler<0/s>.\n\nIf you need to do something else to the &binding<1/s> such as linking\n<1it/them> to <1an> existing &handler<1/s> then choose the {gCreate\nhandler<0/s>} choice and then adjust the binding<1/s> as necessary."
p3729
sg8
(lp3730
sg10
(lp3731
S'2006/02/17'
p3732
aS'@0 "X bindings and Y command options "'
p3733
aS'@1 List of missing handlers'
p3734
aS'@2 Number of missing handlers'
p3735
aS'@3 Total of bindings and command options'
p3736
aS'@4 Name of the widget'
p3737
aS'@5 Name of form'
p3738
asg12
I0
sg13
(lp3739
I2
aI3
asg15
(lp3740
ssS'project.new.nodir'
p3741
(dp3742
S'Links'
p3743
(lp3744
sS'Text'
p3745
S'{HCreate directory option at new-project time}\n\nYou just asked me to create project "{g@1}" in directory "{G@0}" but that directory doesn\'t exist.\n\nIf you click on {gCreate directory} I will attempt to create the directory. Otherwise click on {gCancel} to go back\nand revise the name of the requested directory.'
p3746
sS'Hotlinks'
p3747
(lp3748
sS'Comments'
p3749
(lp3750
S'2014-03-24'
p3751
asS'Wip'
p3752
I0
sS'Plurals'
p3753
(lp3754
sS'Abstracts'
p3755
(lp3756
ssS'wid.tkinter.menu.opt.title'
p3757
(dp3758
g4
(lp3759
sg6
S'>option.title.generic "Menu"'
p3760
sg8
(lp3761
sg10
(lp3762
sg12
I0
sg13
(lp3763
sg15
(lp3764
ssS'bind.eventwizard.overview'
p3765
(dp3766
g4
(lp3767
S'&event'
p3768
aS'&binding'
p3769
aS'&event'
p3770
aS'&event'
p3771
asg6
S'{HThe bind Event Wizard}\n\nThe &Event Wizard walks you through the process of creating a valid &event string\nfor use as part of a &binding.\n\nWhile you can key in an &event string manually, using the Wizard is faster, less\nerror prone and guarantees that you will end up with a valid &event string. No\nmore missing angle brackets or mis-spelled modifiers.'
p3772
sg8
(lp3773
S'bind wizard'
p3774
asg10
(lp3775
S'2005/03/13'
p3776
asg12
I0
sg13
(lp3777
sg15
(lp3778
S'The bind event wizard'
p3779
assS'wid.pmw.scrolledlistbox.opt.name'
p3780
(dp3781
g4
(lp3782
sg6
S">option.name.generic 'ScrolledListBox'"
p3783
sg8
(lp3784
sg10
(lp3785
sg12
I0
sg13
(lp3786
sg15
(lp3787
ssS'wid.pmw.timecounter.opt.downminutearrow'
p3788
(dp3789
g4
(lp3790
sg6
S">wid.pmw.timecounter.arrow 'down','dec','minute'"
p3791
sg8
(lp3792
sg10
(lp3793
sg12
I0
sg13
(lp3794
sg15
(lp3795
ssS'wid.tkinter.scale.opt.variable'
p3796
(dp3797
g4
(lp3798
S'&control variable'
p3799
aS'=wid.tkinter.scale.opt.digits'
p3800
aS'&new mexico tech'
p3801
asg6
S'{HScale - variable}\n\nThe &control variable for this scale.\n\nCan be\n o {gIntVar}\n o {GDoubleVar} (float)\n o {gStringVar}\n\nIn the latter case, the numerical value will be converted to a string. See the the\n{ldigits=wid.tkinter.scale.opt.digits} option for more information on this\nconversion.\n\n$nmt'
p3802
sg8
(lp3803
sg10
(lp3804
S'2005/04/27'
p3805
asg12
I0
sg13
(lp3806
sg15
(lp3807
ssS'wid.pmw.scrolledframe.opt.usehullsize'
p3808
(dp3809
g4
(lp3810
sg6
S">option.pmw.usehullsize.generic 'ScrolledFrame'"
p3811
sg8
(lp3812
sg10
(lp3813
sg12
I0
sg13
(lp3814
sg15
(lp3815
ssS'wid.pmw.optionmenu.opt.hull'
p3816
(dp3817
g4
(lp3818
sg6
S">option.pmw.hull.generic 'OptionMenu'"
p3819
sg8
(lp3820
sg10
(lp3821
sg12
I0
sg13
(lp3822
sg15
(lp3823
ssS'command.option.on.parkinglot'
p3824
(dp3825
g4
(lp3826
S'&command option'
p3827
aS'&a widget'
p3828
aS'&event'
p3829
aS'&handler'
p3830
aS'&form'
p3831
aS'&a widget'
p3832
aS'&form'
p3833
aS'&command option'
p3834
aS'&parking lot'
p3835
aS'&form'
p3836
aS'&a widget'
p3837
aS'&parking lot'
p3838
aS'&command option'
p3839
aS'&form'
p3840
aS'&command option'
p3841
aS'&handler'
p3842
aS'&command option'
p3843
asg6
S"{HCommand options while on parking lot}\n\nA &command option is a connection between &a widget related &event and an\nevent &handler method of a &form. You need both &a widget and a &form in\norder to create or modify a &command option.\n\nThe current widget is presently on the &parking lot and thus is not part of\nany &form. When &a widget is moved to the &parking lot any &command options\nit had are retained, in escrow so to speak, and when that widget is moved\nback onto a &form it will attempt to reconnect it's &command options to event\n&handlers of the corresponding name. However, you can't alter &command\noptions as long as the widget is on the parking lot."
p3844
sg8
(lp3845
sg10
(lp3846
S'2005/05/13'
p3847
asg12
I0
sg13
(lp3848
sg15
(lp3849
S"You can't change command options for a widget which is on the parking lot"
p3850
assS'frame.popup'
p3851
(dp3852
g4
(lp3853
S'=howto.tidy.widgets'
p3854
aS'=frame.delete'
p3855
aS'=frame-properties-dialog'
p3856
aS'=layout-frame-insert'
p3857
aS'&form'
p3858
aS'&parking lot'
p3859
aS'&option editor'
p3860
asg6
S'{HLayout-area right-click popup menu}\n\nTo activate this menu move the cursor to be within the desired frame then click the right\nmouse button. This menu allows you to:\n\n o {LTidy=howto.tidy.widgets} the widgets within the frame\n o {LDelete=frame.delete} the frame and the widgets it contains\n o Set the {Lproperties=frame-properties-dialog} of the frame\n o {LInsert=Layout-Frame-Insert} a new frame along the side of an existing frame.\n\nNotes:\n\no If there are fewer than two widgets in the frame then by definition the widgets are already\n  tidy and in that case the "Tidy widgets" choice will be grayed out.\n\no The outermost frame is the form itself and you can\'t delete it (other than deleting the\n  entire &form). Thus if the current frame is the outermost frame then the "Delete frame"\n  choice is grayed out.\n\no In the case of nested frames, this menu works on the most deeply nested frame around the\n  cursor location. In order to delete a frame which has sub-frames you must first delete the\n  subframes. To delete a frame without losing it\'s widgets, temporarily move them onto the\n  &parking lot then delete the subframe.\n\no Frames are instances of widgets, and the option of all widget, including frame widgets, are\n  set using the &option editor, not via the right-click popup menu.'
p3861
sg8
(lp3862
sg10
(lp3863
S'2006/02/09'
p3864
asg12
I0
sg13
(lp3865
sg15
(lp3866
S'Layout-area right-click popup menu'
p3867
assS'bindassist.compound'
p3868
(dp3869
g4
(lp3870
S'&bind editor'
p3871
aS'&bind editor'
p3872
asg6
S'{HBind editor - creating bindings to compound (eg Pmw) widgets.}\n\nWith regular old Tkinter widgets you bind to the widget and that\'s the end of the story. With compound widgets, such\nas the Pmw widgets, each widget has several component widgets and those component widgets can in turn contain\nadditional widgets. The &bind editor can create bindings to the main widget or to any of the components.\n\nWhen you call up the bind assist on a compound widget there is an extra item at the top of the assist dialog, like\nthis:\n\n{P$imgpr-help-BindAssistCompound.ppm}\n\nThe dropdown box shows the widget itself (in the case of this example, a Pmw Counter) and all the components that\nmake up the widget. When creating a new binding, the widget itself (here {bCounter1}} is shown but by using the\ndropdown box you can select any component you wish. The binding you create will then be made against the selected\ncomponent.\n\nOnce you have clicked OK to create the binding and are back in the &bind editor then a binding against a component\nis as shown in the second example binding here:\n\n{P$imgpr-help-BindEditorCompound.ppm}\n\nWhere "{g-->entryfield.label}" indicates that the "{gvis}" binding is against the label component of the entryfield\ncomponent of the current widget.'
p3873
sg8
(lp3874
sg10
(lp3875
S'2006/04/13'
p3876
asg12
I0
sg13
(lp3877
sg15
(lp3878
S'Bind editor - creating bindings to compound (eg Pmw) widgets'
p3879
assS'wid.tkinter.button.opt.foreground'
p3880
(dp3881
g4
(lp3882
sg6
S'>option.foreground.generic "Button"'
p3883
sg8
(lp3884
sg10
(lp3885
sg12
I0
sg13
(lp3886
sg15
(lp3887
ssS'wid.pmw.timecounter.opt.labelmargin'
p3888
(dp3889
g4
(lp3890
sg6
S">option.pmw.labelmargin.generic 'TimeCounter'"
p3891
sg8
(lp3892
sg10
(lp3893
sg12
I0
sg13
(lp3894
sg15
(lp3895
ssS'wid.tkinter.radiobutton.opt.variable'
p3896
(dp3897
g4
(lp3898
S'&control variable'
p3899
asg6
S'{HRadiobutton - variable}\n\nThe &control variable that this radiobutton shares with the other\nradiobuttons in the group.\n\nThis can be either an IntVar or a StringVar.'
p3900
sg8
(lp3901
sg10
(lp3902
S'2005/04/27'
p3903
asg12
I0
sg13
(lp3904
sg15
(lp3905
ssS'wid.tkinter.checkbutton.opt.background'
p3906
(dp3907
g4
(lp3908
sg6
S'>option.background.generic "Checkbutton"'
p3909
sg8
(lp3910
sg10
(lp3911
sg12
I0
sg13
(lp3912
sg15
(lp3913
ssS'assist.dim'
p3914
(dp3915
g4
(lp3916
S'&dimension'
p3917
aS'=assist-code'
p3918
asg6
S'{HThe option-editor dimensioned-number assist dialog}\n\nThis dialog help you specify a &dimensioned number. You have two choices:\n\n n Specify a dimensioned number directly, or\n n Specify some code which will supply the dimensioned number.\n\n{BSpecify directly}\n\nIn the upper area of the assist, enter the dimensioned number you want. Only valid dimensioned numbers are allowed\nhere. If you want to get back to the default value (which for this option is "@1") then click on the {gDefault}\nbutton and "@1" will appear in the entry.\n\n{BSpecify code}\n\nIn the lower area of the assist, enter the {Lcode=assist-code} that will supply the dimensioned number. This can be the name of a\nvariable, a function or whatever you need. No checking is done on the code you enter.'
p3919
sg8
(lp3920
sg10
(lp3921
S'2014-05-04'
p3922
asg12
I0
sg13
(lp3923
sg15
(lp3924
S'The option editor dimensioned-number assist dialog'
p3925
assS'wid.tkinter.label.opt.relief'
p3926
(dp3927
g4
(lp3928
sg6
S'>option.relief.generic "Label"'
p3929
sg8
(lp3930
sg10
(lp3931
sg12
I0
sg13
(lp3932
sg15
(lp3933
ssS'wid.tkinter.canvas.opt.selectforeground'
p3934
(dp3935
g4
(lp3936
sg6
S'>option.selectforeground.generic "Canvas", "items"'
p3937
sg8
(lp3938
sg10
(lp3939
sg12
I0
sg13
(lp3940
sg15
(lp3941
ssS'optionedit.invalidvalue'
p3942
(dp3943
g4
(lp3944
sg6
S"{HOption Edit - Invalid Value}\n\nHi, I'm the option editor for widget @2 and I notice that you just put in a request to @0. Howerver right now the\nvalue in option @1 is invalid. Please correct the invalid value, then you can @0.\n\nTo get help about the @1 option in particular option, close this help message then click the $hb over the label,\ninside the black rectangle, that says {g@1}."
p3945
sg8
(lp3946
sg10
(lp3947
S'<2005/04/07'
p3948
aS'@0 The action requested'
p3949
aS'@1 The name of the invalid option'
p3950
aS'@2 The name of the widget'
p3951
asg12
I0
sg13
(lp3952
sg15
(lp3953
ssS'buffet.widget.labeledwidget'
p3954
(dp3955
g4
(lp3956
sg6
S'>buffet.widget.generic2 "Pmw.LabeledWidget", \'\', \'wid.pmw.labeledwidget.overview\''
p3957
sg8
(lp3958
sg10
(lp3959
sg12
I0
sg13
(lp3960
sg15
(lp3961
ssS'load.options.missing'
p3962
(dp3963
g4
(lp3964
S'&config file'
p3965
aS'&option editor'
p3966
aS'&config file'
p3967
aS'&config file'
p3968
aS'&config file'
p3969
asg6
S"{HMissing options at load time}\n\nFor each widget defined in the &config file there are a bunch of options that you can set\nusing the &option editor. The @1 you are trying to load has at least one instance of a\nwidget with an option which is not defined in the current &config file. This is probably the\nresult of changes made to the config file or of loading a @1 that came from another $$\ninstallation.\n\nThe &config file is the ultimate authority on what options each widget has. If you continue\nthen I will delete the options that I don't know about and carry on. Your only alternate\nchoice is to cancel loading of the @1.\n\nIn the list that follows, {bModule} and {bForm} indicate where in the project the problem\nwas found. {bWidget type} shows the kind of widget that was involved. {bWidget name} is the\nname by which the widget-instance was known within the form and {bOption} is the name of the\noption that existed when the @1 was saved but which is not defined in the current\n&config file.\n\n@0"
p3970
sg8
(lp3971
sg10
(lp3972
S'2006/03/30'
p3973
aS'@0 List of modules and forms'
p3974
aS"@1 'project' or 'form'"
p3975
asg12
I0
sg13
(lp3976
sg15
(lp3977
ssS'wid.tkinter.label.opt.bitmap'
p3978
(dp3979
g4
(lp3980
S'&bitmap'
p3981
aS'&image'
p3982
asg6
S">option.bitmap.generic 'Label'"
p3983
sg8
(lp3984
sg10
(lp3985
sg12
I0
sg13
(lp3986
sg15
(lp3987
ssS'wid.tkinter.menu.opt.font'
p3988
(dp3989
g4
(lp3990
sg6
S'>option.font.generic "Menu"'
p3991
sg8
(lp3992
sg10
(lp3993
sg12
I0
sg13
(lp3994
sg15
(lp3995
ssS'wid.tkinter.text.opt.xscrollcommand'
p3996
(dp3997
g4
(lp3998
sg6
S'>option.xscrollcommand.generic "Text"'
p3999
sg8
(lp4000
sg10
(lp4001
sg12
I0
sg13
(lp4002
sg15
(lp4003
ssS'form.main.info'
p4004
(dp4005
g4
(lp4006
S'&form'
p4007
aS'&module'
p4008
aS'=form.main.arcane'
p4009
aS'&project'
p4010
aS'&module'
p4011
aS'&form'
p4012
aS'&module'
p4013
aS'&form'
p4014
aS'&module'
p4015
aS'&form'
p4016
aS'&module'
p4017
aS'&frame'
p4018
aS'&form'
p4019
aS'&module'
p4020
aS'&project'
p4021
asg6
S"{HThe main form of the main module}\n\nThe main &form of the main &module is special. The reasons why are pretty {larcane=form.main.arcane} but here's the\nexecutive summary about the specialness:\n\no The name of the &project == the name of the main &module == the name of the main &form of the main &module. To\n  change one is to change them all.\n\no You are not allowed to delete the main &form of the main &module.\n\no The main &form of the main &module has to be a &frame. Thus, it must derive from {gTkinter.Frame}, from\n  {gPmw.ScrolledFrame} or from something which provides equivalent functionality.\n\no Code which creates an instance of the main &form of the main &module is generated automatically by $$. This\n  instance is packed into the Toplevel which is provided by Tk as the main window of the &project.\n\no $$ is currently unable to export the main form of the main module because the code to implement that has not been\n  written yet."
p4022
sg8
(lp4023
sg10
(lp4024
S'2006/03/26'
p4025
asg12
I0
sg13
(lp4026
sg15
(lp4027
S'The main form of the main module is special'
p4028
assS'wid.pmw.group.opt.groupchildsite'
p4029
(dp4030
g4
(lp4031
sg6
S'{HGroup - groupchildsite}\n\nThe frame which can contain other widgets to be grouped.'
p4032
sg8
(lp4033
sg10
(lp4034
S'2006/03/19'
p4035
asg12
I0
sg13
(lp4036
sg15
(lp4037
ssS'wid.pmw.timecounter.opt.padx'
p4038
(dp4039
g4
(lp4040
S'&default'
p4041
asg6
S'{HTimeCounter - padx}\n\nSpecifies how much wider to make each column than the default width (where a\ncolumn consists of two arrows and an entry field). The entry fields expand to\nfill the extra space, but the arrow buttons are centered in the available\nspace. The &default is 0.'
p4042
sg8
(lp4043
sg10
(lp4044
S'2006/03/24'
p4045
asg12
I0
sg13
(lp4046
sg15
(lp4047
ssS'color.brown'
p4048
(dp4049
g1319
(lp4050
sg1321
S'{HBrowns}\n\n {f#A52A2A}  brown\n {f#FF4040}  brown1\n {f#EE3B3B}  brown2\n {f#CD3333}  brown3\n {f#8B2323}  brown4\n {f#D2691E}  chocolate\n {f#FF7F24}  chocolate1\n {f#EE7621}  chocolate2\n {f#CD661D}  chocolate3\n {f#8B4513}  chocolate4\n {f#BC8F8F}  rosy brown\n {f#BC8F8F}  RosyBrown\n {f#FFC1C1}  RosyBrown1\n {f#EEB4B4}  RosyBrown2\n {f#CD9B9B}  RosyBrown3\n {f#8B6969}  RosyBrown4\n {f#8B4513}  saddle brown\n {f#8B4513}  SaddleBrown\n {f#F4A460}  sandy brown\n {f#F4A460}  SandyBrown'
p4051
sg1323
(lp4052
sg1325
(lp4053
sg1327
I0
sg1328
(lp4054
sg1330
(lp4055
ssS'option.selectforeground.generic'
p4056
(dp4057
g4
(lp4058
S'&new mexico tech'
p4059
asg6
S'{H@0 - selectforeground}\n\nThe foreground color to use when this @0 is displaying @1.\n\n$nmt'
p4060
sg8
(lp4061
sg10
(lp4062
S'2005/03/06'
p4063
asg12
I0
sg13
(lp4064
sg15
(lp4065
ssS'code-edit.info-label'
p4066
(dp4067
g4
(lp4068
S'&remembered line'
p4069
asg6
S'{HCode-editor status line}\n\nThis status line is just above the code on the right and looks something like this:\n\n{P$imgpr-help-Code-info-area.ppm}\n\nThe format is:\n t {gLine: LL of TT. Pushed line numbers: R}\n\nwhere:\n t {gLL}:  Is the line the cursor is currently on.\n t {gTT}:  Is the total number of lines of code in this form.\n t {gR }:  Is the stack of &remembered lines numbers or <none> if the stack is empty.'
p4070
sg8
(lp4071
sg10
(lp4072
S'2006/01/24'
p4073
asg12
I0
sg13
(lp4074
sg15
(lp4075
S'Code-editor status line'
p4076
assS'option.repeatdelay.generic'
p4077
(dp4078
g4
(lp4079
S'&new mexico tech'
p4080
asg6
S'{H@0 - repeatdelay}\n\nThis option controls how long {fbutton-1} has to be held down in the trough\nbefore the slider starts moving in that direction repeatedly.\n\nThe unit is milliseconds and the default is 300 mS.\n\n$nmt'
p4081
sg8
(lp4082
sg10
(lp4083
S'2005/03/06'
p4084
asg12
I0
sg13
(lp4085
sg15
(lp4086
ssS'code-editor.selecting-text'
p4087
(dp4088
S'Links'
p4089
(lp4090
sS'Text'
p4091
S"{HCode editor - how to select text}\n\n{BWith the mouse}\n\nThe obvious way that everybody already knows about is to left-click-and-hold at the start of the area to be selected\nthen move the mouse to the end of the selected area and let go of the left mouse button.\n\n{BWith SHIFT and the up-arrow / down-arrow keys}\n\nUsing the {gUP-ARROW} or {gDOWN-ARROW} keys while holding down a {gSHIFT} key will select entire lines of text. The\n{GPAGE-UP} and {GPAGE-DOWN} keys look like they don't work for this but they do if you know the trick.\n\nt {gTRICK:} Hold down {gSHIFT} and keep it held down until we tell you to let it go. Use the {gUP-ARROW} or\n  {gDOWN-ARROW} keys at least once to get some text selected. Now use {GPAGE-UP} and {GPAGE-DOWN} to get to the end\n  of the area you want to select. It will {ilook} like nothing is being selected, but stick with us on this one, OK.\n  Now, and you are still holding {gSHIFT} down I hope, use {gUP-ARROW} or {gDOWN-ARROW} and all the text from your\n  original selection to the current position will be selected. Now let up on the {gSHIFT} key.\n\nYes, this is pretty clunky and un-obvious and it would be more reasonable if the selection just extended as you use\n{GPAGE-UP} and {GPAGE-DOWN}. However, was not something invented by the Rapyd-Tk team, rather it came for free with\nthe Tkinter {gText} widget and that's just the way it works.\n\n{BWith SHIFT and the mouse}\n\nThis one is great if you want to select a really big area. The formula:\n\n n Using the mouse, left-click over the spot where you want the selection to begin.\n\n n Navigate to around where you want the selection to end, using {GPAGE-UP}, {GPAGE-DOWN} or the scroll-bar.\n\n n Press and hold either {gSHIFT} key.\n\n n With the mouse, left-click over the spot where you want the selection to end. Everything from your original\n   cursor location to the new one will be selected. How cool is that."
p4092
sS'Hotlinks'
p4093
(lp4094
sS'Comments'
p4095
(lp4096
S'2014-03-31'
p4097
asS'Wip'
p4098
I0
sS'Plurals'
p4099
(lp4100
sS'Abstracts'
p4101
(lp4102
S'How to: Select text in the code editor'
p4103
assS'code-edit.selectall'
p4104
(dp4105
g4
(lp4106
S'&editor actions'
p4107
asg6
S'{HCode editor - Select all}\n\n Key:   $tActionSelectAll\n Menu: {fEdit/Select all}\n\nSelects all the text.\n\nCode &editor actions.'
p4108
sg8
(lp4109
sg10
(lp4110
S'2005/04/07'
p4111
asg12
I0
sg13
(lp4112
sg15
(lp4113
S'Code editor - select all'
p4114
assS'wid.pmw.buttonbox.opt.labelmargin'
p4115
(dp4116
g4
(lp4117
sg6
S'>option.pmw.labelmargin.generic "ButtonBox"'
p4118
sg8
(lp4119
sg10
(lp4120
sg12
I0
sg13
(lp4121
sg15
(lp4122
ssS'option-dimension'
p4123
(dp4124
g4
(lp4125
sg6
S'{HDimensioned numbers}\n\nPretty much any time you supply a number saying how big a widget or part of a\nwidget is to be, you can use a dimensioned number.\n\nIf you supply just a number then it is taken to be in pixels. You can specify\nspecific units by supplying a string consisting of a number followed by:\n\nt {Gc}   for centimeters\nt {Gi}   for inches\nt {Gm}   for millimeters\nt {Gp}   for printer\'s points (1/72")\n\nSome examples of dimensioned numbers:\n\nt {g12\'    - twelve pixels}\nt {g\'0.1c\' - 1/10 of a centimeter}\nt {g\'.05i\' - 1/20 of an inch}\nt {g\'4m\'   - 4 millimeters}\nt {g\'3p\'   - 3 points}\n\n{BNote:} There are some instances where you supply a size in {Icharacters}\n(eg the width option of a Button which is displaying text) and in those cases\nyou can only use plain number, not a dimensioned number.'
p4126
sg8
(lp4127
S'dimension'
p4128
asg10
(lp4129
S'2005/02/27'
p4130
asg12
I0
sg13
(lp4131
sg15
(lp4132
S'Dimensioned numbers'
p4133
assS'module.select.dialog'
p4134
(dp4135
g4
(lp4136
S'&module'
p4137
aS'&module'
p4138
aS'&project'
p4139
asg6
S'{HModule selection dialog}\n\nThis dialog is where you select which &module you want to work on now. It\npresents you with a list of all the &modules in your &project. Select the one\nyou want and press OK.\n\nAs long as were talking module selection, note that:\n\n o You can use the {g$tActionModuleAlternate} key to alternate between two\n   modules.\n o You can use the {g$tActionModuleNext} key to step through all\n   modules of the project in alphabetical order.'
p4140
sg8
(lp4141
sg10
(lp4142
S'2005/05/25'
p4143
asg12
I0
sg13
(lp4144
sg15
(lp4145
ssS'option.troughcolor.generic'
p4146
(dp4147
g4
(lp4148
S'&color'
p4149
asg6
S'{H@0 - troughcolor}\n\nThe &color of the trough.'
p4150
sg8
(lp4151
sg10
(lp4152
S'2005/04/05'
p4153
asg12
I0
sg13
(lp4154
sg15
(lp4155
ssS'wid.tkinter.menubutton.opt.indicatoron'
p4156
(dp4157
g4
(lp4158
sg6
S'{HMenubutton - indicatoron}\n\nIf True then a small indicator rectangle will be displayed on the right side\nof the menubutton and the default menu bindings will treat this as an option\nmenubutton. If False then no indicator will be displayed.'
p4159
sg8
(lp4160
sg10
(lp4161
S'2005/04/19'
p4162
asg12
I0
sg13
(lp4163
sg15
(lp4164
ssS'wid.tkinter.canvas.opt.pyclass'
p4165
(dp4166
g4
(lp4167
sg6
S'>option.pyclass.generic "Canvas"'
p4168
sg8
(lp4169
sg10
(lp4170
sg12
I0
sg13
(lp4171
sg15
(lp4172
ssS'wid.tkinter.entry.opt.highlightbackground'
p4173
(dp4174
g4
(lp4175
sg6
S'>option.highlightbackground.generic "Entry"'
p4176
sg8
(lp4177
sg10
(lp4178
sg12
I0
sg13
(lp4179
sg15
(lp4180
ssS'_temp2'
p4181
(dp4182
g4
(lp4183
sg6
S'Baffy\n\n{fFixed pitch}\n\n{gFixed pitch bold}\n\n\nAnd stuff'
p4184
sg8
(lp4185
sg10
(lp4186
sg12
I0
sg13
(lp4187
sg15
(lp4188
ssS'wid.tkinter.scrollbar.opt.highlightthickness'
p4189
(dp4190
g4
(lp4191
sg6
S'>option.highlightthickness.generic "Scrollbar"'
p4192
sg8
(lp4193
sg10
(lp4194
sg12
I0
sg13
(lp4195
sg15
(lp4196
ssS'widget.rename.handlers.allconflict'
p4197
(dp4198
g4
(lp4199
S'=howto.rename.handler'
p4200
aS'&handler'
p4201
aS'&binding'
p4202
asg6
S'{BChanging event handler names when a widget is renamed}\n\nYou just renamed the current widget from "@0" to "@1". In the current form the following event handler</s>\nreference<s> widget "@0":\n\n@2\n\nNormally I would offer to change the name</s> of <this/the> handler</s> to reflect the change of widget name but\nthere already <is a/are> handler</s>, name</s> shown just below, which would conflict with <such a/the> renamed\nhandler</s>, so there is nothing I can do.\n\n@4\n\nIf it seems appropriate you can always {Lrename=howto.rename.handler} the &handler</s> or revise the &binding</s>\nmanually.'
p4203
sg8
(lp4204
sg10
(lp4205
S'2006/02/06'
p4206
aS'@0 Old widget name'
p4207
aS'@1 New widget name'
p4208
aS'@2 List of old handler names'
p4209
aS'@3 Count of handlers (plural indicator 0)'
p4210
aS'@4 List of conflicting handler names'
p4211
asg12
I0
sg13
(lp4212
I3
asg15
(lp4213
ssS'option.value.generic'
p4214
(dp4215
g4
(lp4216
S'&control variable'
p4217
aS'&new mexico tech'
p4218
asg6
S'{H@0 - value}\n\nWhen a @0 is turned on by the user, its &control variable is set to its\ncurrent {gvalue} option.\n\nIf the control variable is an {gIntVar}, give each @0 in the group a\ndifferent integer value option. If the control variable is a {gStringVar},\ngive each @0 a different string value option.\n\n$nmt'
p4219
sg8
(lp4220
sg10
(lp4221
S'2005/04/05'
p4222
asg12
I0
sg13
(lp4223
sg15
(lp4224
ssS'wid.tkinter.scale.opt.from_'
p4225
(dp4226
g4
(lp4227
sg6
S'>option.from_.generic "Scale"'
p4228
sg8
(lp4229
sg10
(lp4230
sg12
I0
sg13
(lp4231
sg15
(lp4232
ssS'wid.tkinter.radiobutton.opt.image'
p4233
(dp4234
g4
(lp4235
sg6
S'>option.image.generic "Radiobutton"'
p4236
sg8
(lp4237
sg10
(lp4238
sg12
I0
sg13
(lp4239
sg15
(lp4240
ssS'option.borderwidth.generic'
p4241
(dp4242
g4
(lp4243
S'&dimension'
p4244
asg6
S'{H@0 - borderwidth}\n\nA &dimensioned number specifying the width of the bevel that makes up the outside of this @0.\n\n@1'
p4245
sg8
(lp4246
sg10
(lp4247
S'2005/02/28'
p4248
asg12
I0
sg13
(lp4249
sg15
(lp4250
ssS'wid.tkinter.label.opt.underline'
p4251
(dp4252
g4
(lp4253
sg6
S'>option.underline.generic "Label"'
p4254
sg8
(lp4255
sg10
(lp4256
sg12
I0
sg13
(lp4257
sg15
(lp4258
ssS'wid.pmw.scrolledfield.opt.hull'
p4259
(dp4260
g4
(lp4261
sg6
S">option.pmw.hull.generic 'ScrolledField'"
p4262
sg8
(lp4263
sg10
(lp4264
sg12
I0
sg13
(lp4265
sg15
(lp4266
ssS'option.validatecommand.generic'
p4267
(dp4268
g4
(lp4269
S'=command-option.whatis'
p4270
aS'=option.validate.generic'
p4271
asg6
S"{H@0 - validatecommand}\n\nA {Lfunction or method=command-option.whatis} to call to check if the\ncontents is valid. The function should return a true value if the new\ncontents is valid, or false if it isn't.\n\nNote that this option is meaningful only if the {lvalidate\noption=option.validate.generic} is set to something other than {gnone}."
p4272
sg8
(lp4273
sg10
(lp4274
S'2005/04/05'
p4275
asg12
I0
sg13
(lp4276
sg15
(lp4277
ssS'wid.tkinter.text.opt.width'
p4278
(dp4279
g4
(lp4280
sg6
S'>option.width.generic "Text"'
p4281
sg8
(lp4282
sg10
(lp4283
sg12
I0
sg13
(lp4284
sg15
(lp4285
ssS'wid.tkinter.listbox.opt.borderwidth'
p4286
(dp4287
g4
(lp4288
sg6
S'>option.borderwidth.generic "Listbox"'
p4289
sg8
(lp4290
sg10
(lp4291
sg12
I0
sg13
(lp4292
sg15
(lp4293
ssS'howto.select.editor.schema'
p4294
(dp4295
g4
(lp4296
sg6
S'{HHow to: Select the editor scheme to use}\n\nAn editor scheme defines which key does what when editing text etc. and\nspecifies the colors for the various Python syntactic elements in colorized\ntext.\n\nThe configuration file $configfile can contain any number of different editor\nschemes. As this help message was written there were two editor schemes\ndefined:\n\n o {GIdle}\n    Attemts to mimic the color and key-bindings of Idle.\n\n o {gMidnightCommander}\n    Attempts to mimic the color and keybindings of the Midnight Commander\n   editor.\n\nt In both of these the colors match pretty closely and the key bindings don\'t\n  because some editing features provided by Rapyd don\'t exist in the other\n  editors and vice versa. Where the features match, idential bindings have\n  been assigned and where the features don\'t match binding have been assigned\n  that seemed reasonable at the time.\n\nA line in the config file says what scheme to use. To set this yourself, open\n$configfile with your favorite text editor, search for the line which\ncontains "{gDefaultEditorScheme =}", then change the part after the equal\nsign to say {gMidnightCommander}, {gIdle} or whatever other editor scheme you\nmay have defined.\n\nTo define your own scheme look at the existing ones and read the\ndocumentation contained in the configuration file itself.'
p4297
sg8
(lp4298
sg10
(lp4299
S'2006/02/10'
p4300
asg12
I0
sg13
(lp4301
sg15
(lp4302
S'How to: Select the editor scheme to use'
p4303
assS'wid.tkinter.entry.opt.highlightcolor'
p4304
(dp4305
g4
(lp4306
sg6
S'>option.highlightcolor.generic "Entry"'
p4307
sg8
(lp4308
sg10
(lp4309
sg12
I0
sg13
(lp4310
sg15
(lp4311
ssS'code-edit.action.cut'
p4312
(dp4313
g4
(lp4314
S'=code-edit.action.cutappend'
p4315
aS'&editor actions'
p4316
asg6
S'{HCode editor - Cut}\n\n Key:   $tActionCut\n Menu: {fEdit/Cut}\n\nThe clipboard is cleared, the currently selected text is copied to the clipboard, then the currently selected text\nis deleted.\n\nNote that {LCutAppend=code-edit.action.cutappend} performs a similar function but without clearing the clipboard.\n\nCode &editor actions'
p4317
sg8
(lp4318
sg10
(lp4319
S'2005/04/07'
p4320
asg12
I0
sg13
(lp4321
sg15
(lp4322
S'Code editor - Cut'
p4323
assS'gpl'
p4324
(dp4325
g4
(lp4326
S'=gpl.txt'
p4327
asg6
S'$$: A rapid application development program for Python+Tkinter\n Copyright (C) 2010  Cam Farnell\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public\nLicense, version 2, as published by the Free Software Foundation\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\ndetails.\n\n{LFull text of the GNU General Public License=gpl.txt}\n\nNote that the projects generated by $$ are not inherently covered by the GPL since their contents is not "a work\nbased on $$". However, the $$ team does heartily encourage project authors to license their projects under the GPL.'
p4328
sg8
(lp4329
sg10
(lp4330
S'<2006/03/12'
p4331
asg12
I0
sg13
(lp4332
sg15
(lp4333
S'$$ is supplied under the terms of the GNU General Public License ( GPL )'
p4334
assS'option.tabs.generic'
p4335
(dp4336
g4
(lp4337
S'&new mexico tech'
p4338
asg6
S'{H@0 - tabs}\n\nThe tabs option for Text widgets gives you a number of ways to set tab stops\nwithin the widget.\n\no The default is to place tabs every eight characters.\n\no To set specific tab stops, set this option to a sequence of one or more\n  distances. For example, setting tabs=("3c", "5c", "12c") would put tab\n  stops 3, 5, and 12cm from the left side. Past the last tab you set, tabs\n  have the same width as the distance between the last two existing tab\n  stops. So, continuing our example, because 12c-5c is 7 cm, if the user\n  keeps pressing the Tab key, the cursor would be positioned at 19cm, 26cm,\n  33cm, and so on.\n\no Normally, text after a tab character is aligned with its left edge on the\n  tab stop, but you can include any of the keywords LEFT, RIGHT, CENTER, or\n  NUMERIC in the list after a distance, and that will change the positioning\n  of the text after each tab.\n\n  o A LEFT tab stop has the default behavior.\n  o A RIGHT tab stop will position the text so its right edge is on the stop.\n  o A CENTER tab will center the following text on the tab stop.\n  o A NUMERIC tab stop will place following text to the left of the stop up\n    until the first period (".") in the text--after that, the period will be\n    centered on the stop, and the rest of the text will positioned to its\n    right.\n\nFor example, setting tabs to\n\nt {g"0.5i", "0.8i", RIGHT, "1.2i", CENTER, "2i", NUMERIC}\n\nwould set four tab stops: a left-aligned tab stop half an inch from the left\nside, a right-aligned tab stop 0.8" from the left side, a center-aligned tab\nstop 1.2" from the left, and a numeric-aligned tab stop 2" from the left.\n\n$nmt'
p4339
sg8
(lp4340
sg10
(lp4341
S'2005/04/04'
p4342
asg12
I0
sg13
(lp4343
sg15
(lp4344
ssS'widgetator.tab.pack'
p4345
(dp4346
g4
(lp4347
S'&widgetator'
p4348
aS'=pack-editor'
p4349
aS'&within'
p4350
aS'&within'
p4351
asg6
S'{HWidgetator - Pack tab}\n\nThis tab is part of the &widgetator. It brings forward the {Lpack editor=pack-editor} which lets you see and edit\nall the pack related settings of the selected widget.\n\nTo get help about a particular pack option, click the $hb over the name of that pack option.\n\nThere is no pack option for {gside}; it is set automatically by $$ based on where you place your widgets &within\ntheir frame. A series of widgets placed near the top of a frame will be {gtop} packed; widgets placed near the right\nside will be {gright} packed and so on.\n\nNote that widgets &within a given frame should be arranged either horizontally or vertically. If you want to have\nmore complex arrangements of widgets, then add additional frames as necessary so that within each frame the widgets\nare either horizontal or vertical. If a frame contains both widgets near the top and near the bottom (or left/right\nfor the horizontal case) then they are packed appropriately.'
p4352
sg8
(lp4353
sg10
(lp4354
S'2005/04/30'
p4355
asg12
I0
sg13
(lp4356
sg15
(lp4357
ssS'bind.on.parkinglot2'
p4358
(dp4359
g4
(lp4360
S'&binding'
p4361
aS'&a widget'
p4362
aS'&event'
p4363
aS'&handler'
p4364
aS'&form'
p4365
aS'&a widget'
p4366
aS'&form'
p4367
aS'&binding'
p4368
aS'&parking lot'
p4369
aS'&form'
p4370
aS'&a widget'
p4371
aS'&parking lot'
p4372
aS'&binding'
p4373
aS'&form'
p4374
aS'&binding'
p4375
aS'&handler'
p4376
asg6
S"{HEvent bindings while on parking lot}\n\nA &binding is a connection between &a widget related &event and an event &handler method of a &form. You need both\n&a widget and a &form in order to create or modify a &binding.\n\nWhen a widget is on the &parking lot it is not part of any &form. When &a widget is moved to the &parking lot any\n&bindings it had are retained, in escrow so to speak, and when that widget is moved back onto a &form it will\nattempt to reconnect it's &bindings to event &handlers of the corresponding name. However, you can't alter it's\nbindings as long as the widget is on the parking lot."
p4377
sg8
(lp4378
sg10
(lp4379
S'2005/05/13'
p4380
asg12
I0
sg13
(lp4381
sg15
(lp4382
S"You can't create or change event bindings for a widget which is on the parking lot"
p4383
assS'wid.pmw.scrolledlistbox.opt.labelmargin'
p4384
(dp4385
g4
(lp4386
sg6
S">option.pmw.labelmargin.generic 'ScrolledListBox'"
p4387
sg8
(lp4388
sg10
(lp4389
sg12
I0
sg13
(lp4390
sg15
(lp4391
ssS'wid.tkinter.listbox.opt.setgrid'
p4392
(dp4393
g4
(lp4394
sg6
S'>option.setgrid.generic "Listbox"'
p4395
sg8
(lp4396
sg10
(lp4397
sg12
I0
sg13
(lp4398
sg15
(lp4399
ssS'wid.tkinter.radiobutton.opt.background'
p4400
(dp4401
g4
(lp4402
sg6
S'>option.background.generic "Radiobutton"'
p4403
sg8
(lp4404
sg10
(lp4405
sg12
I0
sg13
(lp4406
sg15
(lp4407
ssS'bind.eventwizard.keylogical'
p4408
(dp4409
g4
(lp4410
S'&event'
p4411
aS'&event'
p4412
asg6
S'{HBind Event Wizard - Logical Key}\n\nRight now you need to press the key combination that you want your &event to be bound to. To\ndo this:\n\n n First press and hold any of the "meta" keys ({gAlt, Control, Shift} and {gCapsLock}) that\n   you want to be part of this key combination (possibly none) then\n\n n Press the function (example: {gF3}, {Gcursor up} etc) or symbol (example: {gA}, {g$} etc)\n   key that you want to form the basis of this &event.\n\nGo ahead and the press key-combination you want, after you have closed this help window.\n\nRemember that once you have pressed your key-combination you can see the resulting event\nstring up at the top of the wizard.\n\nIf you hit a wrong key-combination, hit the correct one; you can enter as many\nkey-combinations as you like and each new one pressed replaces the previous one.\n\nWhen you are happy with the key-combination click on {gNext} to continue.\n\nTo change a previous choice, click on the {GBackUp} button.'
p4413
sg8
(lp4414
sg10
(lp4415
S'2005/03/14'
p4416
asg12
I0
sg13
(lp4417
sg15
(lp4418
S'Bind Event Wizard - Logical key'
p4419
assS'code-edit.action.indentblock'
p4420
(dp4421
g4
(lp4422
S'&editor actions'
p4423
asg6
S'{HCode editor - Indent block}\n\n Key:   $tActionIndentBlock\n Menu: {fEdit/Indent block}\n\n\nEvery line in the currently selected block is indented by the {gindent} amount.\nThe indent amount is set in the &config file.\n\nCode &editor actions'
p4424
sg8
(lp4425
sg10
(lp4426
S'2005/04/07'
p4427
asg12
I0
sg13
(lp4428
sg15
(lp4429
S'Code editor - Indent block'
p4430
assS'wid.tkinter.canvas.opt.selectbackground'
p4431
(dp4432
g4
(lp4433
sg6
S'>option.selectbackground.generic "Canvas", "items"'
p4434
sg8
(lp4435
sg10
(lp4436
sg12
I0
sg13
(lp4437
sg15
(lp4438
ssS'wid.pmw.notebook.opt.lowercommand'
p4439
(dp4440
g4
(lp4441
S'&command option'
p4442
aS'&event'
p4443
aS'&handler'
p4444
asg6
S'{HNoteBook - lowercommand}\n\nA &command option which specifies the &event &handler to call when the\nselected page is replaced with a new selected page. The function is called\nwith a single argument, which is the name of the previously selected page,\nand is called before the {fcreatecommand} or {fraisecommand} functions.'
p4445
sg8
(lp4446
sg10
(lp4447
S'2006/03/21'
p4448
asg12
I0
sg13
(lp4449
sg15
(lp4450
ssS'wid.tkinter.scale.opt.font'
p4451
(dp4452
g4
(lp4453
sg6
S'>option.font.generic "Scale"'
p4454
sg8
(lp4455
sg10
(lp4456
sg12
I0
sg13
(lp4457
sg15
(lp4458
ssS'maintained.by.rapyd'
p4459
(dp4460
g4
(lp4461
S'&binding'
p4462
aS'&command option'
p4463
aS'&event'
p4464
aS'&handler'
p4465
aS'&binding'
p4466
aS'&bind editor'
p4467
aS'&option editor'
p4468
aS'&binding'
p4469
aS'&binding'
p4470
aS'&event'
p4471
aS'&handler'
p4472
aS'&event'
p4473
aS'&handler'
p4474
aS'&binding'
p4475
aS'&event'
p4476
aS'&handler'
p4477
aS'&event'
p4478
aS'&handler'
p4479
aS'&binding'
p4480
aS'&handler'
p4481
aS'&binding'
p4482
aS'&handler'
p4483
asg6
S'{HBindings and command options maintained by $$}\n\nWe talk a lot about &bindings, &command options and &event &handlers\n"maintained" by $$. What does that mean exactly?\n\n&Bindings which are created via the &bind editor or the &option editor (for\nthose options where you get to specify a command to call) are &bindings which\nare "maintained by $$". When you create such a &binding you automatically get\nan &event &handler as well. The body of that &event &handler is yours to code as\nyou please but the header of the event handler is maintained by $$.\n\nAny bindings or event handlers which you put in your code by hand are\nmaintained by you and not by $$.\n\nThis is sometimes an important distinction. For example, when working with\n&bindings and &event &handlers which are maintained by $$ if you rename an &event\n&handler then any &bindings which refer to that &handler are automatically\nupdated to refer to the new name. When you create bindings and handlers which\nare not maintained by $$ then no such renaming happens.\n\nUsing $$ to maintain &bindings and &handlers is the way to go unless you have\nsome Really Good reason to do otherwise.'
p4484
sg8
(lp4485
S'maintained'
p4486
asg10
(lp4487
S'2006/02/07'
p4488
asg12
I0
sg13
(lp4489
sg15
(lp4490
S'What is: Bindings and command options maintained by $$'
p4491
assS'buffet.widget.scrolledlistbox'
p4492
(dp4493
g4
(lp4494
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledListBox", \'\', \'wid.pmw.scrolledlistbox.overview\''
p4495
sg8
(lp4496
sg10
(lp4497
sg12
I0
sg13
(lp4498
sg15
(lp4499
ssS'option.insertwidth.generic'
p4500
(dp4501
g4
(lp4502
S'&dimension'
p4503
aS'&new mexico tech'
p4504
asg6
S'{H@0 - insertwidth}\n\nA &dimensioned number giving the width of the insertion cursor (its height is determined by the tallest item in its\nline).\n\nDefault is 2 pixels.\n\n$nmt'
p4505
sg8
(lp4506
sg10
(lp4507
S'2005/03/03'
p4508
asg12
I0
sg13
(lp4509
sg15
(lp4510
ssS'wid.tkinter.scale.opt.tickinterval'
p4511
(dp4512
g4
(lp4513
sg6
S'>option.tickinterval.generic "Scale"'
p4514
sg8
(lp4515
sg10
(lp4516
sg12
I0
sg13
(lp4517
sg15
(lp4518
ssS'layout-frame-resize'
p4519
(dp4520
g4
(lp4521
S'&layout editor'
p4522
aS'&form'
p4523
asg6
S"{HHow to: Resize an existing frame in the Layout editor}\n\nYou resize existing frames in the &layout editor by clicking on one of the lines that make up\nthe frame and dragging it as needed. To move a line:\n\n o Place the cursor over any portion of the line to be moved.\n o Press and hold down the left mouse button; the line will change from solid to dotted\n   indicating it is ready to be moved.\n o Move the mouse as needed to reposition the line.\n o Release the left mouse button to place the line.\n\nNote that there are various constraints when resizing frames by dragging a line:\n\n o You can only move a line so close to another line (or the edge of the form) before it stops\n   moving. This is to prevent the creation of frames so small that you couldn't reasonably\n   work with them.\n\n o Unlike new lines (which can wander all over the &form when you are placing them) existing\n   line represent the boundry between two frames and thus, to make any logical sense, must\n   stay within the larger frame which contains the line being moved."
p4524
sg8
(lp4525
sg10
(lp4526
S'2005/03/06'
p4527
asg12
I0
sg13
(lp4528
sg15
(lp4529
S'How to: Resize an existing frame in the layout editor'
p4530
assS'wid.pmw.panedwidget.opt.hull'
p4531
(dp4532
g4
(lp4533
sg6
S">option.pmw.hull.generic 'PanedWidget'"
p4534
sg8
(lp4535
sg10
(lp4536
sg12
I0
sg13
(lp4537
sg15
(lp4538
ssS'pack.option.expand'
p4539
(dp4540
g4
(lp4541
sg6
S'{HPack option - Expand}\n\nConcerns allocation of space to this widget.\n\n o {gYes}\n    Make the space allocated to this widget as large as possible\n\n o {gNo}\n    Allocate only as much space as is actually needed for the widget.\n\nNote that if several widgets which are competing for the same space all have\n{gexpand} set to {gYes} then the space is shared among them.'
p4542
sg8
(lp4543
sg10
(lp4544
S'2006/02/11'
p4545
asg12
I0
sg13
(lp4546
sg15
(lp4547
ssS'wid.tkinter.scale.opt.background'
p4548
(dp4549
g4
(lp4550
S'&color'
p4551
aS'&new mexico tech'
p4552
asg6
S'{HScale - background}\n\nThe background &color of the parts of the widget that are outside the trough.\n\n$nmt'
p4553
sg8
(lp4554
sg10
(lp4555
S'2005/04/27'
p4556
asg12
I0
sg13
(lp4557
sg15
(lp4558
ssS'wid.tkinter.button.opt.width'
p4559
(dp4560
g4
(lp4561
sg6
S'{HButton - width}\n\nThe width of the button in pixels (for images or bitmaps), or in characters\n(for text Buttons).'
p4562
sg8
(lp4563
sg10
(lp4564
sg12
I0
sg13
(lp4565
sg15
(lp4566
ssS'layout-widget-delete'
p4567
(dp4568
g4
(lp4569
S'&trash bin'
p4570
aS'&layout area'
p4571
aS'&parking lot'
p4572
aS'=layout-frame-delete'
p4573
asg6
S"{HDeleting Widgets}\n\nTo delete a widget drag it to the &trash bin, which is located below the\n&layout area and to the right of the &parking lot. Once a widget is deleted\nit's gone forever; try not to trash ones you actually want.\n\nWhen a {Lframe is deleted=layout-frame-delete}, any widgets which were inside\nthe frame are deleted at the same time."
p4574
sg8
(lp4575
sg10
(lp4576
S'2005/03/05'
p4577
asg12
I0
sg13
(lp4578
sg15
(lp4579
S'Deleting widgets from your form'
p4580
assS'wid.pmw.combobox.opt.history'
p4581
(dp4582
g4
(lp4583
sg6
S'{HComboBox - history}\n\nWhen {gReturn} is pressed in the entry field, the current value of the entry field\nis appended to the ListBox if {ghistory} is True. The &default is {gTrue}.'
p4584
sg8
(lp4585
sg10
(lp4586
S'2006/03/18'
p4587
asg12
I0
sg13
(lp4588
sg15
(lp4589
ssS'wid.pmw.optionmenu.opt.menubutton'
p4590
(dp4591
g4
(lp4592
sg6
S'{HMenuButton - menubutton}\n\nThe menu button displaying the currently selected value.'
p4593
sg8
(lp4594
sg10
(lp4595
S'2006/03/21'
p4596
asg12
I0
sg13
(lp4597
sg15
(lp4598
ssS'wid.tkinter.frame.opt.borderwidth'
p4599
(dp4600
g4
(lp4601
sg6
S'>option.borderwidth.generic "Frame"'
p4602
sg8
(lp4603
sg10
(lp4604
sg12
I0
sg13
(lp4605
sg15
(lp4606
ssS'automangle'
p4607
(dp4608
g4
(lp4609
S'&config file'
p4610
aS'&event'
p4611
aS'&handler'
p4612
aS'&config file'
p4613
asg6
S"{HWhat is: The AutoMangle option for widget and event handler names}\n\n{bAutoMangle} is a option set in the &config file.\n\n\nIf {bAutoMangle} is 0 then the names suggested for widgets and for &event &handlers start with a letter. Since the\nnames are only suggested you can make them quasi-private by adding single or double underscores if you wish.\n\nIf {bAutoMangle} is 1 then the names suggested for widgets and for event handlers start with double-underscore\nmarking them quasi-private to the current class and proboking full Python name-mangling thus making it less likely\nthat you will refer to these names by accident from outside the class. Of course the names are only suggested and by\nremoving the double underscores you can turn then into public names.\n\nif {bAutoMangle} is 2 then the names suggested for widgets and for event handlers start with single-underscore which\nalso marks them as being quasi-private but it doesn't provoke full Python name mangling on them.\n\n\nOn the assumption that more names are private than public  and that you may not want full name mangling,\n{bAutoMangle} is set to 2 (single-underscore) when you get $$ but it's easy to change in the &config file."
p4614
sg8
(lp4615
sg10
(lp4616
S'2006/04/14'
p4617
asg12
I0
sg13
(lp4618
sg15
(lp4619
S'What is: The AutoMangle option for widget and event handler names'
p4620
assS'color.blue'
p4621
(dp4622
g51
(lp4623
sg53
S'{HBlues}\n\n {f#F0F8FF}  alice blue\n {f#F0F8FF}  AliceBlue\n {f#0000FF}  blue\n {f#8A2BE2}  blue violet\n {f#0000FF}  blue1\n {f#0000EE}  blue2\n {f#0000CD}  blue3\n {f#00008B}  blue4\n {f#8A2BE2}  BlueViolet\n {f#5F9EA0}  cadet blue\n {f#5F9EA0}  CadetBlue\n {f#98F5FF}  CadetBlue1\n {f#8EE5EE}  CadetBlue2\n {f#7AC5CD}  CadetBlue3\n {f#53868B}  CadetBlue4\n {f#6495ED}  cornflower blue\n {f#6495ED}  CornflowerBlue\n {f#00008B}  dark blue\n {f#483D8B}  dark slate blue\n {f#00008B}  DarkBlue\n {f#483D8B}  DarkSlateBlue\n {f#00BFFF}  deep sky blue\n {f#00BFFF}  DeepSkyBlue\n {f#00BFFF}  DeepSkyBlue1\n {f#00B2EE}  DeepSkyBlue2\n {f#009ACD}  DeepSkyBlue3\n {f#00688B}  DeepSkyBlue4\n {f#1E90FF}  dodger blue\n {f#1E90FF}  DodgerBlue\n {f#1E90FF}  DodgerBlue1\n {f#1C86EE}  DodgerBlue2\n {f#1874CD}  DodgerBlue3\n {f#104E8B}  DodgerBlue4\n {f#ADD8E6}  light blue\n {f#87CEFA}  light sky blue\n {f#8470FF}  light slate blue\n {f#B0C4DE}  light steel blue\n {f#ADD8E6}  LightBlue\n {f#BFEFFF}  LightBlue1\n {f#B2DFEE}  LightBlue2\n {f#9AC0CD}  LightBlue3\n {f#68838B}  LightBlue4\n {f#87CEFA}  LightSkyBlue\n {f#B0E2FF}  LightSkyBlue1\n {f#A4D3EE}  LightSkyBlue2\n {f#8DB6CD}  LightSkyBlue3\n {f#607B8B}  LightSkyBlue4\n {f#8470FF}  LightSlateBlue\n {f#B0C4DE}  LightSteelBlue\n {f#CAE1FF}  LightSteelBlue1\n {f#BCD2EE}  LightSteelBlue2\n {f#A2B5CD}  LightSteelBlue3\n {f#6E7B8B}  LightSteelBlue4\n {f#0000CD}  medium blue\n {f#7B68EE}  medium slate blue\n {f#0000CD}  MediumBlue\n {f#7B68EE}  MediumSlateBlue\n {f#191970}  midnight blue\n {f#191970}  MidnightBlue\n {f#000080}  navy blue\n {f#000080}  NavyBlue\n {f#B0E0E6}  powder blue\n {f#B0E0E6}  PowderBlue\n {f#4169E1}  royal blue\n {f#4169E1}  RoyalBlue\n {f#4876FF}  RoyalBlue1\n {f#436EEE}  RoyalBlue2\n {f#3A5FCD}  RoyalBlue3\n {f#27408B}  RoyalBlue4\n {f#87CEEB}  sky blue\n {f#87CEEB}  SkyBlue\n {f#87CEFF}  SkyBlue1\n {f#7EC0EE}  SkyBlue2\n {f#6CA6CD}  SkyBlue3\n {f#4A708B}  SkyBlue4\n {f#6A5ACD}  slate blue\n {f#6A5ACD}  SlateBlue\n {f#836FFF}  SlateBlue1\n {f#7A67EE}  SlateBlue2\n {f#6959CD}  SlateBlue3\n {f#473C8B}  SlateBlue4\n {f#4682B4}  steel blue\n {f#4682B4}  SteelBlue\n {f#63B8FF}  SteelBlue1\n {f#5CACEE}  SteelBlue2\n {f#4F94CD}  SteelBlue3\n {f#36648B}  SteelBlue4'
p4624
sg55
(lp4625
sg57
(lp4626
sg59
I0
sg60
(lp4627
sg62
(lp4628
ssS'wid.pmw.timecounter.opt.max'
p4629
(dp4630
g4
(lp4631
sg6
S'{HTimeCounter - max}\n\nSpecifies the maximum acceptable time in the form "HH:MM:SS".'
p4632
sg8
(lp4633
sg10
(lp4634
S'2006/03/24'
p4635
asg12
I0
sg13
(lp4636
sg15
(lp4637
ssS'option.pmw.repeatrate.generic'
p4638
(dp4639
g4
(lp4640
S'&default'
p4641
asg6
S'{H@0 - repeatrate}\n\nSpecifies the delay in milliseconds between automatic counts while an\narrow button is held down. The &default is 50.'
p4642
sg8
(lp4643
sg10
(lp4644
S'2006/03/19'
p4645
asg12
I0
sg13
(lp4646
sg15
(lp4647
ssS'wid.pmw.counter.opt.buttonaspect'
p4648
(dp4649
g4
(lp4650
sg6
S">option.pmw.buttonaspect.generic 'Counter', 'arrow button'"
p4651
sg8
(lp4652
sg10
(lp4653
sg12
I0
sg13
(lp4654
sg15
(lp4655
ssS'option.setgrid.generic'
p4656
(dp4657
g4
(lp4658
sg6
S"{H@0 - setgrid}\n\nSpecifies a boolean value that determines whether this widget controls the\nresizing grid for its top-level window.\n\nThis option is typically used in Listbox and Text widgets, where the\ninformation in the widget has a natural size (the size of a character) and it\nmakes sense for the window's dimensions to be integral numbers of these\nunits. These natural window sizes form a grid. If the setGrid option is set\nto true then the widget will communicate with the window manager so that when\nthe user interactively resizes the top-level window that contains the widget,\nthe dimensions of the window will be displayed to the user in grid units and\nthe window size will be constrained to integral numbers of grid units.\n\nAt least, that's the theory. In fact when we tried this option it caused the\ntop-level window to balloon to a larger than expected size for no obvious\nreason. If you know all about this one, get in touch at\n\n$mailto"
p4659
sg8
(lp4660
sg10
(lp4661
S'2005/04/04'
p4662
asg12
I0
sg13
(lp4663
sg15
(lp4664
ssS'wid.tkinter.listbox.opt.selectmode'
p4665
(dp4666
g4
(lp4667
sg6
S'>option.selectmode.generic "Listbox"'
p4668
sg8
(lp4669
sg10
(lp4670
sg12
I0
sg13
(lp4671
sg15
(lp4672
ssS'wid.tkinter.text.opt.insertofftime'
p4673
(dp4674
g4
(lp4675
sg6
S'>option.insertofftime.generic "Text"'
p4676
sg8
(lp4677
sg10
(lp4678
sg12
I0
sg13
(lp4679
sg15
(lp4680
ssS'module.rename.dialog'
p4681
(dp4682
g4
(lp4683
S'&module'
p4684
aS'&project'
p4685
aS'&module'
p4686
aS'&module'
p4687
aS'&project'
p4688
aS'&module'
p4689
asg6
S'{HModule rename dialog}\n\nThis dialog is about changing the name of the current &module within the\ncurrent &project. Enter the new name for the &module (which must be different\nfrom any existing &module of the project) and press OK.\n\nThe next time you make the &project the &module will be saved under the new\nname.'
p4690
sg8
(lp4691
sg10
(lp4692
S'2005/05/25'
p4693
asg12
I0
sg13
(lp4694
sg15
(lp4695
ssS'code-edit.search-menu'
p4696
(dp4697
g4
(lp4698
S'&code editor'
p4699
aS'=code-edit.action.search'
p4700
aS'=code-edit.action.searchagain'
p4701
aS'=code-edit.searchandreplace'
p4702
aS'=code-edit.findmatch'
p4703
asg6
S'{HCode Editor - Search Menu}\n\nThe &code editor menu for search operations.\n\nt {lSearch=code-edit.action.search} - Initiate a new search.\nt {lSearch again=code-edit.action.searchagain} - Continue an existing search.\nt {lSearch and replace=code-edit.searchandreplace} - Initiate a search and\n  replace operation.\n\nt {lFind matching=code-edit.findmatch} Find matching character.'
p4704
sg8
(lp4705
sg10
(lp4706
S'2005/04/15'
p4707
asg12
I0
sg13
(lp4708
sg15
(lp4709
S'Code editor - Search Menu'
p4710
assS'pack.option.fill'
p4711
(dp4712
g4
(lp4713
S'=pack.option.anchor'
p4714
aS'=pack.option.anchor'
p4715
aS'=pack.option.anchor'
p4716
asg6
S'{HPack Option - fill}\n\nThis option is concerned with the widget being stretched to fit within the\nspace allocated for it.\n\no {gNo}\n   The widget is rendered at it\'s natural size. If it is smaller than the\n  space allocated, it is placed within that space as directed by the pack\n  option {l"anchor"=pack.option.anchor}.\n\no {gBoth}\n   The widget is stretched in both directions to fill the space allocated for\n  it.\n\no {gX}\n   The widget is stretched in the X (horizontal) direction to fill the full\n  width the space allocated for it. Vertically the widget is drawn at it\n  natural size and is placed within the height allocated to its as directed\n  by the pack option {l"anchor"=pack.option.anchor}.\n\no {gY}\n   The widget is stretched in the Y (vertical) direction to fill the full\n  height of the space allocated for it. Horizontally the widget is drawn at\n  its natural size and is placed within the width allocated to it as directed\n  by the pack option {l"anchor"=pack.option.anchor}.'
p4717
sg8
(lp4718
sg10
(lp4719
S'2005/05/19'
p4720
asg12
I0
sg13
(lp4721
sg15
(lp4722
ssS'bindassist.handlerempty'
p4723
(dp4724
g4
(lp4725
S'&event'
p4726
aS'&handler'
p4727
aS'&binding'
p4728
aS'&event'
p4729
aS'&handler'
p4730
aS'&event'
p4731
aS'&bind assist'
p4732
aS'&binding'
p4733
aS'&binding'
p4734
aS'&binding'
p4735
aS'&binding'
p4736
aS'&handler'
p4737
aS'&event'
p4738
aS'&recommend'
p4739
aS'&handler'
p4740
asg6
S'{HBind Assist - Handler name empty on close}\n\nYou just clicked on {gOK} but the &event &handler name is empty.\n\nTo have a valid &binding, a non-blank &event string and the name of the &handler for\nthe &event are required.\n\n o To exit the &Bind Assist without changing any &bindings, use the {gCancel} button.\n\n o If you were about to create a new &binding but changed your mind, use the {gCancel}\n   button\n\n o If you want to delete the current &binding, use the {gDelete} button.\n\n o To make this a valid &binding, enter or select the name of the &handler for this\n   &event in the combo box just above the buttons. We &recommend you use the form\n   {gon_widget_whatever} for the name of the &handler.'
p4741
sg8
(lp4742
sg10
(lp4743
S'2005/03/15'
p4744
asg12
I0
sg13
(lp4745
sg15
(lp4746
ssS'option.variable.generic'
p4747
(dp4748
g4
(lp4749
S'&control variable'
p4750
aS'=option.onvalue.generic'
p4751
asg6
S'{H@0 - variable}\n\nThe &control variable that tracks the current state of the @0.\n\nNormally this is an {gIntVar} and {g0} means cleared and {g1} means set.\nHowever, this can also be of type String or Float if if the corresponding\n{gonvalue} and {goffvalue} options are set accordingly.\n\n{Lonvalue=option.onvalue.generic}'
p4752
sg8
(lp4753
sg10
(lp4754
S'2005/04/15'
p4755
asg12
I0
sg13
(lp4756
sg15
(lp4757
ssS'wid.tkinter.label.opt.background'
p4758
(dp4759
g4
(lp4760
S'&color'
p4761
asg6
S">option.background.generic 'Label'"
p4762
sg8
(lp4763
sg10
(lp4764
sg12
I0
sg13
(lp4765
sg15
(lp4766
ssS'wid.pmw.timecounter.arrow'
p4767
(dp4768
g4
(lp4769
sg6
S'{HTimeCounter - @0@2arrow}\n\nThe arrow button used for @1rementing the @2 field. Its component group is\nArrow.'
p4770
sg8
(lp4771
sg10
(lp4772
S'2006/03/23'
p4773
asg12
I0
sg13
(lp4774
sg15
(lp4775
ssS'wid.tkinter.checkbutton.opt.textvariable'
p4776
(dp4777
g4
(lp4778
sg6
S'>option.textvariable.generic "Checkbutton"'
p4779
sg8
(lp4780
sg10
(lp4781
sg12
I0
sg13
(lp4782
sg15
(lp4783
ssS'wid.tkinter.checkbutton.opt.takefocus'
p4784
(dp4785
g4
(lp4786
sg6
S'>option.takefocus.generic "Checkbutton"'
p4787
sg8
(lp4788
sg10
(lp4789
sg12
I0
sg13
(lp4790
sg15
(lp4791
ssS'option-cursors'
p4792
(dp4793
g4
(lp4794
sg6
S"{hCursors}\n\nThere are a whole lot of available cursors, although if there is a way of\ncreating your own cursors, I'm not aware of it.\n\nThe cursor option can be set for any widget, including the root window. The\navailable cursors are:\n\nt {fX_cursor\n   arrow\n   based_arrow_down\n   based_arrow_up\n   boat\n   bogosity\n   bottom_left_corner\n   bottom_right_corner\n   bottom_side\n   bottom_tee\n   box_spiral\n   center_ptr\n   circle\n   clock\n   coffee_mug\n   cross\n   cross_reverse\n   crosshair\n   diamond_cross\n   dot\n   dotbox\n   double_arrow\n   draft_large\n   draft_small\n   draped_box\n   exchange\n   fleur\n   gobbler\n   gumby\n   hand1\n   hand2\n   heart\n   icon\n   iron_cross\n   left_ptr\n   left_side\n   left_tee\n   leftbutton\n   ll_angle\n   lr_angle\n   man\n   middlebutton\n   mouse\n   pencil\n   pirate\n   plus\n   question_arrow\n   right_ptr\n   right_side\n   right_tee\n   rightbutton\n   rtl_logo\n   sailboat\n   sb_down_arrow\n   sb_h_double_arrow\n   sb_left_arrow\n   sb_right_arrow\n   sb_up_arrow\n   sb_v_double_arrow\n   shuttle\n   sizing\n   spider\n   spraycan\n   star\n   target\n   tcross\n   top_left_arrow\n   top_left_corner\n   top_right_corner\n   top_side\n   top_tee\n   trek\n   ul_angle\n   umbrella\n   ur_angle\n   watch\n   xterm}"
p4795
sg8
(lp4796
S'cursor'
p4797
asg10
(lp4798
S'2005/02/21'
p4799
asg12
I0
sg13
(lp4800
sg15
(lp4801
S'Cursors'
p4802
assS'wid.pmw.menubar.opt.hull'
p4803
(dp4804
g4
(lp4805
sg6
S">option.pmw.hull.generic 'MenuBar'"
p4806
sg8
(lp4807
sg10
(lp4808
sg12
I0
sg13
(lp4809
sg15
(lp4810
ssS'wid.tkinter.radiobutton.opt.indicatoron'
p4811
(dp4812
g4
(lp4813
sg6
S'>option.indicatoron.generic "Radiobutton"'
p4814
sg8
(lp4815
sg10
(lp4816
sg12
I0
sg13
(lp4817
sg15
(lp4818
ssS'wid.pmw.entryfield.opt.pyclass'
p4819
(dp4820
g4
(lp4821
sg6
S'>option.pyclass.generic "EntryField"'
p4822
sg8
(lp4823
sg10
(lp4824
sg12
I0
sg13
(lp4825
sg15
(lp4826
ssS'wid.pmw.scrolledframe.opt.hull'
p4827
(dp4828
g4
(lp4829
sg6
S">option.pmw.hull.generic 'ScrolledFrame'"
p4830
sg8
(lp4831
sg10
(lp4832
sg12
I0
sg13
(lp4833
sg15
(lp4834
ssS'tutorial.6'
p4835
(dp4836
g4
(lp4837
S'&widget buffet'
p4838
aS'&trash bin'
p4839
aS'&duplicator'
p4840
aS'&parking lot'
p4841
aS'&module'
p4842
aS'&module'
p4843
aS'&module'
p4844
aS'=tutorial.5'
p4845
asg6
S'{HTutorial - page 6}\n\nNow when you run the project you get the label and button on the left and the text widget on the right. How much\nspace they get is controlled by the pack option settings in the usual Tkinter manner.\n\nYou can move frame lines by clicking and dragging them.\n\nIf you right click within a frame (other than over a widget) a menu pops up frome where you can do various things,\nthe most important of which is delete the frame.\n\nThe &widget buffet has tabs for both the Tkinter and the Pmw widgets.\n\n Widgets other than frames are deleted by dragging them down to the &trash bin {P$imgpr-trash.ppm}.\n You can use the &duplicator {P$imgpr-duplicator.ppm} to make copies of existing widgets.\n The &parking lot {P$imgpr-parking.ppm} is handy for temporarily storing widgets. You can move them between forms or\neven modules by putting it on the parking lot, selecting the target form and then moving the widget from the parking\nlot to the new form. Widgets on the parking lot when your project is saved will still be there when the project is\nre-loaded.\n\n{BThe main code area}\n\nEach &module has, in addition to the code associated with each form, a "{gMain code area}" which is where you put\nany code that pertains to the entire module and not just one particular form. The Main Code Area of the Main Module\nof a project also holds the code (which is automatically provided when the project is first created) to do necessary\nhousekeeping and establish the main loop.\n\n{bForms}\n\nA &module can contain many forms. Use the main menu "{GForms}" button to create and delete forms. You select the\nform to see by clicking on it\'t tab just below the main menu area.\n\n{bModules}\n\nA project always has a main &module but it can have additional modules as well. Use the main menu "{GModules}"\nbutton to create, delete, rename and select modules.\n\n{bWrapup}\n\nThis tutorial should have at least gotten your feet wet as far as starting to use $$ goes. Feel free to experiment.\nThere are a whole lot of help messages so use them to find out about features of interest. Using the {GIndex}\nfeature at the top of the help window is a good way to do this. You can also get to the index feature directly via\nthe main menu {gHelp->SearchHelpIndex} choice.\n\n{LPrevious Tutorial Page=tutorial.5}  <==='
p4846
sg8
(lp4847
sg10
(lp4848
S'2006/03/17'
p4849
asg12
I0
sg13
(lp4850
sg15
(lp4851
ssS'tutorial.4'
p4852
(dp4853
g4
(lp4854
S'=bindassist.name-suggestion'
p4855
aS'&bind editor'
p4856
aS'&bind editor'
p4857
aS'=tutorial.3'
p4858
aS'=tutorial.5'
p4859
asg6
S'{HTutorial - page 4}\n\nUp pops the Bind Assist Dialog. We\'re going to do things the easy way so click on the {gEvent Wizard} button. We\nwant our button widget to respond when the user has clicked and released so select the radio-button marked\n{gButtonRelease} then press {gEnter}. We want "single click", "button one" and "no modifiers" so press {gEnter}\nthree more times although feel free to do this slowly and take a look at the choices and possibly click on help as\nyou go. Most people find that after using the Event Wizard a couple of times they can roar through it pretty fast\ngoing click, Enter, click Enter.\n\nWe now have a valid event string "{g<ButtonRelease-1>}" and the Wizard had {Lsuggested=bindassist.name-suggestion}\n"{Gon_Button1_ButRel_1}" as the name of the handler.  Click on the {gOK} button to accept the suggested handler name\nand create the binding. An empty handler is created and placed in the code editor.\n\nAt this point you generally want to go into the code editor and write code for the handler. Right now we only have\none event handler so finding it is easy. In a form with a lot of handlers it is harder. Two notes:\n\n n To make handlers easy to find $$ keep them in alphabetic order in the code.\n n Double-clicking on an entry in the &bind editor takes you directly to that entries code in the code editor.\nSo, go ahead and double-click on the new entry in the &bind editor (but not on the {P$imgpr-help-Assist.ppm} button\n- that\'s how you modify or delete a binding).\n\nThe cursor should now be placed on the first line of the body of the event handler:\n\n{P$imgpr-help-HandlerFragment.ppm}\n\nNote that the start of the header line of the handler (everything from {gdef} through {gself}) is protected text but\nthe argument(s) are not - you can change them if it suits your purpose.\n\nThe body of a newly created event handler consists solely of a "{gpass}" statement, giving you a method which exists\nbut does nothing; you get to put in whatever code you want. In this case we want to replace the pass line with one\nwhich says "{gself.quit()}".\n\n{LPrevious Tutorial Page=tutorial.3}  <===>  {LNext Tutorial Page=tutorial.5}'
p4860
sg8
(lp4861
sg10
(lp4862
S'2006/03/17'
p4863
asg12
I0
sg13
(lp4864
sg15
(lp4865
ssS'tutorial.5'
p4866
(dp4867
g4
(lp4868
S'&layout editor'
p4869
aS'&pack editor'
p4870
aS'&layout editor'
p4871
aS'&frame'
p4872
aS'&widgetator'
p4873
aS'&select the frame'
p4874
aS'=tutorial.4'
p4875
aS'=tutorial.6'
p4876
asg6
S'{HTutorial - page 5}\n\nNow when you run the project you have a proper "Hello World" window complete with the label and a quit button. You\nmight experiment with placing the Label and Button at various locations in the &layout editor and seeing where they\nshow up when you run the project. But put them either one above the other or one next to the other; for more\ncomplicated arrangements you add additional frames which we\'ll get to Real Soon now.\n\nIf you call up the &pack editor for the Label or Button you can mess around with the pack settings as shown there.\nNote that the pack "{gside}" option that you know and love is {inot} one of the pack options shown. It is set\nautomatically by $$ depending on where you place the widget within the &layout editor.\n\n{bFrames}\n\nAs soon as you want a layout more complicated than several widgets in a row then &frames are in order. Adding a\nframe line to divide a portion of the layout area into two frames is easy:\n\no Move the cursor to about where you want the line (but not over a widget), click and hold the left mouse button\n  then drag a bit. Drag down to get a vertical line, drag right to get a horizontal line. While continuing to hold\n  the left button down, drag the line to where you want it then let go. Presto. You have two new frames.\n\nFrames are a kind of widget and you can see and change their options over in the &widgetator. You can easily create\nframes within frames. If a frame is the selected widget it has a grey outline just inside it\'s border. There are\nways to &select the frame you want.\n\nCreate a vertical frame line, move the Label and Button so they are one above each other in the left frame and\ncreate a "{gText}" widget in the right frame. It should look something like this only bigger (we shrank ours so it\nwould fit here):\n\n{P$imgpr-help-WithFrame.ppm}\n\n{LPrevious Tutorial Page=tutorial.4}  <===> {LNext Tutorial Page=tutorial.6}'
p4877
sg8
(lp4878
sg10
(lp4879
S'2006/03/17'
p4880
asg12
I0
sg13
(lp4881
sg15
(lp4882
ssS'tutorial.2'
p4883
(dp4884
g4
(lp4885
S'&code editor'
p4886
aS'&layout editor'
p4887
aS'=howto.swap.code.layout'
p4888
aS'&form'
p4889
aS'&code editor'
p4890
aS'&layout editor'
p4891
aS'&layout editor'
p4892
aS'&widget buffet'
p4893
aS'&a widget'
p4894
aS'&widget buffet'
p4895
aS'=tutorial'
p4896
aS'=tutorial.3'
p4897
asg6
S'{HTutorial - page 2}\n\nThe project you just created is in fact ready to run. From the {gProject} menu click on {gSave+Build+Run} which\nsaves it, builds it and runs it. The run project appears as a windown named {gHello} and since you haven\'t put any\nwidgets or code in the project about all you can do is use the window manager to close it. But it does run.\n\nLets take a quick look at the &code editor which timeshares space with the &layout editor. There are {Lthree\nways=howto.swap.code.layout} to swap between these two editors but for now just press the\n{g$tActionFormSwapCodeLayout} key. Bam. You are in the code editor for &form "{gHello}". Note that the code to\ncreate the form is already there and is on a different colored background. The different background indicates code\nthat has been generated automatically by $$. You can look at this code, you can step the cursor through it but you\ncan\'t change it. To find out about the features of the &code editor, click on either the {gEdit} or {gSearch} menu\nbuttons and then on the {gHelp} choice at the bottom. Once you are done with that, press\n{g$tActionFormSwapCodeLayout} again to get back to the &layout editor.\n\nNow to make your project a bit more interesting. Down at the bottom of the &layout editor is the &widget buffet,\npart of which should look something like this:\n\n{P$imgpr-help-WidgetBuffet.ppm}\n\nTo add &a widget to your form you drag it from the &widget buffet onto your form. If you are wondering which widget\nis which, put the cursor over any of them and the name of that kind of widget will pop up.\n\nGo ahead and drag a {gLabel} widget from the buffet and place it near the top of the layout area and about centered\nleft-to-right. If you pop into the code editor for a second you\'ll see that the code to create the Label widget has\nalready been generated.\n\n{LPrevious Tutorial Page=tutorial}  <===>  {LNext Tutorial Page=tutorial.3}'
p4898
sg8
(lp4899
sg10
(lp4900
S'2006/03/16'
p4901
asg12
I0
sg13
(lp4902
sg15
(lp4903
ssS'code-edit.deleteline'
p4904
(dp4905
g4
(lp4906
S'&editor actions'
p4907
asg6
S'{HCode editor - Delete line}\n\n Key:   $tActionDeleteLine\n Menu: {fEdit/Delete line}\n\nThe line which contains the cursor is deleted.\n\nNote that this function pays no attention to the current selection. If you\nwant to delete the current selection use the {gDelete} key. The whole point\nof {bthis} editor action is to allow you to easily delete a single line without\nhaving to select it first.\n\nCode &editor actions'
p4908
sg8
(lp4909
sg10
(lp4910
S'2006/04/02'
p4911
asg12
I0
sg13
(lp4912
sg15
(lp4913
S'Code editor - delete line'
p4914
assS'wid.pmw.optionmenu.opt.menu'
p4915
(dp4916
g4
(lp4917
sg6
S'{HOptionMenu - menu}\n\nThe popup menu displayed when the menubutton is pressed.'
p4918
sg8
(lp4919
sg10
(lp4920
S'2006/03/21'
p4921
asg12
I0
sg13
(lp4922
sg15
(lp4923
ssS'wid.pmw.scrolledlistbox.opt.usehullsize'
p4924
(dp4925
g4
(lp4926
sg6
S">option.pmw.usehullsize.generic 'ScrolledListBox'"
p4927
sg8
(lp4928
sg10
(lp4929
sg12
I0
sg13
(lp4930
sg15
(lp4931
ssS'wid.tkinter.menubutton.opt.state'
p4932
(dp4933
g4
(lp4934
sg6
S'>option.state.generic "Menubutton"'
p4935
sg8
(lp4936
sg10
(lp4937
sg12
I0
sg13
(lp4938
sg15
(lp4939
ssS'wid.tkinter.radiobutton.opt.bitmap'
p4940
(dp4941
g4
(lp4942
sg6
S'>option.bitmap.generic "Radiobutton"'
p4943
sg8
(lp4944
sg10
(lp4945
sg12
I0
sg13
(lp4946
sg15
(lp4947
ssS'font.unavailable'
p4948
(dp4949
S'Links'
p4950
(lp4951
sS'Text'
p4952
S'{HUnavailable Font}\n\nHi, I\'m the Font Assist. The last time this widget was edited, it had font "@0" specified however, I\'m not aware of\nany font named @0 on this computer.\n\nYou can press {gCancel} to leave the specification of the unavailable font as-is, you can select a font from\nthose that are available on this computer or you can ask for the default font, or enter your own font code.'
p4953
sS'Hotlinks'
p4954
(lp4955
sS'Comments'
p4956
(lp4957
S'2014-02-27'
p4958
asS'Wip'
p4959
I0
sS'Plurals'
p4960
(lp4961
sS'Abstracts'
p4962
(lp4963
ssS'wid.pmw.scrolledtext.opt.name'
p4964
(dp4965
g4
(lp4966
sg6
S">option.name.generic 'ScrolledText'"
p4967
sg8
(lp4968
sg10
(lp4969
sg12
I0
sg13
(lp4970
sg15
(lp4971
ssS'wid.pmw.timecounter.opt.upsecondarrow'
p4972
(dp4973
g4
(lp4974
sg6
S">wid.pmw.timecounter.arrow 'up','inc','second'"
p4975
sg8
(lp4976
sg10
(lp4977
sg12
I0
sg13
(lp4978
sg15
(lp4979
ssS'wid.tkinter.label.opt.activebackground'
p4980
(dp4981
g4
(lp4982
S'&color'
p4983
aS'&color'
p4984
asg6
S'>option.activebackground.generic "Label"'
p4985
sg8
(lp4986
sg10
(lp4987
sg12
I0
sg13
(lp4988
sg15
(lp4989
ssS'wid.pmw.timecounter.opt.frame'
p4990
(dp4991
g4
(lp4992
sg6
S'{HTimeCounter - frame}\n\nIf the {glabel} component has been created (that is, the {glabelpos}  option is not\n{gNone}), the frame component is created to act as the container of the entry\nfields and arrow buttons. If there is no {glabel} component, then no {gframe}\ncomponent is created and the {ghull} component acts as the container. In either\ncase the border around the container of the entry fields and arrow buttons\nwill be raised (but not around the label).'
p4993
sg8
(lp4994
sg10
(lp4995
S'2006/03/24'
p4996
asg12
I0
sg13
(lp4997
sg15
(lp4998
ssS'wid.tkinter.menubutton.opt.direction'
p4999
(dp5000
g4
(lp5001
sg6
S'>option.direction.generic "Menubutton"'
p5002
sg8
(lp5003
sg10
(lp5004
sg12
I0
sg13
(lp5005
sg15
(lp5006
ssS'howto.delete.event.handler'
p5007
(dp5008
g4
(lp5009
S'&maintained'
p5010
aS'&event'
p5011
aS'&handler'
p5012
aS'&event'
p5013
aS'&handler'
p5014
asg6
S'{HHow to delete an event handler}\n\nTo delete a $$ &maintained &event &handler:\n\n o Find the event handler in the code editor.\n\n o Right click over the header (any of the text on a different colored\n   background) of the &event &handler.\n\n o Choose the {gDelete} item of the popup menu.'
p5015
sg8
(lp5016
sg10
(lp5017
S'2006/02/14'
p5018
asg12
I0
sg13
(lp5019
sg15
(lp5020
S'How to: Delete an event handler'
p5021
assS'wid.tkinter.menu.opt.type'
p5022
(dp5023
g4
(lp5024
sg6
S'>option.type.generic "Menu"'
p5025
sg8
(lp5026
sg10
(lp5027
sg12
I0
sg13
(lp5028
sg15
(lp5029
ssS'wid.tkinter.checkbutton.opt.highlightthickness'
p5030
(dp5031
g4
(lp5032
sg6
S'>option.highlightthickness.generic "Checkbutton"'
p5033
sg8
(lp5034
sg10
(lp5035
sg12
I0
sg13
(lp5036
sg15
(lp5037
ssS'wid.pmw.counter.opt.label'
p5038
(dp5039
g4
(lp5040
sg6
S">option.pmw.label.generic 'Counter'"
p5041
sg8
(lp5042
sg10
(lp5043
sg12
I0
sg13
(lp5044
sg15
(lp5045
ssS'formseedialog'
p5046
(dp5047
g4
(lp5048
S'&form'
p5049
aS'&layout area'
p5050
aS'&form'
p5051
aS'&module'
p5052
aS'&form'
p5053
aS'&layout area'
p5054
aS'&form'
p5055
aS'&form'
p5056
aS'&form'
p5057
aS'&form'
p5058
aS'&module'
p5059
aS'&form'
p5060
aS'&form'
p5061
asg6
S'{HSelecting which forms you want to see}\n\nThe main menu "{gForms/Select forms to see}" choice lets you set which &forms will appear in\nthe tabs at the top of the &layout area.\n\nAs you add &forms to a &module, each new &form gets it\'s own tab at the top of the &layout\narea. If you have a lot of &forms then the tabs get crowded. Since it is unlikely that you\nwill be working on every &form all the time, this menu item lets you select which &forms\nwill and will not have a tab.\n\nA menu showing the name of every &form in the current &module pops up. Select the\ncheckbutton next to each &form that you want to have a tab, and deselect the checkbutton for\nall other &forms. When you press {gOK} the tabs will be adjusted to reflect your request.'
p5062
sg8
(lp5063
sg10
(lp5064
S'2005/05/23'
p5065
asg12
I0
sg13
(lp5066
sg15
(lp5067
S'How to: Select which forms have a tab at the top of the layout area'
p5068
assS'wid.tkinter.frame.opt.pyclass'
p5069
(dp5070
g4
(lp5071
sg6
S'>option.pyclass.generic "Frame"'
p5072
sg8
(lp5073
sg10
(lp5074
sg12
I0
sg13
(lp5075
sg15
(lp5076
ssS'wid.tkinter.frame.opt.takefocus'
p5077
(dp5078
g4
(lp5079
sg6
S'>option.takefocus.generic "Frame"'
p5080
sg8
(lp5081
sg10
(lp5082
sg12
I0
sg13
(lp5083
sg15
(lp5084
ssS'wid.tkinter.button.opt.padx'
p5085
(dp5086
g4
(lp5087
sg6
S'>option.padx.generic "Button", "text"'
p5088
sg8
(lp5089
sg10
(lp5090
sg12
I0
sg13
(lp5091
sg15
(lp5092
ssS'wid.tkinter.button.opt.pady'
p5093
(dp5094
g4
(lp5095
sg6
S'>option.pady.generic "Button", "text"'
p5096
sg8
(lp5097
sg10
(lp5098
sg12
I0
sg13
(lp5099
sg15
(lp5100
ssS'wid.pmw.scrolledcanvas.opt.horizscrollbar'
p5101
(dp5102
g4
(lp5103
sg6
S'{HScrolledCanvas - horizscrollbar}\n\nThe horizontal scrollbar. Its component group is {bScrollbar}.'
p5104
sg8
(lp5105
sg10
(lp5106
S'2006/03/22'
p5107
asg12
I0
sg13
(lp5108
sg15
(lp5109
ssS'option-relief'
p5110
(dp5111
g4
(lp5112
sg6
S'{HRelief}\n\nThe type of border to draw around a widget or widget element. Can be one of:\n\n o {GRaised}\n o {GSunken}\n o {GGroove}\n o {GRidge}\n o {GFlat}'
p5113
sg8
(lp5114
S'relief'
p5115
asg10
(lp5116
S'2005/02/26'
p5117
asg12
I0
sg13
(lp5118
sg15
(lp5119
S'The widget Relief option'
p5120
assS'buffet.widget.optionmenu'
p5121
(dp5122
g4
(lp5123
sg6
S'>buffet.widget.generic2 "Pmw.OptionMenu", \'\', \'wid.pmw.optionmenu.overview\''
p5124
sg8
(lp5125
sg10
(lp5126
sg12
I0
sg13
(lp5127
sg15
(lp5128
ssS'wid.tkinter.label.opt.state'
p5129
(dp5130
g4
(lp5131
sg6
S'>option.state.generic "Label"'
p5132
sg8
(lp5133
sg10
(lp5134
sg12
I0
sg13
(lp5135
sg15
(lp5136
ssS'option-color'
p5137
(dp5138
g4
(lp5139
S'=colors'
p5140
asg6
S'{HColors}\n\nColors can be specified as:\n\n o A color name, or\n o A numeric color code.\n\n{BColor names}\n\nThe basic named colors are white, black, red, green, blue, cyan, yellow and magenta but there is a huge number\nof other named colors; click {lhere=colors} for details.\n\n{BNumeric colors}\n\nNumeric colors consist of a number sign followed one through four hexadecimal digits for each of red, green and blue\nthus:\n\n t {f#rgb         } - four bits per color\n t {f#rrggbb      } - eight bits per color\n t {f#rrrgggbbb   } - twelve bits per color\n t {f#rrrrggggbbbb} - sixteen bits per color\n\nAround here eight bits per color is the popular way to go.'
p5141
sg8
(lp5142
S'color'
p5143
asg10
(lp5144
S'2005/02/24'
p5145
asg12
I0
sg13
(lp5146
sg15
(lp5147
S'Colors'
p5148
assS'wid.tkinter.checkbutton.opt.relief'
p5149
(dp5150
g4
(lp5151
sg6
S'>option.relief.generic "Checkbutton"'
p5152
sg8
(lp5153
sg10
(lp5154
sg12
I0
sg13
(lp5155
sg15
(lp5156
ssS'wid.tkinter.canvas.opt.closeenough'
p5157
(dp5158
g4
(lp5159
sg6
S'>option.closeenough.generic "Canvas"'
p5160
sg8
(lp5161
sg10
(lp5162
sg12
I0
sg13
(lp5163
sg15
(lp5164
ssS'wid.pmw.messagebar.opt.labelpos'
p5165
(dp5166
g4
(lp5167
sg6
S">option.pmw.labelpos.generic 'MessageBar'"
p5168
sg8
(lp5169
sg10
(lp5170
sg12
I0
sg13
(lp5171
sg15
(lp5172
ssS'code-edit.action.searchagain'
p5173
(dp5174
g4
(lp5175
S'=search.dialog'
p5176
aS'&editor actions'
p5177
asg6
S'{HCode editor - Search again}\n\n Key:   $tActionSearchAgain\n Menu: {fSearch/Search again}\n\nRepeats an existing search, looking for the next occurrence of the search string.\n\nIf there was no previous search, then this action puts up a\n{ldialog=search.dialog} to initiate a new search.\n\nCode &editor actions.'
p5178
sg8
(lp5179
sg10
(lp5180
S'2005/04/07'
p5181
asg12
I0
sg13
(lp5182
sg15
(lp5183
S'Code editor - search again'
p5184
assS'wid.tkinter.label.opt.justify'
p5185
(dp5186
g4
(lp5187
sg6
S'>option.justify.generic "Label"'
p5188
sg8
(lp5189
sg10
(lp5190
sg12
I0
sg13
(lp5191
sg15
(lp5192
ssS'wid.tkinter.button.opt.name'
p5193
(dp5194
g4
(lp5195
sg6
S'>option.name.generic "Button"'
p5196
sg8
(lp5197
sg10
(lp5198
sg12
I0
sg13
(lp5199
sg15
(lp5200
ssS'code-edit.action.goto'
p5201
(dp5202
g4
(lp5203
S'&editor actions'
p5204
asg6
S'{HCode editor - Goto}\n\n Key:   $tActionGoto\n Menu: {fEdit/Goto}\n\nPuts up a dialog where you can enter a line number to be taken to that line in\nthe file. If you enter a number larger than the number of lines in the file you\nare taken to the last line of the file.\n\nCode &editor actions'
p5205
sg8
(lp5206
sg10
(lp5207
S'2005/04/06'
p5208
asg12
I0
sg13
(lp5209
sg15
(lp5210
S'Code editor - goto linenumber'
p5211
assS'option-bitmaps'
p5212
(dp5213
g4
(lp5214
S'&image'
p5215
asg6
S'{HBitmaps}\n\nSome widgets (eg Buttons, Labels etc,) can display a bitmap. Note that\nbitmaps and &images are different entities although they do a similar job.\n\nThere are two ways to specify a bitmap for your widget:\n\nn Enter the name of a standard system bitmap from this list: {f\n\n  o error\n  o gray75\n  o gray50\n  o gray25\n  o gray12\n  o hourglass\n  o info\n  o questionhead\n  o question\n  o warning}\n\nn Enter an at-sign followed by the path to an {g.xbm} (X bitmap) file\n  containing the bitmap to be displayed, for example:\n\n  {f@/usr/X11R6/include/X11/bitmaps/card.xbm}'
p5216
sg8
(lp5217
S'bitmap'
p5218
asg10
(lp5219
S'2005/02/22'
p5220
asg12
I0
sg13
(lp5221
sg15
(lp5222
S'Bitmaps'
p5223
assS'search.replace-dialog'
p5224
(dp5225
g4
(lp5226
sg6
S'{HCode Editor - Search and Replace Dialog}\n\nUse this to search for and replace one or many instances of a text string.\n\nType the target text and the text to replace it with into the Entry areas\nnear the top.\n\no {GFrom first line}  If selected, then we start searching from the first\n  line of text. If this is not selected then the search starts from the\n  current cursor position. Note that if the {gbackwards} choice is selected\n  then this choice becomes "from last line".\n\no {GCase sensitive}  Normally searches are case insensitive. Check this if\n  you want the search to be case sensitive.\n\no {GBackwards}  Normally searches run in the forward direction. Check this if\n  you want the search to run in the backward direction. If this choice is\n  selected then the "from first line" choice becomes the "from last line"\n  choice.\n\no {GRegular expression}  Normally search looks for a simple match with the\n  specifed search string. Check this choice to search using a sub-set of\n  regular expressions. Features supported are:\n\n  t {G. ^ $ [}c1...{G] (}...{g) * + ?  }e1 {G|} e2\n\no {GPrompt on replace}  If this is selected you are prompted each time before\n  text is replaced. If this is not selected then text is replaced without you\n  being prompted.\n\no {GReplace all}  Normally search and replace will only replace one instance\n  of the target text with the replacement text. If this is checked then we\n  search for all instances between the starting and ending points. If\n  prompting is enabled then you get to choose on a case-by-case basis if each\n  matching string is replaced. If prompting is not enabled then all matching\n  instances in the search area are replaced and a message appears showing the\n  number of replacements done.\n\nNote that search-and-replace ignores all system generated text (the text\nwhich is on a different color background).'
p5227
sg8
(lp5228
sg10
(lp5229
sg12
I0
sg13
(lp5230
sg15
(lp5231
S'Code editor - Search and Replace Dialog'
p5232
assS'wid.tkinter.listbox.opt.exportselection'
p5233
(dp5234
g4
(lp5235
sg6
S'>option.exportselection.generic "Listbox"'
p5236
sg8
(lp5237
sg10
(lp5238
sg12
I0
sg13
(lp5239
sg15
(lp5240
ssS'command.orphan.handler'
p5241
(dp5242
g4
(lp5243
S'&command option'
p5244
aS'&event'
p5245
aS'&handler'
p5246
aS'&event'
p5247
aS'&handler'
p5248
aS'&maintained'
p5249
aS'&command option'
p5250
aS'&binding'
p5251
aS'&event'
p5252
aS'&handler'
p5253
aS'&event'
p5254
aS'&handler'
p5255
aS'&event'
p5256
aS'&handler'
p5257
aS'&command option'
p5258
aS'&binding'
p5259
aS'&event'
p5260
aS'&handler'
p5261
aS'&event'
p5262
aS'&handler'
p5263
aS'&event'
p5264
aS'&handler'
p5265
aS'&handler'
p5266
aS'&command option'
p5267
aS'&handler'
p5268
asg6
S'{HOrphan event handler}\n\nYou just changed a &command option which used to refer to the &event &handler\n"@0" so it will now refer to existing &event &handler "@1". I note that no\nother $$ &maintained &command option nor &binding anywhere in the current\nform refers to &event &handler "@0", so it may be redundant. The dialog box\nyou pressed help on is giving you the opportunity to delete &event &handler\n"@0" now.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that)\n  or if you plan to create a new &command option or &binding which will refer\n  to that &Event &handler then clearly you want to choose {GKeep handler}\n  here and retain the &event &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed\n  use for it then you might as well choose {GDelete handler} here and delete\n  the &handler rather than leaving unused code hanging around your form.\n\no If you click on {gCancel} nothing is changed: the &command option remains\n  the same and the &handlers remain the same.'
p5269
sg8
(lp5270
sg10
(lp5271
S'2006/02/04'
p5272
aS'@0 The event handler this option used to refer to'
p5273
aS'@1 The event handler this option will now refer to'
p5274
asg12
I0
sg13
(lp5275
sg15
(lp5276
ssS'wid.pmw.scrolledlistbox.opt.horizscrollbar'
p5277
(dp5278
g4
(lp5279
sg6
S'{HScrolledListBox - horizscrollbar}\n\nThe horizontal scrollbar. Its component group is Scrollbar.'
p5280
sg8
(lp5281
sg10
(lp5282
S'2006/03/23'
p5283
asg12
I0
sg13
(lp5284
sg15
(lp5285
ssS'widget.radiobutton'
p5286
(dp5287
g4
(lp5288
S'&control variable'
p5289
aS'=wid.tkinter.radiobutton.opt.variable'
p5290
aS'&control variable'
p5291
aS'&control variable'
p5292
aS'&new mexico tech'
p5293
asg6
S'{HRadiobuttons}\n\nRadiobuttons are sets of related widgets that allow the user to select only\none of a set of choices. Each radiobutton consists of two parts, the\nindicator and the label:\n\n o The indicator is the diamond-shaped part that turns red in the selected\n   item.\n\n o The label is usually text, although you can use an image or bitmap as the\n   label.\n\n\nIf you prefer, you can dispense with the indicator. This makes the\nradiobuttons look like "push-push" buttons, with the selected entry appearing\nsunken and the rest appearing raised.\n\n\nTo form several radiobuttons into a functional group, create a single\n&control variable and set the {Lvariable\noption=wid.tkinter.radiobutton.opt.variable} of each radiobutton to that\nvariable.\n\nThe &control variable can be either an IntVar or a StringVar. If two or more\nradiobuttons share the same control variable, setting any of them will clear\nthe others.\n\nEach radiobutton in a group must have a unique value option of the same type\nas the &control variable. For example, a group of three radiobuttons might\nshare an IntVar and have values of 0, 1, and 99. Or you can use a StringVar\ncontrol variable and give the radiobuttons value options like "too hot", "too\ncold", and "just right".\n\n$nmt'
p5294
sg8
(lp5295
S'radiobutton'
p5296
asg10
(lp5297
sg12
I0
sg13
(lp5298
sg15
(lp5299
S'Radiobutton'
p5300
assS'wid.pmw.mainmenubar.opt.pyclass'
p5301
(dp5302
g4
(lp5303
sg6
S'>option.pyclass.generic "MainMenuBar"'
p5304
sg8
(lp5305
sg10
(lp5306
sg12
I0
sg13
(lp5307
sg15
(lp5308
ssS'wid.tkinter.checkbutton.opt.highlightcolor'
p5309
(dp5310
g4
(lp5311
sg6
S'>option.highlightcolor.generic "Checkbutton"'
p5312
sg8
(lp5313
sg10
(lp5314
sg12
I0
sg13
(lp5315
sg15
(lp5316
ssS'wid.pmw.buttonbox.opt.label'
p5317
(dp5318
g4
(lp5319
sg6
S">option.pmw.label.generic 'ButtonBox'"
p5320
sg8
(lp5321
sg10
(lp5322
sg12
I0
sg13
(lp5323
sg15
(lp5324
ssS'widgetator.main'
p5325
(dp5326
g4
(lp5327
S'&layout area'
p5328
aS'&layout area'
p5329
aS'&option editor'
p5330
aS'&bind editor'
p5331
aS'&event'
p5332
aS'&pack editor'
p5333
aS'&option editor'
p5334
aS'&bind editor'
p5335
aS'&pack editor'
p5336
asg6
S"{HThe Widgetator}\n\nThe {bwidgetator} is the area on the far left of $$'s screen and, not surprisingly, it is where you get to play with\nthe attributes of widgets.\n\n{gThe Selector:} {P$imgpr-help-Selector.ppm}\n\nt at the top, is for selecting which widget you want to work on. You can either click on the arrow to choose a\n  widget from a dropdown list, or you can type the name of the widget to select into the edit area then press\n  {fenter}. The specified widget will be selected and it will be highlighted in the &layout area so you can see\n  where the selected widget is on the form.\n\n  Note that the selector only lists the widgets of the current form of the current module.\n o To access the attributes of a widget on a different form, first select that from in the &layout area.\n o To access a different module, from the main menu click the {gModules} choice, then use one of the {gModule\n   Select}, {gModule Alternate} or {gModule next} choices.\n\n{gThe Tabs and Resize Knobs:} {P$imgpr-help-WidgetatorTabs.ppm}\n\nt The tabs select which of the three editors is active:\n\n o The {bOptions} tab. Click this to make visible the &option editor which lets you see and edit all the options of\n   the selected widget. The options specified here are the ones that will be in effect when the widget is created.\n\n o The {bBindings} tab. Click this to make visible the &bind editor which lets you see and edit the bindings for the\n   selected widget. Bindings allow you to activate user-written methods in response to &events which happen to a\n   widget.\n\n o The {bPack} tab. Click this to make visible the &pack editor which lets you se and edit the pack related options\n   for the current widget. Note that the main form itself has no pack options because it is a class and any instance\n   of that class has to be packed by your code that creates the class.\n\nt The resize knobs {P$imgpr-msc-resize.ppm} are for changing the column widths in the editors.\n\n{BThe Editing Area}\n\nThe editing area, below the resize knobs, is where the real action takes place and exactly what happens there\ndepends on which editor is active.\n\n o The &Option editor\n o The &Bind editor\n o The &Pack editor"
p5337
sg8
(lp5338
S'widgetator'
p5339
asg10
(lp5340
sg12
I0
sg13
(lp5341
sg15
(lp5342
S'The Widgetator is where you deal with widget options, bindings and packing.'
p5343
assS'wid.pmw.buttonbox.opt.name'
p5344
(dp5345
g4
(lp5346
sg6
S'>option.name.generic "ButtonBox"'
p5347
sg8
(lp5348
sg10
(lp5349
sg12
I0
sg13
(lp5350
sg15
(lp5351
ssS'wid.pmw.radioselect.overview'
p5352
(dp5353
g4
(lp5354
sg6
S'{HWhat is: A RadioSelect widget}\n\nA radio select is a container megawidget which manages a number of buttons.\nThe buttons may be laid out either horizontally or vertically. In single\nselection mode, only one button may be selected at any one time. In multiple\nselection mode, several buttons may be selected at the same time and clicking\non a selected button will deselect it.\n\nThe buttons displayed can be either standard buttons, radio buttons or check\nbuttons. When selected, standard buttons are displayed sunken and radio and\ncheck buttons are displayed with the appropriate indicator color and relief.'
p5355
sg8
(lp5356
sg10
(lp5357
S'2006/03/21'
p5358
asg12
I0
sg13
(lp5359
sg15
(lp5360
S'What is: A RadioSelect widget'
p5361
assS'bind.eventwizard.keyphysical'
p5362
(dp5363
g4
(lp5364
sg6
S'{HBind Event Wizard - Physical Key}\n\nRight now you need to select a single key, and that single key can be ANY of the keys that\nyour operating system knows about including keys that aren\'t normally considered to be\n"actual" keys, like {GAlt, Control, Shift} and {GCapsLock}.\n\nGo ahead and press key you want, after you have closed this help window.\n\nRemember that once you have pressed your key you can see the resulting event string up at\nthe top of the wizard.\n\nIf you hit a wrong key, hit the correct one; you can press as many keys as you like and each\nnew one pressed replaces the previous one pressed.\n\nWhen you are done chosing the key click on {gNext} to continue.\n\nTo change a previous choice, click on the {GBackUp} button.'
p5365
sg8
(lp5366
sg10
(lp5367
S'2005/03/14'
p5368
asg12
I0
sg13
(lp5369
sg15
(lp5370
S'Bind Event Wizard - Physical key'
p5371
assS'option.insertborderwidth.generic'
p5372
(dp5373
g4
(lp5374
S'&dimension'
p5375
asg6
S'{H@0 - insertborderwidth}\n\nA &dimensioned number giving the size of the 3-D border around the insertion cursor.'
p5376
sg8
(lp5377
sg10
(lp5378
S'2005/03/02'
p5379
asg12
I0
sg13
(lp5380
sg15
(lp5381
ssS'dialog-handlerdelete'
p5382
(dp5383
g4
(lp5384
S'&maintained'
p5385
aS'&handler'
p5386
aS'&handler'
p5387
aS'&maintained'
p5388
aS'&binding'
p5389
aS'&maintained'
p5390
aS'&command option'
p5391
aS'&handler'
p5392
asg6
S'{hThe event handler delete dialog}\n\nThis dialog shows how many $$ &maintained bindings (if any) reference the\ncurrent event &handler. If you click on OK then the event &handler is\ndeleted and:\n\n o Any $$ &maintained &bindings which refer to this handler are deleted\n   and\n\n o Any $$ &maintained &command options which refer to this &handler are\n   cleared.'
p5393
sg8
(lp5394
sg10
(lp5395
S'2006/02/05'
p5396
asg12
I0
sg13
(lp5397
sg15
(lp5398
S'The event handler delete dialog'
p5399
assS'code-editor.actions'
p5400
(dp5401
g4
(lp5402
S'=code-edit.action.copy'
p5403
aS'=code-edit.action.copyappend'
p5404
aS'=code-edit.action.copytofile'
p5405
aS'=code-edit.action.cut'
p5406
aS'=code-edit.action.cutappend'
p5407
aS'=code-edit.deleteline'
p5408
aS'=code-edit.action.goto'
p5409
aS'=code-edit.action.indent'
p5410
aS'=code-edit.action.indentblock'
p5411
aS'=code-edit.action.outdentblock'
p5412
aS'=code-edit.action.paste'
p5413
aS'=code-edit.action.pastefile'
p5414
aS'=code-edit.poptolinenumber'
p5415
aS'&remembered line'
p5416
aS'=code-edit.action.pushlinenumber'
p5417
aS'&remembered line'
p5418
aS'=code-editor.colorization'
p5419
aS'=code-edit.action.swapwithtop'
p5420
aS'&remembered line'
p5421
aS'=code-edit.action.search'
p5422
aS'=code-edit.action.searchagain'
p5423
aS'=code-edit.searchandreplace'
p5424
aS'=code-edit.selectall'
p5425
asg6
S"{HCode Editor - Actions}\n\nThe various actions of the code editor are invoked by keys, menu choices or both. Some of the very common operations\nhave fixed key assignments. The rest are assigned to keys based on a scheme specified by the configuration file.\n\n{BActions with fixed key assignments}\n\n o The four cursor keys\n o PageUp, PageDown, Home and End\n o Delete, Backspace\n o Enter (aka 'return')\n\n{BActions with variable key assignments}\n\nt {lCopy=code-edit.action.copy} - Copy text to the clipboard,\nt {lCopy append=code-edit.action.copyappend} - Copy and append to the clipboard.\nt {lCopy to file=code-edit.action.copytofile} - Copy selection to a file.\nt {lCut=code-edit.action.cut} - Cut text to the clipboard.\nt {lCut append=code-edit.action.cutappend} - Cut and append to the clipboard.\nt {lDelete one line=code-edit.deleteline} - Delete the line under the cursor.\nt {lGoto=code-edit.action.goto} - Goto a specific line number.\nt {lIndent=code-edit.action.indent} - Insert spaces until we are on an indent multiple.\nt {lIndent block=code-edit.action.indentblock} - Indent an entire block of text.\nt {lOutdent block=code-edit.action.outdentblock} - Outdent an entire block of text.\nt {lPaste=code-edit.action.paste} - Insert the clipboard at the current location.\nt {lPaste file=code-edit.action.pastefile} - Insert a file into the code.\nt {lPop to line number=code-edit.poptolinenumber} - Goto the most recent &remembered line.\nt {lPush line number=code-edit.action.pushlinenumber} - Add current line to list of &remembered lines\nt {lRestart colorizer=code-editor.colorization} - Restart the colorizer from the first visible line.\nt {lSwap with top=code-edit.action.swapwithtop} - Flip between the current and the &remembered line.\nt {lSearch=code-edit.action.search} - Initiate a new search.\nt {lSearch again=code-edit.action.searchagain} - Continue an existing search.\nt {lSearch and replace=code-edit.searchandreplace} - Initiate a search and replace operation.\nt {lSelect all=code-edit.selectall} - Select all text.\n\n{BOn selecting text}\n\nAll about {Lselecting text=code-editor.selecting-text}."
p5426
sg8
(lp5427
S'editor actions'
p5428
asg10
(lp5429
S'2005/04/07'
p5430
asg12
I0
sg13
(lp5431
sg15
(lp5432
S'Code editor actions and key bindings'
p5433
assS'wid.mainmenubar.baddrop'
p5434
(dp5435
g4
(lp5436
S'=form.main.info'
p5437
aS'&trash bin'
p5438
aS'=wid.mainmenubar.treatise'
p5439
asg6
S"{HPmw.MainMenuBar dropped on non-toplevel form}\n\nYou just dropped a {gPmw.MainMenuBar} widget on a form which is neither the\nmain-form of the main-module (it's {Lspecial=form.main.info}) nor a\n{fToplevel} (which is where MainMenuBar widgets belong).\n\nWhile this isn't causing any immediate harm, neither is it likely to do any\ngood and probably the best course of action is to drag this {fMainMenuBar}\nwidget instance to the &trash bin.\n\nThere is also {La brief treatise on MainMenuBars=wid.mainmenubar.treatise}."
p5440
sg8
(lp5441
sg10
(lp5442
S'2006/03/27'
p5443
asg12
I0
sg13
(lp5444
sg15
(lp5445
ssS'wid.tkinter.frame.opt.nametop'
p5446
(dp5447
g4
(lp5448
sg6
S">option.nametop.generic 'Frame'"
p5449
sg8
(lp5450
sg10
(lp5451
sg12
I0
sg13
(lp5452
sg15
(lp5453
ssS'layoutarea.formtab'
p5454
(dp5455
g4
(lp5456
S'&layout area'
p5457
aS'&form'
p5458
aS'&project'
p5459
aS'&form'
p5460
aS'&form'
p5461
aS'&layout editor'
p5462
aS'&code editor'
p5463
aS'&form'
p5464
aS'&project'
p5465
aS'=formseedialog'
p5466
asg6
S'\n{HLayout Area - Form Tabs}: {p$imgpr-help-FormTabs.ppm}\n\nThese tabs are part of the &Layout Area. Each &form in the &project has a name, and the tabs show the names of some\nor all of the project\'s &forms. At any give time one tab is selected (raised and a lighter color) and all the rest\nare not selected (not raised and a darker color).\n\no Clicking on a presently unselected tab will select that tab and bring the corresponding &form to the front.\n\no Clicking on the presently selected tab keeps it selected and swaps between the &layout editor and the &code\n  editor. You can also use the {G$tActionFormSwapCodeLayout} key or the {gForms..Swap Text/Lauout} menu choice to\n  swap between visual respresentation and code.\n\nNote that not all &forms in a &project will necessarily have a tab. Exactly which forms are shown in tabs is\ncontrolled by the main menu "{lForms/Select forms to see=formseedialog}" choice.'
p5467
sg8
(lp5468
sg10
(lp5469
S'2005/03/22'
p5470
asg12
I0
sg13
(lp5471
sg15
(lp5472
S'The form tabs in the layout area'
p5473
assS'wid.pmw.panedwidget.opt.separatorrelief'
p5474
(dp5475
g4
(lp5476
S'&default'
p5477
asg6
S"{HPanedWidget - separatorrelief}\n\nSpecifies the relief of the lines separating the panes. The &default is\n'sunken'."
p5478
sg8
(lp5479
sg10
(lp5480
S'2006/03/21'
p5481
asg12
I0
sg13
(lp5482
sg15
(lp5483
ssS'wid.pmw.counter.opt.labelmargin'
p5484
(dp5485
g4
(lp5486
sg6
S">option.pmw.labelmargin.generic 'Counter'"
p5487
sg8
(lp5488
sg10
(lp5489
sg12
I0
sg13
(lp5490
sg15
(lp5491
ssS'wid.pmw.notebook.opt.hull'
p5492
(dp5493
g4
(lp5494
sg6
S">option.pmw.hull.generic 'NoteBook'"
p5495
sg8
(lp5496
sg10
(lp5497
sg12
I0
sg13
(lp5498
sg15
(lp5499
ssS'wid.tkinter.radiobutton.opt.borderwidth'
p5500
(dp5501
g4
(lp5502
sg6
S'>option.borderwidth.generic "Radiobutton"'
p5503
sg8
(lp5504
sg10
(lp5505
sg12
I0
sg13
(lp5506
sg15
(lp5507
ssS'buffet.widget.scrollbar'
p5508
(dp5509
g4
(lp5510
sg6
S'>buffet.widget.generic "Scrollbar"'
p5511
sg8
(lp5512
sg10
(lp5513
sg12
I0
sg13
(lp5514
sg15
(lp5515
ssS'wid.pmw.scrolledtext.opt.usehullsize'
p5516
(dp5517
g4
(lp5518
sg6
S">option.pmw.usehullsize.generic 'ScrolledText'"
p5519
sg8
(lp5520
sg10
(lp5521
sg12
I0
sg13
(lp5522
sg15
(lp5523
ssS'bind-editor.abbreviation'
p5524
(dp5525
g4
(lp5526
S'&bind editor'
p5527
aS'&event'
p5528
aS'&event'
p5529
aS'&event'
p5530
aS'&event'
p5531
aS'&bind wizard'
p5532
aS'&binding'
p5533
aS'&recommend'
p5534
aS'&bind wizard'
p5535
aS'&event'
p5536
aS'&event'
p5537
asg6
S'{HBind Editor - Event Description Abbreviation}\n\nThe &bind editor displays an abbreviated version{f[1]} of the &event description because full &event description\nstrings can be rather lengthy at which point they take up an annoying amount of real estate on the screen. The\nabbreviation is of the form:\n\n  t {GEvent_Detail_Modifiers}\n\no {GEvent}\n   is a length limited version of the actual &event: "Actvte" for Activate, "KeyRel" for KeyRelease and so on. The\n  full list is shown below.\no {GDetail}\n   is the key (for Key events) or the button (for Mouse events). If there is no Detail and no Modifiers then this\n  section is omitted.\no {GModifiers}\n   are single letter codes for the various possible modifiers, as listed below. If there are no modifiers, this\n  section is omitted.\n\nTo see the full event string, place the mouse cursor over abbreviation and hold it still for a second.\n\n{BSome Examples}\n {f\nt Full string:  <ButtonPress-2>\nt Abbreviation: Button_2\n\nt Full string:  <Control-Shift-KeyRelease-Delete>\nt Abbreviation: KeyRel_Delete_CS}\n\n{BThe Abbreviations}{g\n\nt -------Events-------      --Modifiers--\nt Full           Short      Full    Short}{f\n\nt Activate       Actvte     Alt       A\nt ButtonPress    Button     Any       N\nt ButtonRelease  ButRel     Control   C\nt Configure      Config     Double    D\nt Deactivate     Deact      Lock      L\nt Destroy        Dstry      Shift     S\nt Enter          Enter      Triple    T\nt Expose         Expose\nt FocusIn        FocIn\nt FocusOut       FocOut\nt KeyPress       Key\nt KeyRelease     KeyRel\nt Leave          Leave\nt Map            Map\nt Motion         Motion\nt Unmap          Unmap\nt Visibility     Vis}\n\n- - -\n {b[1]} Technically the &event string is abbreviated for display only if you used the &bind wizard to create the\n&binding. Assuming you heed our &recommendation to use the &bind wizard then all &event strings will be abbreviated.\nIf you create an &event string manually then the we don\'t mess with it and the entire string (or as much of it as\nfits) is shown.'
p5538
sg8
(lp5539
sg10
(lp5540
S'2005/03/17'
p5541
asg12
I0
sg13
(lp5542
sg15
(lp5543
S'Event description abbreviations used in the bind editor.'
p5544
assS'wid.tkinter.menubutton.opt.image'
p5545
(dp5546
g4
(lp5547
S'&image'
p5548
asg6
S'{HMenubutton - image}\n\nAn &image to be displayed on this Menubutton (instead of text). If you supply\nboth text and image options, then the text option is ignored and the image\noption is used.'
p5549
sg8
(lp5550
sg10
(lp5551
S'2005/04/19'
p5552
asg12
I0
sg13
(lp5553
sg15
(lp5554
ssS'option.highlightbackground.generic'
p5555
(dp5556
g4
(lp5557
S'&color'
p5558
aS'&focus'
p5559
asg6
S'{H@0 - highlightbackground}\n\nThe &color of the &focus highlight when this @0 does not have the focus.'
p5560
sg8
(lp5561
sg10
(lp5562
S'2005/03/02'
p5563
asg12
I0
sg13
(lp5564
sg15
(lp5565
ssS'whatis.code.editor.stack'
p5566
(dp5567
g4
(lp5568
S'&code editor'
p5569
aS'&code editor'
p5570
aS'=code-edit.info-label'
p5571
aS'&code editor'
p5572
asg6
S"{HWhat is: The code editor's stack of remembered line numbers}\n\nThe &code editor keeps a stack of 'remembered' line numbers. If you are in one section of code but need to\ntemporarily take a look at another section then this line stack is just the ticket.\n\nThere are four stack related actions:\n\n o {gPush} ($tActionPushLineNumber} adds the number of the current line to the stack.\n\n o {gPop} ($tActionPopToLineNumber) Pops the most recent entry from the stack and takes you to that line.\n\n o {gSwap} ($tActionSwapWithTop} Replaces the top stack entry with the number of the current line and takes you to\n   the line that was formerly on the top of the stack.\n\n o {gForget} Clears the stack of remembered lines. Handy if you have pushed lots of line numbers but are now done\n   with them.\n\nUse {gpush} before you go off to the other section of code and then {gpop} to get back. If you know you are going to\nwant to snap back and forth between the two sections of code several times then once you arrive at the other section\nof code use {gswap}; each time you press {gswap} it will take you to the other section of code. When you are done\nsnapping back and forth press {gpop} to clean up the stack.\n\nEach &code editor has it's own line stack.\n\nThe {Lstatus-line=code-edit.info-label} of the &code editor shows the remembered line numbers on the\nstack.\n\nAll line stacks are empty immediately after a project has been loaded."
p5573
sg8
(lp5574
S'remembered line'
p5575
asg10
(lp5576
S'2006/02/18'
p5577
asg12
I0
sg13
(lp5578
sg15
(lp5579
S"What is: The code editor's stack of remembered line numbers"
p5580
assS'wid.pmw.scrolledframe.opt.borderframe'
p5581
(dp5582
g4
(lp5583
sg6
S'{HScrolledFrame - borderframe component}\n\nA frame widget which snuggly fits around the clipper, to give the appearance\nof a border. It is created with a border so that the clipper, which is\ncreated without a border, looks like it has a border.'
p5584
sg8
(lp5585
sg10
(lp5586
S'2006/03/22'
p5587
asg12
I0
sg13
(lp5588
sg15
(lp5589
ssS'wid.pmw.scrolledcanvas.opt.border-frame'
p5590
(dp5591
g4
(lp5592
S'&default'
p5593
asg6
S'{HScrolledCanvas - borderframe}\n\nInitialisation option. If true, the borderframe component will be created.\nThe &default is False.'
p5594
sg8
(lp5595
sg10
(lp5596
S'2006/03/22'
p5597
asg12
I0
sg13
(lp5598
sg15
(lp5599
ssS'wid.tkinter.text.opt.insertwidth'
p5600
(dp5601
g4
(lp5602
sg6
S'>option.insertwidth.generic "Text"'
p5603
sg8
(lp5604
sg10
(lp5605
sg12
I0
sg13
(lp5606
sg15
(lp5607
ssS'wid.tkinter.toplevel.opt.class_'
p5608
(dp5609
g4
(lp5610
S'&new mexico tech'
p5611
asg6
S'{HToplevel - class_}\n\nYou can give a Toplevel window a "class" name. Such names are matched against\nthe option database, so your application can pick up the user\'s configuration\npreferences (such as colors) by class name.\n\nFor example, you might design a series of popups called "screamers," and set\nthem all up with {gclass_} set to "Screamer". Then you can put a line in your\noption database like this:\n\nt *Screamer*background:red\n\nand then, if you use the {g.option_readfile()} method to read your option\ndatabase, all widgets with that class name will default to a red background.\nThis option is named {fclass_} because class is a reserved word in Python.\n\n$nmt'
p5612
sg8
(lp5613
sg10
(lp5614
S'2005/04/28'
p5615
asg12
I0
sg13
(lp5616
sg15
(lp5617
ssS'handlerdelete'
p5618
(dp5619
g4
(lp5620
S'&event'
p5621
aS'&handler'
p5622
aS'&maintained'
p5623
aS'&handler'
p5624
aS'&handler'
p5625
aS'&handler'
p5626
asg6
S'{HEvent handler delete confirmation}\n\nYou asked to delete &event &handler {g@0} and you are being asked for\nconfirmation.\n\nWhile there <is/are> @1 $$ &maintained reference</s> to this &handler it\nis possible that there may be references to this handler which you placed\nin your code by hand; any such references are {bnot} included in the count\nabove and you should take these into consideration before deleting the\nhandler.\n\no Click {gDelete now} to delete the &handler.\n\no Click {gCancel} to leave the &handler alone.'
p5627
sg8
(lp5628
sg10
(lp5629
S'Event handler delete confirmation'
p5630
aS'[0] The name of the event handler'
p5631
aS'[1] Number of references to the handler'
p5632
asg12
I0
sg13
(lp5633
I1
asg15
(lp5634
ssS'wid.pmw.group.overview'
p5635
(dp5636
g4
(lp5637
sg6
S'{HWhat is: A Group widget}\n\nThis megawidget consists of an interior frame with an exterior ring border\nand an identifying tag displayed over the top edge of the ring. The\nprogrammer can create other widgets within the interior frame.'
p5638
sg8
(lp5639
sg10
(lp5640
S'2006/03/19'
p5641
asg12
I0
sg13
(lp5642
sg15
(lp5643
S'What is: A Group widget'
p5644
assS'option.elementborderwidth.generic'
p5645
(dp5646
g4
(lp5647
S'&dimension'
p5648
asg6
S'{H@0 - elementborderwidth}\n\nA &dimensioned number giving the width of the borders around the arrowheads and slider. The default is\n{gelementborderwidth = -1}, which means to use the value of the {gborderwidth} option.'
p5649
sg8
(lp5650
sg10
(lp5651
S'2005/03/02'
p5652
asg12
I0
sg13
(lp5653
sg15
(lp5654
ssS'new-project-details'
p5655
(dp5656
g4
(lp5657
S'&project'
p5658
aS'&project'
p5659
aS'&module'
p5660
aS'&project'
p5661
aS'&form'
p5662
aS'&module'
p5663
aS'&module'
p5664
aS'&form'
p5665
aS'&module'
p5666
aS'&form'
p5667
aS'&module'
p5668
aS'&form'
p5669
aS'&module'
p5670
aS'=form.main.info'
p5671
aS'&form'
p5672
aS'&project'
p5673
asg6
S'{HNew project - details}\n\nA newly created &project is complete and ready to run. It doesn\'t do much, but it will run. For the sake of example\nlets assume you have asked to create a new project named "{fHello}"; here\'s what happens:\n\n n An empty &project named "{fHello}" is created.\n\n n A primary &module named "{fHello}" is added to the &project.\n\n n A &form named "{fHello}", which derives from Tkinter {gFrame}, is added to the primary &module.\n\n n All &modules have a "main code area". Down at the bottom of the main code area of module "{gHello}" we place a\n   few lines of code whose job is to get the application going with &form "{gHello}" filling the toplevel window of\n   our application.\n\nThus the project is complete and ready to run; press {g$tActionProjectSaveBuildRun} to save then run then project\nfrom within $$. A few notes on this process:\n\n o The project, the primary &module and the main &form of the primary &module all share the same name. To rename one\n   of them is to rename all of them. The main &form of the primary &module is special; click {Lhere for\n   details.=form.main.info}\n\n o The code which is automatically supplied at the bottom of the main code area of the primary &form is not cast in\n   stone. There are many ways of getting a Tk application off the ground and if you prefer a different way then by\n   all means change things to your heart\'s content.\n\n o The code that appears at the bottom of the main code area comes from the file {grapyd.template}. If you know what\n   you are doing and feel so inclined then dive in and modify it as you see fit. Any changes you make to this file\n   will apply only to &projects created after the changes.'
p5674
sg8
(lp5675
sg10
(lp5676
S'2006/01/28'
p5677
asg12
I0
sg13
(lp5678
sg15
(lp5679
S'What happens at new project time'
p5680
assS'wid.tkinter.text.opt.selectforeground'
p5681
(dp5682
g4
(lp5683
sg6
S'>option.selectforeground.generic "Text","text"'
p5684
sg8
(lp5685
sg10
(lp5686
sg12
I0
sg13
(lp5687
sg15
(lp5688
ssS'wid.tkinter.canvas.opt.confine'
p5689
(dp5690
g4
(lp5691
sg6
S'>option.confine.generic "Canvas"'
p5692
sg8
(lp5693
sg10
(lp5694
sg12
I0
sg13
(lp5695
sg15
(lp5696
ssS'colors'
p5697
(dp5698
g51
(lp5699
S'=colors.red'
p5700
aS'=color.green'
p5701
aS'=color.blue'
p5702
aS'=color.yellow'
p5703
aS'=color.cyan'
p5704
aS'=color.magenta'
p5705
aS'=color.white'
p5706
aS'=color.grey'
p5707
aS'=color.brown'
p5708
aS'=color.orange'
p5709
aS'=color.other'
p5710
asg53
S'{HPredefined colors}\n\nThere are a bazillion pre-defined colors but your ever-enthusiast help author was unable to find any way to get a\nlist of those colors at help time. The best I can give you is a list of the colors that are available on my\nGNU/Linus Ubuntu system on which $$ is developed. You probably have these colors available and your system may have\nextras. Click on one of the links below to get a list of colors in that family:\n\n t {LReds=colors.red}\n t {LGreens=color.green}\n t {LBlues=color.blue}\n t {LYellows=color.yellow}\n t {LCyans=color.cyan}\n t {LMagentas=color.magenta}\n\n t {LWhites=color.white}\n t {LGreys=color.grey}\n t {LBrowns=color.brown}\n t {LOranges=color.orange}\n t {LOthers=color.other}'
p5711
sg55
(lp5712
sg57
(lp5713
S'2014-02-20'
p5714
asg59
I0
sg60
(lp5715
sg62
(lp5716
S'Pre defined colors'
p5717
assS'wid.tkinter.canvas.opt.takefocus'
p5718
(dp5719
g4
(lp5720
sg6
S'>option.takefocus.generic "Canvas"'
p5721
sg8
(lp5722
sg10
(lp5723
sg12
I0
sg13
(lp5724
sg15
(lp5725
ssS'wid.tkinter.text.opt.insertbackground'
p5726
(dp5727
g4
(lp5728
sg6
S'>option.insertbackground.generic "Text"'
p5729
sg8
(lp5730
sg10
(lp5731
sg12
I0
sg13
(lp5732
sg15
(lp5733
ssS'wid.tkinter.menu.opt.tearoff'
p5734
(dp5735
g4
(lp5736
sg6
S'>option.tearoff.generic "Menu"'
p5737
sg8
(lp5738
sg10
(lp5739
sg12
I0
sg13
(lp5740
sg15
(lp5741
ssS'wid.pmw.messagebar.overview'
p5742
(dp5743
g4
(lp5744
sg6
S"{HWhat is: A MessageBar widget}\n\nA message bar contains a single-line message display area. Messages of\nseveral different types may displayed. Messages are cleared after a period\ndefined for each message type. Each message type has a priority so that if\nthe application attempts to display more than one message at a time, the\nmessage with the highest priority will be displayed. Messages may be\naccompanied by a number of audible bells.\n\nThis megawidget can be used for both interactive help messages (when the\nmouse enters certain widgets) and also for other general messages.\n\nTo perform the help function it can cooperate with the Pmw.Balloon megawidget\nso that the programmer (or user) can choose either balloon help, message bar\nhelp, both or neither.\n\nThis megawidget supports a configurable number of message types. The default\ntypes include 'state', 'help', 'usererror' and 'systemerror'. The difference\nbetween these are the length of time they are displayed, the number of bells\nthat are rung and the priority of the message. For example, the 'help'\nmessage type is lower in priority than the 'usererror', so that error\nmessages will always be displayed in preference to help messages regardless\nof the order the messages are created. The 'state' message type is lowest in\npriority but has no timeout, so it should contain messages describing the\ncurrent state of the application, such as Waiting for database connection or\n'Waiting for file to be unlocked'. Generally this should be set to the empty\nstring when the application is running normally. By default the help messages\n(with message type 'help') time out after 5 seconds, so that if the cursor\nhappens to be left over a widget, the application state will be redisplayed\nafter a short time."
p5745
sg8
(lp5746
sg10
(lp5747
S'2006/03/20'
p5748
asg12
I0
sg13
(lp5749
sg15
(lp5750
S'What is: A MessageBar widget'
p5751
assS'wid.pmw.timecounter.opt.name'
p5752
(dp5753
g4
(lp5754
sg6
S">option.name.generic 'TimeCounter'"
p5755
sg8
(lp5756
sg10
(lp5757
sg12
I0
sg13
(lp5758
sg15
(lp5759
ssS'projects.overview'
p5760
(dp5761
g4
(lp5762
S'&module'
p5763
aS'&form'
p5764
aS'&module'
p5765
aS'&module'
p5766
aS'=layout.menu.project'
p5767
aS'&project'
p5768
aS'=project.files'
p5769
asg6
S'{hProjects - Overview}\n\nA project is the highest level of $$ organization.\n\n o A {bproject} consists of one or more &modules.\n\n o A {bmodule} consists of a main code area plus zero or more &forms.\n\n o A {bform} is a Python class representing a rectangular, visual entiry\n   which can contain frames and widgets.\n\nWorking on a $$ project goes like this:\n\n n You use the various $$ facilities to create widgets and write code in\n   forms.\n\n n When you want to try it, you ask $$ to "build" the project. For each\n   &module $$ gatheres up all the code from the main code area plus the code\n   from each of the forms and writes it to a python file which is in fact a\n   python module.\n\n n You run the primary &module of your project. Your project can be run\n   standalone or it can be run from inside $$. During development it is far\n   more convenient to run from inside $$ since, when an error is encountered,\n   the $$ error handler can take you directly to any of the lines in the\n   error chain.\n\nBuilding and running your project is handled by the {LProject\nMenu=layout.menu.project}.\n\nTo learn about the files involved in a $$ &project {Lclick\nhere=project.files}.'
p5770
sg8
(lp5771
S'project'
p5772
asg10
(lp5773
S'2005/05/25'
p5774
asg12
I0
sg13
(lp5775
sg15
(lp5776
S'$$ projects - an overview'
p5777
assS'bind.eventwizard.mousebuttons'
p5778
(dp5779
g4
(lp5780
S'&event'
p5781
asg6
S"{HEvent Wizard - Mouse Buttons}\n\nYour mouse &event can take place in response to a particular mouse button or in\nresponse to {bany} of the mouse buttons. Click one of the radio buttons to make\nyour selection.\n\nOnce that's done, click on the {gNext} button to continue the process.\n\nTo change a previous choice, click on the {GBackUp} button."
p5782
sg8
(lp5783
sg10
(lp5784
S'2005/03/13'
p5785
asg12
I0
sg13
(lp5786
sg15
(lp5787
S'Bind Event Wizard - Mouse Buttons'
p5788
assS'wid.pmw.timecounter.opt.initwait'
p5789
(dp5790
g4
(lp5791
S'&default'
p5792
asg6
S'{HTimeCounter - initwait}\n\nSpecifies the initial delay (in milliseconds) before a depressed arrow button\nautomatically starts to repeat counting. The &default is 300.'
p5793
sg8
(lp5794
sg10
(lp5795
S'2006/03/24'
p5796
asg12
I0
sg13
(lp5797
sg15
(lp5798
ssS'wid.tkinter.checkbutton.opt.indicatoron'
p5799
(dp5800
g4
(lp5801
sg6
S'>option.indicatoron.generic "Checkbutton"'
p5802
sg8
(lp5803
sg10
(lp5804
sg12
I0
sg13
(lp5805
sg15
(lp5806
ssS'wid.tkinter.button.opt.wraplength'
p5807
(dp5808
g4
(lp5809
sg6
S'>option.wraplength.generic "Button"'
p5810
sg8
(lp5811
sg10
(lp5812
sg12
I0
sg13
(lp5813
sg15
(lp5814
ssS'wid.tkinter.label.opt.width'
p5815
(dp5816
g4
(lp5817
sg6
S'>option.width.generic "Label"'
p5818
sg8
(lp5819
sg10
(lp5820
sg12
I0
sg13
(lp5821
sg15
(lp5822
ssS'forms.overview'
p5823
(dp5824
g4
(lp5825
S'&layout area'
p5826
aS'&code editor'
p5827
aS'=form.main.info'
p5828
aS'=forms.derivation.explained'
p5829
aS'&layout area'
p5830
aS'&layout area'
p5831
aS'&layout area'
p5832
aS'=howto.delete.form'
p5833
aS'&layout area'
p5834
aS'=howto.rename.form'
p5835
asg6
S'{HForms}\n\nForms are what $$ is all about.\n\n o Visually forms are rectangular areas which contain frames and widgets. You use\n   the &layout area to arrange the visual aspect of your form.\n\n o Programatically forms are Pythan classes which contain user written methods to\n   make things happen. You use the &code editor to look after the Python code for\n   your form.\n   \nNote: the main form of the main module of your project has a \n{Lfew special characteristics.=form.main.info}\n\nEach form has to derive, either {Ldirectly or\nindirectly=forms.derivation.explained}, from the widgets {gTkinter.Toplevel},\n{gTkinter.Frame}, {gPmw.ScrolledFrame} or equivalent.\n\nTo select which forms have tabs at the top of the &layout area, use the\n{gForms/Select-forms-to-work-on} menu choice.\n\nYou add new forms to a project by using the &layout area menu\n{gForms/Add-new-form-to-project}.\n\nYou change the class from which a form derives by using the &layout area menu\n{gForms/Set-"derive-from"-class}.\n\nYou {Ldelete a form=howto.delete.form} by using the &layout area menu\n{gForms/Delete-the-current-form}. Note that the entire form, including code,\nwidgets, bindings and so on, is deleted so think before you delete.\n\nYou {Lrename=howto.rename.form} a form by changing the name of the outermost frame\nof the form.'
p5836
sg8
(lp5837
S'form'
p5838
asg10
(lp5839
S'2005/05/18'
p5840
asg12
I0
sg13
(lp5841
sg15
(lp5842
S'$$ projects consist of one or more forms'
p5843
assS'wid.tkinter.text.opt.highlightcolor'
p5844
(dp5845
g4
(lp5846
sg6
S'>option.highlightcolor.generic "Text"'
p5847
sg8
(lp5848
sg10
(lp5849
sg12
I0
sg13
(lp5850
sg15
(lp5851
ssS'wid.tkinter.checkbutton.opt.wraplength'
p5852
(dp5853
g4
(lp5854
sg6
S'>option.wraplength.generic "Checkbutton"'
p5855
sg8
(lp5856
sg10
(lp5857
sg12
I0
sg13
(lp5858
sg15
(lp5859
ssS'wid.pmw.mainmenubar.overview'
p5860
(dp5861
g4
(lp5862
sg6
S"{HWhat is: A MainMenuBar widget}\n\nThis class is a wrapper for the Tkinter.Menu class. It should be used as the\nmain menu of toplevel windows. The class is similar to Pmw.MenuBar, but\nshould be used when native menus are required. See the Tkinter.Menu\ndocumentation for full details.\n\nThis class should be created as the child of a Tkinter.Toplevel and should\nthen be specified as the menu associated with the toplevel, using the\ntoplevel's {fconfigure()} method. For example:\n\nt {f# Create a Pmw.MegaToplevel.\n   megaToplevel = Pmw.MegaToplevel()\n   # Get the Tkinter.Toplevel from Pmw.MegaToplevel.\n   toplevel = megaToplevel.interior()\n   # Create the menu bar for the toplevel.\n   menuBar = Pmw.MainMenuBar(toplevel)\n   # Configure the toplevel to use the menuBar.\n   toplevel.configure(menu = menuBar)}\n\nThere are methods to add menus, both as toplevel menus and sub-menus, and for\nadding menu items to the menus. Each menu item may have help text to be\ndisplayed by a Pmw.Balloon. Each menu and cascaded menu (sub-menu) is\nreferenced by name which is supplied on creation.\n\nThis megawidget is derived from Pmw.MegaArchetype (not Pmw.MegaWidget like\nmost other megawidgets), with the hull class being Tkinter.Menu.\n\n(Note that due to bugs in Tk's menubar functionality, balloon help has not\nbeen implemented and status help does not work properly.)"
p5863
sg8
(lp5864
sg10
(lp5865
S'2006/03/20'
p5866
asg12
I0
sg13
(lp5867
sg15
(lp5868
S'What is: A MainMenuBar widget'
p5869
assS'wid.pmw.scrolledlistbox.opt.vscrollmode'
p5870
(dp5871
g4
(lp5872
sg6
S">option.pmw.vscrollmode.generic 'ScrolledListBox'"
p5873
sg8
(lp5874
sg10
(lp5875
sg12
I0
sg13
(lp5876
sg15
(lp5877
ssS'wid.pmw.scrolledcanvas.opt.scrollmargin'
p5878
(dp5879
g4
(lp5880
S'&dimension'
p5881
aS'&default'
p5882
asg6
S'{HScrolledCanvas - scrollmargin}\n\nA &dimensioned number giving the the distance between the scrollbars and the enclosing canvas widget. The &default is 2.'
p5883
sg8
(lp5884
sg10
(lp5885
S'2006/03/22'
p5886
asg12
I0
sg13
(lp5887
sg15
(lp5888
ssS'wid.tkinter.listbox.opt.yscrollcommand'
p5889
(dp5890
g4
(lp5891
sg6
S'>option.yscrollcommand.generic "Listbox"'
p5892
sg8
(lp5893
sg10
(lp5894
sg12
I0
sg13
(lp5895
sg15
(lp5896
ssS'widget.rename.handlers.conflict'
p5897
(dp5898
g4
(lp5899
S'=bindassist.name-suggestion'
p5900
aS'=howto.rename.handler'
p5901
asg6
S'{BChanging event handler names when a widget is renamed}\n\nYou just renamed the current widget from "@0" to "@1". In the current form\nthe following event handler<0/s> reference<0s> widget "@0":\n\n@2\n\nNormally I would offer to change the name of the<0/se> handler<0/s> to\nreflect the new widget name BUT the following handler<1/s> already exist<1s>\nand renaming would thus cause a conflict:\n\n@6\n\nClick {bYes} to rename the handler<0/s> for which there is no conflict while\nleaving the rest alone.\n\nClick {bNo} to rename none of the handlers.\n\nNote that only event handlers with names of the\n{Lrecommended=bindassist.name-suggestion} form {gon_widget_whatever} are\nconsidered for automatic renaming. Non-standard event handler names are\nalways left as-is. If you wish to change them then you have to do the\n{Lrename=howto.rename.handler} manually.'
p5902
sg8
(lp5903
sg10
(lp5904
S'2006/02/06'
p5905
aS'@0 Old widget name'
p5906
aS'@1 New widget name'
p5907
aS'@2 List of old handler names'
p5908
aS'@3 Count of handlers (plural indicator 0)'
p5909
aS'@4 List of new handler names'
p5910
aS'@5 Count of conflicting handlers (plural indicator 1)'
p5911
aS'@6 List of conflicting handlers'
p5912
asg12
I0
sg13
(lp5913
I3
aI5
asg15
(lp5914
ssS'wid.pmw.timecounter.opt.downsecondarrow'
p5915
(dp5916
g4
(lp5917
sg6
S">wid.pmw.timecounter.arrow 'down','dec','second'"
p5918
sg8
(lp5919
sg10
(lp5920
sg12
I0
sg13
(lp5921
sg15
(lp5922
ssS'option.insertbackground.generic'
p5923
(dp5924
g4
(lp5925
S'&color'
p5926
asg6
S'{H@0 - insertbackground}\n\nThe &color of the insertion cursor. The default is black.'
p5927
sg8
(lp5928
sg10
(lp5929
S'2005/03/02'
p5930
asg12
I0
sg13
(lp5931
sg15
(lp5932
ssS'wid.pmw.scrolledfield.opt.text'
p5933
(dp5934
g4
(lp5935
S'&default'
p5936
asg6
S"{HScrolledField - text}\n\nSpecifies the text to display in the scrolled field. The &default is ''."
p5937
sg8
(lp5938
sg10
(lp5939
S'2006/03/22'
p5940
asg12
I0
sg13
(lp5941
sg15
(lp5942
ssS'option-state'
p5943
(dp5944
g4
(lp5945
sg6
S'{HState}\n\nDefault is {gNORMAL}. Set this to {GDISABLED} to gray out the widget and make\nit unresponsive. Has the value of {GACTIVE} when the mouse is over this\nwidget.'
p5946
sg8
(lp5947
S'state'
p5948
asg10
(lp5949
S'2005/02/28'
p5950
asg12
I0
sg13
(lp5951
sg15
(lp5952
S'State'
p5953
assS'howto.rename.handler'
p5954
(dp5955
g4
(lp5956
S'&binding'
p5957
aS'&bind editor'
p5958
aS'&command option'
p5959
aS'&option editor'
p5960
asg6
S'{HHow to rename an event handler}\n\nThere are two ways:\n\nn Find the handler in the code editor then right-click over the "def" part\n  (any of the text on the different colored background will do) of the\n  handler. From the menu that pops up choose "Rename".\n\n  -or-\n\nn From a &binding in the &bind editor or a &command option in the &option\n  editor that presently refers to the handler, click on the\n  {P$imgpr-msc-assist.ppm} "assist" button. Enter the new name for the\n  handler and click "Ok".\n\n  This method is best for handlers which are referred to by only one binding.\n  If multiple bindings refer to the handler then we have to find out if you\n  are renaming the handler and changing all the referring bindings or\n  creating a handler of the new name. It all gets looked after properly via\n  question dialogs but if you know in advance that you are just doing a\n  rename then method 1) is less complicated.'
p5961
sg8
(lp5962
sg10
(lp5963
S'2006/02/07'
p5964
asg12
I0
sg13
(lp5965
sg15
(lp5966
S'How to: Rename an event handler'
p5967
assS'wid.pmw.counter.opt.repeatrate'
p5968
(dp5969
g4
(lp5970
sg6
S">option.pmw.repeatrate.generic 'Counter'"
p5971
sg8
(lp5972
sg10
(lp5973
sg12
I0
sg13
(lp5974
sg15
(lp5975
ssS'code-edit.action.indent'
p5976
(dp5977
g4
(lp5978
S'=code-editor.actions-tab'
p5979
aS'&config file'
p5980
aS'&editor actions'
p5981
asg6
S'{HCode editor - Indent}\n\n Key:   $tActionIndent\n Menu: {f-- none --}\n\nInserts spaces at the cursor position until the cursor lands on a multiple of\nthe indent amount.\n\nThis does {bnot} inject a, yuk, {ltab=code-editor.actions-tab} character into\nthe code.\n\nThe indent amount is set in the &config file.\n\nCode &editor actions'
p5982
sg8
(lp5983
sg10
(lp5984
S'2005/04/15'
p5985
asg12
I0
sg13
(lp5986
sg15
(lp5987
S'Code editor - Indent'
p5988
assS'code-edit.action.copy'
p5989
(dp5990
g4
(lp5991
S'&editor actions'
p5992
asg6
S'{HCode editor - Copy}\n\n Key:   $tActionCopy\n Menu: {fEdit/Copy}\n\nThe clipboard is cleared and then the currently selected text is copied to the\nclipboard.\n\nCode &editor actions'
p5993
sg8
(lp5994
sg10
(lp5995
S'2005/04/07'
p5996
asg12
I0
sg13
(lp5997
sg15
(lp5998
S'Code editor - Copy'
p5999
assS'wid.tkinter.label.opt.disabledforeground'
p6000
(dp6001
g4
(lp6002
sg6
S'>option.disabledforeground.generic "Label"'
p6003
sg8
(lp6004
sg10
(lp6005
sg12
I0
sg13
(lp6006
sg15
(lp6007
ssS'wid.tkinter.entry.opt.highlightthickness'
p6008
(dp6009
g4
(lp6010
sg6
S'>option.highlightthickness.generic "Entry"'
p6011
sg8
(lp6012
sg10
(lp6013
sg12
I0
sg13
(lp6014
sg15
(lp6015
ssS'wid.tkinter.canvas.opt.insertwidth'
p6016
(dp6017
g4
(lp6018
sg6
S'>option.insertwidth.generic "Canvas"'
p6019
sg8
(lp6020
sg10
(lp6021
sg12
I0
sg13
(lp6022
sg15
(lp6023
ssS'load.filenotfound'
p6024
(dp6025
g4
(lp6026
sg6
S'{HCommand line file not found}\n\nHi. You just started $$ and specified "{g@0}" as the name of the project to load at startup but we didn\'t find a\nfile of that name.\n\nNote that $$ project files always have the extension of {g.rpj} and if you didn\'t supply an extension on the command\nline then one was supplied for you.\n\nIn any case we didn\'t find the file so now your choices are to either create a new project or use the standard file\nselection dialog to pick an existing project.'
p6027
sg8
(lp6028
sg10
(lp6029
S'2006/02/10'
p6030
aS'@0 - Name of the file we were looking for.'
p6031
asg12
I0
sg13
(lp6032
sg15
(lp6033
ssS'option.padx.generic'
p6034
(dp6035
g4
(lp6036
S'&dimension'
p6037
aS'&new mexico tech'
p6038
asg6
S'{H@0 - padx}\n\nA &dimensioned number which specifies the amount of additional padding left\nand right of the @1.\n\n$nmt'
p6039
sg8
(lp6040
sg10
(lp6041
S'2005/03/06'
p6042
asg12
I0
sg13
(lp6043
sg15
(lp6044
ssS'wid.pmw.scrolledlistbox.opt.items'
p6045
(dp6046
g4
(lp6047
S'&default'
p6048
aS'=option.verbatim'
p6049
asg6
S'{HScrolledListBox - items}\n\nA tuple containing the initial items to be displayed by the listbox\ncomponent. The &default is no items.\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.'
p6050
sg8
(lp6051
sg10
(lp6052
S'2006/03/23'
p6053
asg12
I0
sg13
(lp6054
sg15
(lp6055
ssS'wid.tkinter.menu.opt.cursor'
p6056
(dp6057
g4
(lp6058
S'&new mexico tech'
p6059
asg6
S'{HMenu - cursor}\n\nThe cursor that appears when the mouse is over the choices, but only when the\nmenu has been torn off.\n\n$nmt'
p6060
sg8
(lp6061
sg10
(lp6062
S'2005/04/19'
p6063
asg12
I0
sg13
(lp6064
sg15
(lp6065
ssS'wid.pmw.radioselect.opt.command'
p6066
(dp6067
g4
(lp6068
sg6
S'{HRadioSelect - command}\n\nThis &command option specifies the &event &handler to call when one of the\nbuttons is clicked on or when invoke() is called.\n\nIn single selection mode, the function is called with a single argument,\nwhich is the name of the selected button.\n\nIn multiple selection mode, the function is called with the first argument\nbeing the name of the button and the second argument being true if the button\nis now selected or false if it is now deselected.'
p6069
sg8
(lp6070
sg10
(lp6071
S'2006/03/21'
p6072
asg12
I0
sg13
(lp6073
sg15
(lp6074
ssS'howto.new.handler.existing.binding'
p6075
(dp6076
g4
(lp6077
S'&binding'
p6078
aS'&command option'
p6079
aS'&event'
p6080
aS'&event'
p6081
aS'&handler'
p6082
aS'&binding'
p6083
aS'&binding'
p6084
aS'&binding'
p6085
aS'&command option'
p6086
aS'&bind editor'
p6087
aS'&option editor'
p6088
aS'&bind assist'
p6089
aS'&handler'
p6090
aS'&handler'
p6091
aS'&handler'
p6092
aS'&recommend'
p6093
aS'&handler'
p6094
aS'&handler'
p6095
aS'&handler'
p6096
aS'&event'
p6097
aS'&binding'
p6098
aS'&command option'
p6099
aS'&handler'
p6100
aS'&handler'
p6101
aS'&handler'
p6102
aS'&handler'
p6103
aS'=howto.rename.handler'
p6104
asg6
S'{HHow to: Create a new handler for an existing binding}\n\nThe situation is thus: Two or more &bindings or &command options refer to a single &event handler. You now want to\ncreate a new &event &handler specifically for one of the existing &bindings while leaving all the other &bindings\nreferring to the original handler. To accomplish this:\n\nn Find the &binding or &command option in question (in the &bind editor or the &option editor) and click on it\'s\n  {P$img/pr-msc-assist.ppm} "assist" button. The &bind assist dialog pops up.\n\nn In the combo box just above the buttons, edit the &handler name to be the name of the &handler you want to create\n  (ie the name should be different than the name of any existing &handler). We &recommend you use the standard\n  {gon_widget_whatever} form for for the new &handler name.\n\nn When you click {gOk} a dialog will pop up asking if you want to rename the existing &handler (you don\'t) or create\n  a new &handler specifically for this &event. You do, so click the {GNew handler} button.\n\n- - - other cases - - -\n\nIf the &binding or &command option is the only reference to it\'s event &handler then this situation doesn\'t really\ncome up. If you want to revise the &handler then hack away: nobody else refers to the &handler so no harm will be\ndone. If you simply want to rename the &handler then that is {Leasily done=howto.rename.handler}.'
p6105
sg8
(lp6106
sg10
(lp6107
S'2006/02/17'
p6108
asg12
I0
sg13
(lp6109
sg15
(lp6110
S'How to: Create a new handler for an existing binding'
p6111
assS'bind.orphan.handler'
p6112
(dp6113
g4
(lp6114
S'&binding'
p6115
aS'&event'
p6116
aS'&handler'
p6117
aS'&event'
p6118
aS'&handler'
p6119
aS'&binding'
p6120
aS'&command option'
p6121
aS'&form'
p6122
aS'&event'
p6123
aS'&handler'
p6124
aS'&event'
p6125
aS'&handler'
p6126
aS'&event'
p6127
aS'&handler'
p6128
aS'&binding'
p6129
aS'&command option'
p6130
aS'&event'
p6131
aS'&handler'
p6132
aS'&event'
p6133
aS'&handler'
p6134
aS'&event'
p6135
aS'&handler'
p6136
aS'&handler'
p6137
aS'&form'
p6138
aS'&event'
p6139
aS'&handler'
p6140
aS'&binding'
p6141
aS'&event'
p6142
aS'&handler'
p6143
asg6
S'{HOrphan event handler}\n\nYou just changed a &binding which used to refer to the &event &handler "@0" so it will now refer to existing &event\n&handler "@1".  I note that no other &binding nor &command option anywhere in the current &form refers to &event\n&handler "@0", so it may be redundant. The dialog box you pressed help on is giving you the opportunity to delete\n&event &handler "@0" now.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that) or if you plan to create new &bindings\n  or &command options which will refer to that &event &handler then clearly you want to choose {GKeep handler} to\n  retain the &event &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed use for it then you might as well say\n  {GDelete handler} to delete the &handler rather than leaving unused code hanging around your &form.\n\no If you\'ve reconsidered and now don\'t want to change the &event &handler to which this &binding pertains nor delete\n  the &event &handler then click {gCancel}.'
p6144
sg8
(lp6145
sg10
(lp6146
S'2005/05/14'
p6147
aS'@0 The event handler this binding used to refer to'
p6148
aS'@1 The event handler this binding will now refer to'
p6149
asg12
I0
sg13
(lp6150
sg15
(lp6151
ssS'buffet.widget.entry'
p6152
(dp6153
g4
(lp6154
sg6
S'>buffet.widget.generic "Entry", "n"'
p6155
sg8
(lp6156
sg10
(lp6157
sg12
I0
sg13
(lp6158
sg15
(lp6159
ssS'howto.find.handler.references'
p6160
(dp6161
g4
(lp6162
S'&form'
p6163
aS'&binding'
p6164
aS'&command option'
p6165
aS'&event'
p6166
aS'&handler'
p6167
aS'&event'
p6168
aS'&handler'
p6169
aS'&maintained'
p6170
aS'&binding'
p6171
aS'&command option'
p6172
aS'&event'
p6173
aS'&handler'
p6174
aS'&event'
p6175
aS'&command option'
p6176
aS'&bind editor'
p6177
aS'&command option'
p6178
aS'&command option'
p6179
aS'&option editor'
p6180
aS'&maintained'
p6181
aS'&bind editor'
p6182
aS'&option editor'
p6183
aS'&handler'
p6184
asg6
S"{HHow to: Find the references to an event handler}\n\nAny number of widgets in a &form can, through &bindings and &command\noptions, reference a single &event &handler.\n\nTo find all the references to a given handler:\n\n o Find the event handler in the code editor.\n\n o Right click over the header (any of the text on a different colored\n   background) of the &event &handler.\n\n o Choose the {gSee references} item of the popup menu.\n\nThe resulting dialog shows a list of all $$ &maintained &bindings and\n&command options which reference the &event &handler. Each reference\nshows, on the left, the name of the widget and, on the right, the &event\nstring or &command option within that widget which makes the reference.\n\no You can tell event strings because they are enclosed in angle brackets\n  {f<like this>}. Event string type references are mainted by the widget's\n  &bind editor.\n\no &Command options do not have angle brackets. &Command option style\n  references are maintainted by the widget's &option editor.\n\nThe references show in this dialog are {ionly} those references which are\n&maintained by $$ via the &bind editor and the &option editor. Any\nreferences to this &handler which you have placed in your code by hand are\n{inot} reflected here."
p6185
sg8
(lp6186
sg10
(lp6187
S'2006/02/15'
p6188
asg12
I0
sg13
(lp6189
sg15
(lp6190
S'How to: Find the references to an event handler'
p6191
assS'wid.pmw.scrolledframe.opt.vertscrollbar'
p6192
(dp6193
g4
(lp6194
sg6
S'{HScrolledFrame - vertscrollbar}\n\nThe vertical scrollbar. Its component group is Scrollbar.'
p6195
sg8
(lp6196
sg10
(lp6197
S'2006/03/23'
p6198
asg12
I0
sg13
(lp6199
sg15
(lp6200
ssS'option.relief.generic'
p6201
(dp6202
g4
(lp6203
sg6
S'{H@0 - relief}\n\nThe type of border to draw around the @0. By way of example, here are five Tkinter.Buttons\nshowing the different types of relief:\n\n{P$imgpr-help-ReliefButtons.ppm}'
p6204
sg8
(lp6205
sg10
(lp6206
S'2005/03/06'
p6207
asg12
I0
sg13
(lp6208
sg15
(lp6209
ssS'color.white'
p6210
(dp6211
g1319
(lp6212
sg1321
S'{HWhites}\n\n {f#FAEBD7}  antique white\n {f#FAEBD7}  AntiqueWhite\n {f#FFEFDB}  AntiqueWhite1\n {f#EEDFCC}  AntiqueWhite2\n {f#CDC0B0}  AntiqueWhite3\n {f#8B8378}  AntiqueWhite4\n {f#FFFAF0}  floral white\n {f#FFFAF0}  FloralWhite\n {f#F8F8FF}  ghost white\n {f#F8F8FF}  GhostWhite\n {f#FFDEAD}  navajo white\n {f#FFDEAD}  NavajoWhite\n {f#FFDEAD}  NavajoWhite1\n {f#EECFA1}  NavajoWhite2\n {f#CDB38B}  NavajoWhite3\n {f#8B795E}  NavajoWhite4\n {f#FFFAFA}  snow\n {f#FFFAFA}  snow1\n {f#EEE9E9}  snow2\n {f#CDC9C9}  snow3\n {f#8B8989}  snow4\n {f#FFFFFF}  white\n {f#F5F5F5}  white smoke\n {f#F5F5F5}  WhiteSmoke'
p6213
sg1323
(lp6214
sg1325
(lp6215
sg1327
I0
sg1328
(lp6216
sg1330
(lp6217
ssS'wid.tkinter.text.opt.spacing1'
p6218
(dp6219
g4
(lp6220
sg6
S'>option.spacing1.generic "Text"'
p6221
sg8
(lp6222
sg10
(lp6223
sg12
I0
sg13
(lp6224
sg15
(lp6225
ssS'project.files'
p6226
(dp6227
g4
(lp6228
S'&project'
p6229
aS'&module'
p6230
aS'&module'
p6231
aS'&project'
p6232
aS'&module'
p6233
aS'&form'
p6234
aS'&project'
p6235
aS'&project'
p6236
aS'&project'
p6237
aS'&module'
p6238
aS'&project'
p6239
aS'&project'
p6240
aS'&project'
p6241
aS'=layout.menu.project'
p6242
aS'&module'
p6243
aS'&project'
p6244
aS'&module'
p6245
aS'&project'
p6246
asg6
S'{HFiles used by a $$ project}\n\nEach $$ &project consists of:\n\n o A primary &module, plus\n o Zero or more additional &modules.\n\nThe &project, the main-&module and the main-&form of the main module \nalways share the same name.\n\nA &project is saved in a file with an extension of "{grpj}"\n({gr}apyd-{gp}ro{gj}ect). For example, if you have a &project named\n"Baffy" then all the information about that &project (including\ninformation about all &modules in the &project) would be stored in a file\nnamed "{gBaffy.rpj}". An {grpj} file isn\'t something you can run; it\'s\nsimply all the information that $$ has about a &project stuffed into a\nfile. In order to run a &project you have to "build" it, which is done\nfrom the {Lproject menu=layout.menu.project}.\n\nWhen a project is built, Python source files (which have an extension of\n"{g.py}") are generated for every &module in the project. If our\nhypothetical &project "{fBaffy}" has (over and above the main module which\nwould share the name "{fBaffy}") additional &modules named "{fSpam}" and\n"{fParrot}", then when built these python files would be generated:\n\nt {gBaffy.py}\nt {gSpam.py}\nt {gParrot.py}\n\nThen you run the file "{gBaffy.py}" and your &project is on the go.'
p6247
sg8
(lp6248
sg10
(lp6249
S'2005/05/26'
p6250
asg12
I0
sg13
(lp6251
sg15
(lp6252
S'Files used by a $$ project'
p6253
assS'wid.tkinter.text.opt.spacing3'
p6254
(dp6255
g4
(lp6256
sg6
S'>option.spacing3.generic "Text"'
p6257
sg8
(lp6258
sg10
(lp6259
sg12
I0
sg13
(lp6260
sg15
(lp6261
ssS'wid.tkinter.text.opt.spacing2'
p6262
(dp6263
g4
(lp6264
sg6
S'>option.spacing2.generic "Text"'
p6265
sg8
(lp6266
sg10
(lp6267
sg12
I0
sg13
(lp6268
sg15
(lp6269
ssS'wid.pmw.scrolledframe.overview'
p6270
(dp6271
g4
(lp6272
sg6
S'{HWhat is: A ScrolledFrame widget}\n\nA scrolled frame consists of a scrollable interior frame within a clipping\nframe. The programmer can create other widgets within the interior frame. If\nthe frame becomes larger than the surrounding clipping frame, the user can\nposition the frame using the horizontal and vertical scrollbars.\n\nThe scrollbars can be dynamic, which means that a scrollbar will only be\ndisplayed if it is necessary. That is, if the frame is smaller than the\nsurrounding clipping frame, the scrollbar will be hidden.'
p6273
sg8
(lp6274
sg10
(lp6275
S'2006/03/21'
p6276
asg12
I0
sg13
(lp6277
sg15
(lp6278
S'What is: A ScrolledFrame widget'
p6279
assS'wid.tkinter.menu.opt.pyclass'
p6280
(dp6281
g4
(lp6282
sg6
S'>option.pyclass.generic "Menu"'
p6283
sg8
(lp6284
sg10
(lp6285
sg12
I0
sg13
(lp6286
sg15
(lp6287
ssS'wid.pmw.scrolledtext.opt.hull'
p6288
(dp6289
g4
(lp6290
sg6
S">option.pmw.hull.generic 'ScrolledText'"
p6291
sg8
(lp6292
sg10
(lp6293
sg12
I0
sg13
(lp6294
sg15
(lp6295
ssS'wid.tkinter.checkbutton.opt.bitmap'
p6296
(dp6297
g4
(lp6298
sg6
S'>option.bitmap.generic "Checkbutton"'
p6299
sg8
(lp6300
sg10
(lp6301
sg12
I0
sg13
(lp6302
sg15
(lp6303
ssS'wid.pmw.counter.opt.name'
p6304
(dp6305
g4
(lp6306
sg6
S">option.name.generic 'Counter'"
p6307
sg8
(lp6308
sg10
(lp6309
sg12
I0
sg13
(lp6310
sg15
(lp6311
ssS'wid.pmw.messagebar.opt.messagetypes'
p6312
(dp6313
g4
(lp6314
S'&default'
p6315
aS'=option.verbatim'
p6316
asg6
S"{HMessageBar - messagetypes}\n\nThis defines what message types are supported by the message bar and the\ncharacteristics of those message types. It is a dictionary where the key is a\nstring specifying a message type and the value is a tuple of four integers,\n(priority, showtime, bells, logmessage), where priority is the rank of the\nmessage type, showtime is the number of seconds to display messages of this\nmessage type, bells is the number of audible bells to ring and logmessage is\na boolean specifying whether this message should be logged for retrieval\nlater. Messages with a higher priority are displayed in preference to those\nwith lower priority. If a high priority message times out (because it has\nbeen displayed for showtime  seconds), then a lower priority message may be\ndisplayed. A showtime of 0 means that the message will never time out and is\nuseful for displaying messages describing the current state of the\napplication as opposed to messages describing events. Logging is not\ncurrently implemented. The &default is\n\nt {{\nt {f'systemerror'  : (5, 10, 2, 1),\nt 'usererror'    : (4, 5, 1, 0),\nt 'busy'         : (3, 0, 0, 0),\nt 'systemevent'  : (2, 5, 0, 0),\nt 'userevent'    : (2, 5, 0, 0),\nt 'help'         : (1, 5, 0, 0),\nt 'state'        : (0, 0, 0, 0),}\nt }\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}."
p6317
sg8
(lp6318
sg10
(lp6319
S'2006/03/20'
p6320
asg12
I0
sg13
(lp6321
sg15
(lp6322
ssS'buffet.widget.listbox'
p6323
(dp6324
g4
(lp6325
sg6
S'>buffet.widget.generic "Listbox"'
p6326
sg8
(lp6327
sg10
(lp6328
sg12
I0
sg13
(lp6329
sg15
(lp6330
ssS'wid.pmw.radioselect.opt.selectmode'
p6331
(dp6332
g4
(lp6333
S'&default'
p6334
asg6
S"{HRadioSelect - selectmode}\n\nSpecifies whether a single button or multiple buttons can\nbe selected at one time. If 'single', clicking on an unselected button\nselects it and deselects all other buttons. If 'multiple', clicking on an\nunselected button selects it and clicking on a selected button deselects it.\nThis option is ignored if buttontype is 'radiobutton' or 'checkbutton'. The\n&default is 'single'."
p6335
sg8
(lp6336
sg10
(lp6337
S'2006/03/21'
p6338
asg12
I0
sg13
(lp6339
sg15
(lp6340
ssS'code-edit.action.bottom'
p6341
(dp6342
g4
(lp6343
S'&editor actions'
p6344
asg6
S'{HCode editor - Last Line}\n\n Key:   $tActionBottom\n Menu: {fEdit/Last Line}\n\nMoves to the last line of code.\n\nCode &editor actions'
p6345
sg8
(lp6346
sg10
(lp6347
S'2006/01/26'
p6348
asg12
I0
sg13
(lp6349
sg15
(lp6350
S'Code editor - goto last line'
p6351
assS'wid.tkinter.text.opt.borderwidth'
p6352
(dp6353
g4
(lp6354
sg6
S'>option.borderwidth.generic "Text"'
p6355
sg8
(lp6356
sg10
(lp6357
sg12
I0
sg13
(lp6358
sg15
(lp6359
ssS'wid.pmw.timecounter.opt.hourentryfield'
p6360
(dp6361
g4
(lp6362
sg6
S'{HTimeCounter - hourentryfield}\n\nThe entry field where the hours are entered and displayed.'
p6363
sg8
(lp6364
sg10
(lp6365
S'2006/03/24'
p6366
asg12
I0
sg13
(lp6367
sg15
(lp6368
ssS'resizeknobs'
p6369
(dp6370
g4
(lp6371
S'&bind editor'
p6372
asg6
S"{bResize Knobs}   {P$imgpr-help-Resize.ppm}\n\nThese are the &bind editor's resize knobs, both of which can be dragged left\nor right.\n\n o Dragging the first resize knob adjusts the width of the area which shows\n   the option names.\n\n o Dragging the second resize knob adjusts the width of the edit area in\n   which you set the value of the options.\n\n{bNote}: To make the edit area wider, you can drag the second resize knob off\nthe right side of the option editor. Although the resize knob itself stops at\nthe edge of the option editor, the position of the mouse is still being\nfollowed and the edit area will resize appropriately."
p6373
sg8
(lp6374
sg10
(lp6375
S'2005/03/04'
p6376
asg12
I0
sg13
(lp6377
sg15
(lp6378
ssS'option-editor'
p6379
(dp6380
g4
(lp6381
S'&widgetator'
p6382
aS'&layout area'
p6383
aS'&layout area'
p6384
asg6
S"{HThe Option Editor}\n\nThe option editor is where you view and change all the various widget options. It is located at the far left of the\n$$ window and is one of three tabs provided by the &widgetator. The option editor presents all the option settings\nfor the current widget. Generally you select the current widget by clicking on it in the &layout area, although\nthere is also a widget selector at the top of the widgetator. Clicking the $hb over virtually anything in the option\neditor will get you help about that item. Pressing the $hk will get you help about the currently selected option.\n\nWhen a widget is first dropped on the &layout area it has default setting for all it's options and you can see what\nthese default values are by looking at the option editor. Of course the whole point of the option editor is to let\nyou set the option values as you please.\n\nFrom top to bottom the option editor consists of:\n\n o The selector\n o Two resize knobs\n o The options\n\n{bThe Selector}    {p$imgpr-help-Selector.ppm}\n\nIs simply a dropdown list that will show you the names of all the widgets of the current form. Clicking on a widget\nnames selects it as the current widget.\n\n{bThe Resize Knobs}   {p$imgpr-help-Resize.ppm}\n\nJust above the option edit area are two small resize knobs, both of which can be dragged left or right. Dragging the\nfirst resize knob adjusts the width of the area which shows the option names. Dragging the second resize knob\nadjusts the width of the edit area in which you set the value of the options. {bNote}: To make the edit area wider\nyou can drag the resize knob to the right of the option editor. Although the resize knob loses visibility when the\nmouse leaves the option editor the position of the mouse is still being followed and the edit area will resize\nappropriately.\n\n{bThe Options} {p$imgpr-help-OptionEditor.ppm}\n\nEach widget has many options. Left to right in the option area you see:\n\n o {bThe name of the option.}\n\n o {bThe option view/edit area.} For all options, this is where you get to see its current value. For a few options\n   this is an area where you can change the value of the option, for example the name of the widget, or the text to\n   show on a label.\n o {bA starburst 'assist' button.} {p$imgpr-help-Assist.ppm} Most options have an 'assist'. Pressing this button\n   brings up an assist dialog which assists in setting this option. For those options where you get to choose from a\n   list, the assist pops up a radio-button dialog. For all other options the assist pops up an option specific\n   dialog.\n\nTo get information about a particular option, middle-click the mouse while over the option."
p6385
sg8
(lp6386
S'option editor'
p6387
asg10
(lp6388
S'2005/02/22'
p6389
asg12
I0
sg13
(lp6390
sg15
(lp6391
S'The Option editor'
p6392
assS'wid.pmw.counter.opt.initwait'
p6393
(dp6394
g4
(lp6395
sg6
S'{HCounter - initwait}\n\nSpecifies the initial delay in milliseconds before a depressed\narrow button automatically starts to repeat.'
p6396
sg8
(lp6397
sg10
(lp6398
S'2006/03/18'
p6399
asg12
I0
sg13
(lp6400
sg15
(lp6401
ssS'wid.tkinter.label.opt.cursor'
p6402
(dp6403
g4
(lp6404
S'&cursor'
p6405
asg6
S'>option.cursor.generic "Label"'
p6406
sg8
(lp6407
sg10
(lp6408
sg12
I0
sg13
(lp6409
sg15
(lp6410
ssS'option.offvalue.generic'
p6411
(dp6412
g4
(lp6413
S'&new mexico tech'
p6414
asg6
S"{H@0 - offvalue}\n\nNormally, a @0's associated control variable will be set to 0 when it is\ncleared (off). You can supply an alternate value for the off state by setting\noffvalue to that value.\n\n$nmt"
p6415
sg8
(lp6416
sg10
(lp6417
S'2005/03/06'
p6418
asg12
I0
sg13
(lp6419
sg15
(lp6420
ssS'load.missing.widgets'
p6421
(dp6422
g4
(lp6423
S'&maintained'
p6424
asg6
S'\n{HMissing library module noticed at load time}\n\nAs mentioned in the dialog, the module<0/s> {g@3} <0was/were> available the last time the @4\nwas saved but <0is/are> not available now. As shown in the following list, there <1is/are>\n@2 widget instance<1/s> which <1was/were> drawn from the missing module<0/s>.\n\n@0\n\nIn the list above\n\n{bDmodule} is the name of the previously available module which is now missing.\n\n{bPmodule} is the name of the module within this project in which the reference occurred. If\nthe error was detected while importing a form, this will be omitted.\n\n{bForm} is the name of the form within that module in which the reference occurred.\n\n{bWidget} is the type of widget involved.\n\n{bName} is the name by which the widget-instance was known inside the form.\n\nIf you choose {gDelete Widgets} then any widgets in the @4 which were from the missing\nmodule<0/s> will be deleted. All code which is &maintained by $$ will be in good shape after\nthe deletion but any of your code that referenced the deleted widgets will need to be\nrevised.\n\nIf you choose {gCancel} then loading of the @4 is cancelled.'
p6425
sg8
(lp6426
sg10
(lp6427
S'2006/03/28'
p6428
aS'@0 The list of references'
p6429
aS'@1 The number of donor modules missing'
p6430
aS'@2 The number of widget instances involved'
p6431
aS'@3 List of missing donor modules'
p6432
aS"@4 'project' or 'form'"
p6433
asg12
I0
sg13
(lp6434
I1
aI2
asg15
(lp6435
ssS'wid.pmw.labeledwidget.opt.pyclass'
p6436
(dp6437
g4
(lp6438
sg6
S'>option.pyclass.generic "LabeledWidget"'
p6439
sg8
(lp6440
sg10
(lp6441
sg12
I0
sg13
(lp6442
sg15
(lp6443
ssS'wid.pmw.notebook.opt.raisecommand'
p6444
(dp6445
g4
(lp6446
S'&command option'
p6447
aS'&event'
p6448
aS'&handler'
p6449
asg6
S'{HNoteBook - raisecommand}\n\nThis &command option specifies the &event &handler to call when a new page is\nselected. The function is called with a single argument, which is the name of\nthe selected page.'
p6450
sg8
(lp6451
sg10
(lp6452
S'2006/03/21'
p6453
asg12
I0
sg13
(lp6454
sg15
(lp6455
ssS'wid.tkinter.scale.opt.showvalue'
p6456
(dp6457
g4
(lp6458
sg6
S'>option.showvalue.generic "Scale"'
p6459
sg8
(lp6460
sg10
(lp6461
sg12
I0
sg13
(lp6462
sg15
(lp6463
ssS'wid.pmw.menubar.opt.balloon'
p6464
(dp6465
g4
(lp6466
sg6
S'{HMenuBar - balloon}\n\nSpecifies a Pmw.Balloon to display the help text for menu buttons and menu\nitems. If None, no help is displayed. If the balloon has an associated\nPmw.MessageBar, the help text will also be displayed there. The default is\nNone.'
p6467
sg8
(lp6468
sg10
(lp6469
S'2006/03/20'
p6470
asg12
I0
sg13
(lp6471
sg15
(lp6472
ssS'wid.pmw.panedwidget.opt.separatorthickness'
p6473
(dp6474
g4
(lp6475
S'&dimension'
p6476
aS'&default'
p6477
asg6
S'{HPanedWidget - separatorthickness}\n\nA &dimensioned number which specifies the thickness of the lines separating the panes. The &default is 2 pixels.'
p6478
sg8
(lp6479
sg10
(lp6480
S'2006/03/21'
p6481
asg12
I0
sg13
(lp6482
sg15
(lp6483
ssS'wid.tkinter.text.opt.yscrollcommand'
p6484
(dp6485
g4
(lp6486
sg6
S'>option.yscrollcommand.generic "Text"'
p6487
sg8
(lp6488
sg10
(lp6489
sg12
I0
sg13
(lp6490
sg15
(lp6491
ssS'wid.pmw.menubar.opt.padx'
p6492
(dp6493
g4
(lp6494
sg6
S">option.pmw.padx.generic 'MenuBar', 'menu button', '0'"
p6495
sg8
(lp6496
sg10
(lp6497
sg12
I0
sg13
(lp6498
sg15
(lp6499
ssS'wid.tkinter.scale.opt.width'
p6500
(dp6501
g4
(lp6502
S'&dimension'
p6503
aS'&new mexico tech'
p6504
asg6
S'{HScale - width}\n\nA &dimensioned number giving the width of the trough part of the widget.\n\nThis is the x dimension for vertical scales and the y dimension for horizontal scales.\n\n$nmt'
p6505
sg8
(lp6506
sg10
(lp6507
S'2005/04/27'
p6508
asg12
I0
sg13
(lp6509
sg15
(lp6510
ssS'wid.tkinter.menu.opt.takefocus'
p6511
(dp6512
g4
(lp6513
sg6
S'>option.takefocus.generic "Menu"'
p6514
sg8
(lp6515
sg10
(lp6516
sg12
I0
sg13
(lp6517
sg15
(lp6518
ssS'wid.pmw.entryfield.opt.entry'
p6519
(dp6520
g4
(lp6521
sg6
S'{HEntryField - entry}\n\nThe widget where the user enters text. Long text can be scrolled\nhorizontally by dragging with the middle mouse button.'
p6522
sg8
(lp6523
sg10
(lp6524
S'2006/03/19'
p6525
asg12
I0
sg13
(lp6526
sg15
(lp6527
ssS'option.to.generic'
p6528
(dp6529
g4
(lp6530
S'&new mexico tech'
p6531
asg6
S"{H@0 - to}\n\nA float or integer value that defines one end of the @0's range; the other\nend is defined by the {gfrom_} option. The {gto} value can be either greater\nthan or less than the {gfrom_} value. For vertical scales, the {gto} value\ndefines the bottom of the scale; for horizontal scales, the right end.\n\n$nmt"
p6532
sg8
(lp6533
sg10
(lp6534
S'2005/04/05'
p6535
asg12
I0
sg13
(lp6536
sg15
(lp6537
ssS'code-editor.colorization'
p6538
(dp6539
g4
(lp6540
S'&config file'
p6541
aS'=code-editor.recolorizing-long'
p6542
asg6
S"{HCode Editor - Colorization}\n\nYour code is automatically colorized as you type it. The colors used are set in\nthe &config file so you can change them if you wish.\n\nThe colorizer runs in the background. After you have loaded a large file it may\ntake a while for the entire file to be colorized but this isn't usually a\nconcern since as you jump around in the file the colorizer automatically follows\nand starts colorizing at your present location.\n\n{bColorizing and triple quotes}\n\nMost colorizing issues are local to a single line. A change in triple quotes,\nhowever, can easily affect text thousands of lines past where the change was\nmade. If colorizing was blindingly fast then we would simply recolorize the\nentire file every time there was a change in triple quotes. In fact,\nrecolorizing is not blindingly fast and hence the editor uses heuristics to\navoid unnecessary recolorization.\n\nThe short story is that, although uncommon, it is possible to get the\ncolorization out of whack with regard to triple quotes and if this happens, go\nto the top of the out of whack area and press the {gRecolorization}\n($tActionRecolorize) key at which point recolorization will start from the first\nline visible on the screen. If you want the long story, {Lclick\nhere=code-editor.recolorizing-long}."
p6543
sg8
(lp6544
sg10
(lp6545
S'2005/04/06'
p6546
asg12
I0
sg13
(lp6547
sg15
(lp6548
S"The code editor's colorizer"
p6549
assS'buffet.widget.notebook'
p6550
(dp6551
g4
(lp6552
sg6
S'>buffet.widget.generic "Pmw.NoteBook", \'\', \'pmw.wid.notebook.overview\''
p6553
sg8
(lp6554
sg10
(lp6555
sg12
I0
sg13
(lp6556
sg15
(lp6557
ssS'project.new.mkdir.failed'
p6558
(dp6559
S'Links'
p6560
(lp6561
sS'Text'
p6562
S'{HUnable to create directory at new-project time}\n\nYou just asked me to create the directory "{g@0}" for project "{g@1}", however my attempt to create the directory\nfailed with the error message:\n\nt {g@2}\n\nThis is generally the result of of not having the necessary permissions to create the directory, but the message\nabove shows all the details I have available. Sorry it didn\'t work.'
p6563
sS'Hotlinks'
p6564
(lp6565
sS'Comments'
p6566
(lp6567
S'2014-03-25'
p6568
asS'Wip'
p6569
I0
sS'Plurals'
p6570
(lp6571
sS'Abstracts'
p6572
(lp6573
ssS'wid.pmw.optionmenu.opt.items'
p6574
(dp6575
g4
(lp6576
S'=option.verbatim'
p6577
asg6
S'{HOptionMenu - items}\n\nA sequence of strings containing the initial items to be displayed in the\nmenu component.\n\nThis should be either the name of a variable containing the sequence (which\nmust already exist when the code to create the OptionMenu instance is\nexecuted), or an actual sequence enclosed squard brackets or parenthesis as\nappropriate.\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.'
p6578
sg8
(lp6579
sg10
(lp6580
S'2006/03/21'
p6581
asg12
I0
sg13
(lp6582
sg15
(lp6583
ssS'color.cyan'
p6584
(dp6585
g51
(lp6586
sg53
S'{HCyans}\n\n {f#7FFFD4}  aquamarine\n {f#7FFFD4}  aquamarine1\n {f#76EEC6}  aquamarine2\n {f#66CDAA}  aquamarine3\n {f#458B74}  aquamarine4\n {f#00FFFF}  cyan\n {f#00FFFF}  cyan1\n {f#00EEEE}  cyan2\n {f#00CDCD}  cyan3\n {f#008B8B}  cyan4\n {f#008B8B}  dark cyan\n {f#00CED1}  dark turquoise\n {f#008B8B}  DarkCyan\n {f#00CED1}  DarkTurquoise\n {f#E0FFFF}  light cyan\n {f#E0FFFF}  LightCyan\n {f#E0FFFF}  LightCyan1\n {f#D1EEEE}  LightCyan2\n {f#B4CDCD}  LightCyan3\n {f#7A8B8B}  LightCyan4\n {f#66CDAA}  medium aquamarine\n {f#48D1CC}  medium turquoise\n {f#66CDAA}  MediumAquamarine\n {f#48D1CC}  MediumTurquoise\n {f#AFEEEE}  pale turquoise\n {f#AFEEEE}  PaleTurquoise\n {f#BBFFFF}  PaleTurquoise1\n {f#AEEEEE}  PaleTurquoise2\n {f#96CDCD}  PaleTurquoise3\n {f#668B8B}  PaleTurquoise4\n {f#40E0D0}  turquoise\n {f#00F5FF}  turquoise1\n {f#00E5EE}  turquoise2\n {f#00C5CD}  turquoise3\n {f#00868B}  turquoise4'
p6587
sg55
(lp6588
sg57
(lp6589
sg59
I0
sg60
(lp6590
sg62
(lp6591
ssS'wid.pmw.scrolledtext.opt.labelpos'
p6592
(dp6593
g4
(lp6594
sg6
S">option.pmw.labelpos.generic 'ScrolledText'"
p6595
sg8
(lp6596
sg10
(lp6597
sg12
I0
sg13
(lp6598
sg15
(lp6599
ssS'buffet.widget.timecounter'
p6600
(dp6601
g4
(lp6602
sg6
S'>buffet.widget.generic2 "Pmw.TimeCounter",\'\',\'wid.pmw.timecounter.overview\''
p6603
sg8
(lp6604
sg10
(lp6605
sg12
I0
sg13
(lp6606
sg15
(lp6607
ssS'code-edit.action.search'
p6608
(dp6609
g4
(lp6610
S'=search.dialog'
p6611
aS'&editor actions'
p6612
asg6
S'{HCode editor - Search}\n\n Key:   $tActionSearch\n Menu: {fSearch/Search}\n\nPuts up a {ldialog=search.dialog} which initiates a new search operation.\n\nOptions are provided to:\n\n o Search from the first line.\n o Search case sensitive or case insensitive.\n o Search forward or backward.\n o Search for straight text or a sub-set of regular expressions.\n\nCode &editor actions.'
p6613
sg8
(lp6614
sg10
(lp6615
S'2005/04/07'
p6616
asg12
I0
sg13
(lp6617
sg15
(lp6618
S'Code editor - Search'
p6619
assS'wid.tkinter.entry.opt.name'
p6620
(dp6621
g4
(lp6622
sg6
S'>option.name.generic "Entry"'
p6623
sg8
(lp6624
sg10
(lp6625
sg12
I0
sg13
(lp6626
sg15
(lp6627
ssS'wid.pmw.mainmenubar.opt.balloon'
p6628
(dp6629
g4
(lp6630
sg6
S"{HMainMenuBar - balloon}\n\nSpecifies a Pmw.Balloon to display the help text for menu items. If None, no\nhelp is displayed. If the balloon has an associated Pmw.MessageBar, the help\ntext will also be displayed there.\n\nDue to a bug in some versions of Tk (8.0 and possible others), help text will\nnot be displayed by the balloon. However, help text will be displayed in the\nballoon's associated messagebar. The default is None."
p6631
sg8
(lp6632
sg10
(lp6633
S'2006/03/20'
p6634
asg12
I0
sg13
(lp6635
sg15
(lp6636
ssS'search.dialog'
p6637
(dp6638
g4
(lp6639
sg6
S'{HCode Editor - Search Dialog}\n\nUse this to begin a search for specific text in your file.\n\nType the target text in the Entry area near the top.\n\no {GFrom first line}\n   If selected, then we start searching from the first line of text. If\n  this is not selected then the search starts from the current cursor\n  position. Note that if the {gbackwards} choice is selected then this\n  choice becomes "from last line".\n\no {GCase sensitive}\n   Normally searches are case insensitive. Check this if you want the\n  search to be case sensitive.\n\no {GBackwards}\n   Normally searches run in the forward direction. Check this if you want\n  the search to run in the backward direction. If this choice is selected\n  then the "from first line" choice becomes the "from last line" choice.\n\no {GRegular expression}\n   Normally search looks for a simple match with the specifed search\n  string. Check this choice to search using a sub-set of regular\n  expressions. Features supported are:\n\n  t {G. ^ $ [}c1...{G] (}...{g) * + ?  }e1 {G|} e2'
p6640
sg8
(lp6641
sg10
(lp6642
sg12
I0
sg13
(lp6643
sg15
(lp6644
S'Code editor - Search Dialog'
p6645
assS'option.type.generic'
p6646
(dp6647
g4
(lp6648
sg6
S"{H@0 - type}\n\nYou have a choice of:\n\n o {gnormal}\n o {gtearoff}\n o {gmenubar}\n\nAnd frankly Scarlet I don't know what the various choices do and I didn't\nfind any documentation that knew either. Perhaps at some point I will have\nthe ambition to run some experiments and find out but right now I don't. If\n{byou} have the ambition, then by all means run the experiments and then let\nme know at $mailto"
p6649
sg8
(lp6650
sg10
(lp6651
S'2005/04/05'
p6652
asg12
I0
sg13
(lp6653
sg15
(lp6654
ssS'wid.tkinter.button.opt.highlightcolor'
p6655
(dp6656
g4
(lp6657
sg6
S'>option.highlightcolor.generic "Button"'
p6658
sg8
(lp6659
sg10
(lp6660
sg12
I0
sg13
(lp6661
sg15
(lp6662
ssS'color.green'
p6663
(dp6664
g51
(lp6665
sg53
S'{HGreens}\n\n {f#006400}  dark green\n {f#BDB76B}  dark khaki\n {f#556B2F}  dark olive green\n {f#8FBC8F}  dark sea green\n {f#006400}  DarkGreen\n {f#BDB76B}  DarkKhaki\n {f#556B2F}  DarkOliveGreen\n {f#CAFF70}  DarkOliveGreen1\n {f#BCEE68}  DarkOliveGreen2\n {f#A2CD5A}  DarkOliveGreen3\n {f#6E8B3D}  DarkOliveGreen4\n {f#8FBC8F}  DarkSeaGreen\n {f#C1FFC1}  DarkSeaGreen1\n {f#B4EEB4}  DarkSeaGreen2\n {f#9BCD9B}  DarkSeaGreen3\n {f#698B69}  DarkSeaGreen4\n {f#228B22}  forest green\n {f#228B22}  ForestGreen\n {f#00FF00}  green\n {f#ADFF2F}  green yellow\n {f#00FF00}  green1\n {f#00EE00}  green2\n {f#00CD00}  green3\n {f#008B00}  green4\n {f#ADFF2F}  GreenYellow\n {f#F0E68C}  khaki\n {f#FFF68F}  khaki1\n {f#EEE685}  khaki2\n {f#CDC673}  khaki3\n {f#8B864E}  khaki4\n {f#7CFC00}  lawn green\n {f#7CFC00}  LawnGreen\n {f#90EE90}  light green\n {f#20B2AA}  light sea green\n {f#90EE90}  LightGreen\n {f#20B2AA}  LightSeaGreen\n {f#32CD32}  lime green\n {f#32CD32}  LimeGreen\n {f#3CB371}  medium sea green\n {f#00FA9A}  medium spring green\n {f#3CB371}  MediumSeaGreen\n {f#00FA9A}  MediumSpringGreen\n {f#6B8E23}  olive drab\n {f#6B8E23}  OliveDrab\n {f#C0FF3E}  OliveDrab1\n {f#B3EE3A}  OliveDrab2\n {f#9ACD32}  OliveDrab3\n {f#698B22}  OliveDrab4\n {f#98FB98}  pale green\n {f#98FB98}  PaleGreen\n {f#9AFF9A}  PaleGreen1\n {f#90EE90}  PaleGreen2\n {f#7CCD7C}  PaleGreen3\n {f#548B54}  PaleGreen4\n {f#2E8B57}  sea green\n {f#2E8B57}  SeaGreen\n {f#54FF9F}  SeaGreen1\n {f#4EEE94}  SeaGreen2\n {f#43CD80}  SeaGreen3\n {f#2E8B57}  SeaGreen4\n {f#00FF7F}  spring green\n {f#00FF7F}  SpringGreen\n {f#00FF7F}  SpringGreen1\n {f#00EE76}  SpringGreen2\n {f#00CD66}  SpringGreen3\n {f#008B45}  SpringGreen4\n {f#9ACD32}  yellow green\n {f#9ACD32}  YellowGreen'
p6666
sg55
(lp6667
sg57
(lp6668
sg59
I0
sg60
(lp6669
sg62
(lp6670
ssS'wid.tkinter.text.opt.state'
p6671
(dp6672
g4
(lp6673
sg6
S'>option.state.generic "Text"'
p6674
sg8
(lp6675
sg10
(lp6676
sg12
I0
sg13
(lp6677
sg15
(lp6678
ssS'bindassist.duplicatecomponent'
p6679
(dp6680
g4
(lp6681
S'&binding'
p6682
aS'&event'
p6683
aS'&binding'
p6684
aS'&bind assist'
p6685
aS'&bind editor'
p6686
aS'&bind assist'
p6687
asg6
S"{HBind Assist - Duplicate event on close}\n\nYou just clicked on {gOK} but there is already a &binding between the {g@1} component\nof this widget and the &event string {g@0}.\n\nIf what you want is to make changes to this existing &binding then:\n\n n Close the help window.\n\n n Click on {gCancel} to exit from the &bind assist.\n\n n Find the binding you want to work on in the &bind editor and click on it's\n   {P$img/pr-msc-assist.ppm} &bind assist button.\n\nIf you absolutely positively must have two bindings to the same event then you are\ngoing to have to do it manually. Put a {gbind} statement in the code just after the\nautomatically generated code that creates all the widgets and bindings."
p6688
sg8
(lp6689
sg10
(lp6690
S'2006/03/23'
p6691
aS'For the "component" case'
p6692
aS'@0 The event string'
p6693
aS'@1 The component'
p6694
asg12
I0
sg13
(lp6695
sg15
(lp6696
ssS'layout-frame-select'
p6697
(dp6698
g4
(lp6699
S'&frame'
p6700
aS'&frame'
p6701
aS'&frame'
p6702
aS'&frame'
p6703
aS'&frame'
p6704
aS'&frame'
p6705
aS'&frame'
p6706
aS'&frame'
p6707
aS'&frame'
p6708
aS'&frame'
p6709
aS'&frame'
p6710
aS'&frame'
p6711
aS'&frame'
p6712
aS'&frame'
p6713
asg6
S"{HSelecting frames}\n\n&Frames are selected by clicking on a blank spot (that it, a spot that is not\noccupied by a widget or a frame line) within that &frame. The currently\nselected &frame is marked by a gray border just inside it's outline.\n\n&Frames can be nested within other &frames. If you click inside a series of\nnested &frames, there is some question as to which &frame you are trying to\nselect. It works like this:\n\no If the currently selected item is a widget or a &frame which does not\n  include the clicked-on spot, then the inner most &frame around the\n  clicked-on spot is selected.\n\no If the currently selected item is a &frame which includes the clicked-on\n  spot then $$ attempts to selected the next larger &frame. If the currently\n  selected &frame is the largest frame (that is, the form itself) then there\n  is no larger &frame and $$ cycles back to the beginning by selecting the\n  innermost &frame around the clicked-on spot.\n\nThe net result is that if you repeatedly click on a blank spot within a group\nof nested frames, then with each click you cycle through the frames, from\nsmallest to largest, as long as you keep clicking."
p6714
sg8
(lp6715
S'select the frame'
p6716
asg10
(lp6717
S'2005/05/19'
p6718
asg12
I0
sg13
(lp6719
sg15
(lp6720
S'How to: Select frames in the layout area'
p6721
assS'bindassist.duplicateevent'
p6722
(dp6723
g4
(lp6724
S'&binding'
p6725
aS'&event'
p6726
aS'&binding'
p6727
aS'&bind assist'
p6728
aS'&bind editor'
p6729
aS'&bind assist'
p6730
asg6
S"{HBind Assist - Duplicate event on close}\n\nYou just clicked on {gOK} but the current widget already has an existing\n&binding to the &event string {g@0}.\n\nIf what you want is to make changes to this existing &binding then:\n\n n Close the help window.\n\n n Click on {gCancel} to exit from the &bind assist.\n\n n Find the binding you want to work on in the &bind editor and click on it's\n   {P$img/pr-msc-assist.ppm} &bind assist button.\n\nIf you absolutely positively must have two bindings to the same event then\nyou are going to have to do it manually. Put a {gbind} statement in the code\njust after the automatically generated code that creates all the widgets."
p6731
sg8
(lp6732
sg10
(lp6733
S'2005/05/12'
p6734
asg12
I0
sg13
(lp6735
sg15
(lp6736
ssS'wid.tkinter.entry.opt.selectbackground'
p6737
(dp6738
g4
(lp6739
sg6
S'>option.selectbackground.generic "Entry", "text"'
p6740
sg8
(lp6741
sg10
(lp6742
sg12
I0
sg13
(lp6743
sg15
(lp6744
ssS'option.digits.generic'
p6745
(dp6746
g4
(lp6747
S'&control variable'
p6748
aS'&new mexico tech'
p6749
asg6
S'{H@0 - digits}\n\nThe way your program reads the current value shown in a scale widget is\nthrough a &control variable.\n\nThe control variable for a @0 can be an integer (IntVar), a float\n(DoubleVar), or a string (StringVar). If it is a string variable, the\n{bdigits} option controls how many digits to use when the numeric scale value\nis converted to a string.\n\n$nmt'
p6750
sg8
(lp6751
sg10
(lp6752
S'2005/03/02'
p6753
asg12
I0
sg13
(lp6754
sg15
(lp6755
ssS'bind.eventwizard.keytype'
p6756
(dp6757
g4
(lp6758
sg6
S'{HBind Event Wizard - any / physical / logical}\n\nYou are in the midst of describing a key related &event. The &event can be set to\nrespond to:\n\n o Any key, or\n o A particular key.\n\nIf you want the &event to respond to {bany key}, then select that choice and\nclick on {gNext} continue.\n\nIf you want the &event to respond to a particular key then there are two ways to\nspecify that one key. We\'re going to give you short and long explanations.\n\n{BThe Short Story}\n\nIf the key or key-combination you want your &event to respond to consists ONLY of\none or more of {GAlt, Control, Shift,} or {GCapsLock}, then select the "physical\nkey" radiobutton. Otherwise select the "logical key" radiobutton. Having made\nthe selection, click on {GNext} to continue to the step where you select the\nactual key.\n\n\n{BThe Long Story}\n\nIn either case, having picked physical or logical, the next step will have you\nchoose the actual key. The difference is in {bhow} you choose the key.\n\nn {GPhysical key}. This choice has you press a single key, and that single key\n  can be ANY of the keys that your operating system knows about including keys\n  that aren\'t normally considered to be "actual" keys, like {GAlt, Control,\n  Shift} and {GCapsLock}.\n\n  Having picked your key, then you choose any modifiers, possibly none, to apply\n  to that key. When using the Wizard this is the only way you can specify a key\n  combination that involves ONLY special keys. If you want your &event to respond\n  to the {GControl-Shift-CapsLock} combination then "physical key" is the method\n  for you.\n\n  Of course, since with this method you can pick any key and then apply any\n  modifier, you can generate any legal key combination with this method so in\n  one sense it\'s all that\'s needed. But it is a two step process rather than a\n  one step process.\n\nn {GLogical key}. This choice has you press any allowable key combination that\n  involves a "normal" key (ie a graphic or function key) along with any of the\n  allowable modifier keys ({GAlt, Control, Shift,} and {GCapsLock}.\n\n  The good news about this choice is that you get to select your key, including\n  possible modifiers, in one simple, painless step.\n\n  The bad news about this choice is that at least one "normal" character must be\n  involved. If you want to respond to, for example, {GControl-Shift} by itself,\n  you can\'t specify that with this method; use the "physical" method instead.\n\n  Therefore, "logical" is the method of choice unless the key combination you\n  have in mind consists solely of some combination of {GAlt, Control, Shift} and\n  {gCapsLock}.\n\n\n{BThe author whines about Tk}\n\nI was disapointed that {GTk} apparently offers no way of saying "bind this event\nto any {GControl} key. You can bind to {GControl_L} or you can bind to\n{GControl_R} but you can\'t (or at least I was unable to find a way to) bind to\neither. You can specify multiple entries in a single event string (the Wizard\ndoesn\'t support this but you can do it manually) so that an event string like:\n\nt {G"<Alt_L><Alt_R><Down>"}\n\nwould trip the event if the user presses the {GAlt_L} key, then presses the\n{GAlt_R} key then presses the {Gcursor down} key. In theory you could make them\nkey in {IWar and Peace}. But you can\'t bind to "any Control key".\n\nAnother annoyance is that you can\'t not pay attention to shift. There is no way\nto specify "the {GA} key and I don\'t care about the state of {GShift}". You can\nbind to "a", and you can bind to "A" but you can\'t bind to either. This leads to\nlogical absurdities like\n\nt {G"<Shift-KeyPress-a>"}\n\nwhich specifies an event which can never occur, unless you happen to own a\nkeyboard on which you have to press {gShift} to get {glower case "a"}.\n\nFor both these situation the best you can do is bind to any keypress and then,\nin your event handler, look at {Gevent.keysym} or {Gevent.keycode} to pick out\nthe ones you want.\n\nIf I am wrong on this, by all means get in touch at $mailto.'
p6759
sg8
(lp6760
sg10
(lp6761
S'2005/03/14'
p6762
asg12
I0
sg13
(lp6763
sg15
(lp6764
S'Bind Event Wizard - Any / Physical / Logical'
p6765
assS'option.sliderlength.generic'
p6766
(dp6767
g4
(lp6768
S'&dimension'
p6769
asg6
S'{H@0 - sliderlength}\n\nA &dimensioned variable which specifies the length of the slider.'
p6770
sg8
(lp6771
sg10
(lp6772
S'2005/04/04'
p6773
asg12
I0
sg13
(lp6774
sg15
(lp6775
ssS'wid.tkinter.radiobutton.opt.padx'
p6776
(dp6777
g4
(lp6778
sg6
S'>option.padx.generic "Radiobutton","Radiobutton and text"'
p6779
sg8
(lp6780
sg10
(lp6781
sg12
I0
sg13
(lp6782
sg15
(lp6783
ssS'wid.tkinter.radiobutton.opt.pady'
p6784
(dp6785
g4
(lp6786
sg6
S'>option.pady.generic "Radiobutton","Radiobuton and text"'
p6787
sg8
(lp6788
sg10
(lp6789
sg12
I0
sg13
(lp6790
sg15
(lp6791
ssS'layout-area'
p6792
(dp6793
g4
(lp6794
S'&layout editor'
p6795
aS'&code editor'
p6796
aS'&layout editor'
p6797
aS'&code editor'
p6798
aS'=layoutarea.formtab'
p6799
asg6
S'{HLayout Area}\n\nThe layout area is the large area on the right side of the $$ window. It is timeshared between the &layout editor\nand the &code editor.\n\no {bLayout editor}\n   The &layout editor is where you create frames and place widgets.\n\no {bCode editor}\n   The &code editor is where you create and edit the Python code of a form.\n\nYou can snap back and forth between the layout editor and the code editor in any of three ways:\n\n o Pressing the {G$tActionFormSwapCodeLayout} key.\n o From the {GForms} menu clicking on the {gSwap code/layout} choice.\n o Clicking on the {Ltab=layoutarea.formtab} of the already selected form.'
p6800
sg8
(lp6801
S'layout area'
p6802
asg10
(lp6803
S'2006/01/26'
p6804
asg12
I0
sg13
(lp6805
sg15
(lp6806
S'The Layout Area'
p6807
assS'wid.pmw.radioselect.opt.pady'
p6808
(dp6809
g4
(lp6810
S'&default'
p6811
asg6
S'{HRadioSelect - pady}\n\nSpecifies a padding distance to leave between each button in the y direction and also between the buttons and the\nouter edge of the radio select. The default is 5.'
p6812
sg8
(lp6813
sg10
(lp6814
S'2006/03/21'
p6815
asg12
I0
sg13
(lp6816
sg15
(lp6817
ssS'option.pmw.padx.generic'
p6818
(dp6819
g4
(lp6820
sg6
S'{H@0 - padx}\n\nSpecifies a padding distance to leave between each @1 in the {gx} direction\nand also between the @1s and the outer edge of the @0. The default is {g@2}.'
p6821
sg8
(lp6822
sg10
(lp6823
S'2006/03/18'
p6824
aS'@1 - Name of the component the space is between eg button'
p6825
aS'@2 - Default'
p6826
asg12
I0
sg13
(lp6827
sg15
(lp6828
ssS'wid.pmw.labeledwidget.opt.name'
p6829
(dp6830
g4
(lp6831
sg6
S">option.name.generic 'LabeledWidget'"
p6832
sg8
(lp6833
sg10
(lp6834
sg12
I0
sg13
(lp6835
sg15
(lp6836
ssS'wid.tkinter.button.opt.justify'
p6837
(dp6838
g4
(lp6839
sg6
S'>option.justify.generic "Button"'
p6840
sg8
(lp6841
sg10
(lp6842
sg12
I0
sg13
(lp6843
sg15
(lp6844
ssS'wid.tkinter.listbox.opt.cursor'
p6845
(dp6846
g4
(lp6847
sg6
S'>option.cursor.generic "Listbox"'
p6848
sg8
(lp6849
sg10
(lp6850
sg12
I0
sg13
(lp6851
sg15
(lp6852
ssS'wid.tkinter.scale.opt.cursor'
p6853
(dp6854
g4
(lp6855
sg6
S'>option.cursor.generic "Scale"'
p6856
sg8
(lp6857
sg10
(lp6858
sg12
I0
sg13
(lp6859
sg15
(lp6860
ssS'wid.tkinter.scale.opt.borderwidth'
p6861
(dp6862
g4
(lp6863
S'&dimension'
p6864
asg6
S'{HScale - borderwidth}\n\nA &dimensioned number giving the width of the 3-d border around the trough\nand slider.'
p6865
sg8
(lp6866
sg10
(lp6867
S'2005/04/27'
p6868
asg12
I0
sg13
(lp6869
sg15
(lp6870
ssS'wid.tkinter.entry.opt.pyclass'
p6871
(dp6872
g4
(lp6873
sg6
S'>option.pyclass.generic "Entry"'
p6874
sg8
(lp6875
sg10
(lp6876
sg12
I0
sg13
(lp6877
sg15
(lp6878
ssS'colors.red'
p6879
(dp6880
g51
(lp6881
sg53
S'{HReds}\n\n {f#8B0000}  dark red\n {f#E9967A}  dark salmon\n {f#8B0000}  DarkRed\n {f#E9967A}  DarkSalmon\n {f#D70751}  DebianRed\n {f#FF1493}  deep pink\n {f#FF1493}  DeepPink\n {f#FF1493}  DeepPink1\n {f#EE1289}  DeepPink2\n {f#CD1076}  DeepPink3\n {f#8B0A50}  DeepPink4\n {f#B22222}  firebrick\n {f#FF3030}  firebrick1\n {f#EE2C2C}  firebrick2\n {f#CD2626}  firebrick3\n {f#8B1A1A}  firebrick4\n {f#FF69B4}  hot pink\n {f#FF69B4}  HotPink\n {f#FF6EB4}  HotPink1\n {f#EE6AA7}  HotPink2\n {f#CD6090}  HotPink3\n {f#8B3A62}  HotPink4\n {f#CD5C5C}  indian red\n {f#CD5C5C}  IndianRed\n {f#FF6A6A}  IndianRed1\n {f#EE6363}  IndianRed2\n {f#CD5555}  IndianRed3\n {f#8B3A3A}  IndianRed4\n {f#FFB6C1}  light pink\n {f#FFA07A}  light salmon\n {f#FFB6C1}  LightPink\n {f#FFAEB9}  LightPink1\n {f#EEA2AD}  LightPink2\n {f#CD8C95}  LightPink3\n {f#8B5F65}  LightPink4\n {f#FFA07A}  LightSalmon\n {f#FFA07A}  LightSalmon1\n {f#EE9572}  LightSalmon2\n {f#CD8162}  LightSalmon3\n {f#8B5742}  LightSalmon4\n {f#C71585}  medium violet red\n {f#C71585}  MediumVioletRed\n {f#FFE4E1}  misty rose\n {f#FFE4E1}  MistyRose\n {f#FFE4E1}  MistyRose1\n {f#EED5D2}  MistyRose2\n {f#CDB7B5}  MistyRose3\n {f#8B7D7B}  MistyRose4\n {f#FF4500}  orange red\n {f#FF4500}  OrangeRed\n {f#FF4500}  OrangeRed1\n {f#EE4000}  OrangeRed2\n {f#CD3700}  OrangeRed3\n {f#8B2500}  OrangeRed4\n {f#DB7093}  pale violet red\n {f#DB7093}  PaleVioletRed\n {f#FF82AB}  PaleVioletRed1\n {f#EE799F}  PaleVioletRed2\n {f#CD6889}  PaleVioletRed3\n {f#8B475D}  PaleVioletRed4\n {f#FFC0CB}  pink\n {f#FFB5C5}  pink1\n {f#EEA9B8}  pink2\n {f#CD919E}  pink3\n {f#8B636C}  pink4\n {f#FF0000}  red\n {f#FF0000}  red1\n {f#EE0000}  red2\n {f#CD0000}  red3\n {f#8B0000}  red4\n {f#FA8072}  salmon\n {f#FF8C69}  salmon1\n {f#EE8262}  salmon2\n {f#CD7054}  salmon3\n {f#8B4C39}  salmon4\n {f#FF6347}  tomato\n {f#FF6347}  tomato1\n {f#EE5C42}  tomato2\n {f#CD4F39}  tomato3\n {f#8B3626}  tomato4\n {f#D02090}  violet red\n {f#D02090}  VioletRed\n {f#FF3E96}  VioletRed1\n {f#EE3A8C}  VioletRed2\n {f#CD3278}  VioletRed3\n {f#8B2252}  VioletRed4'
p6882
sg55
(lp6883
sg57
(lp6884
sg59
I0
sg60
(lp6885
sg62
(lp6886
ssS'wid.pmw.combobox.opt.popup'
p6887
(dp6888
g4
(lp6889
sg6
S'{HComboBox - popup}\n\nIn a dropdown ComboBox, the dropdown window.'
p6890
sg8
(lp6891
sg10
(lp6892
S'2006/03/17'
p6893
asg12
I0
sg13
(lp6894
sg15
(lp6895
ssS'option.pmw.hscrollmode.generic'
p6896
(dp6897
g4
(lp6898
S'&default'
p6899
asg6
S"{H@0 - hscrollmode}\n\nThe horizontal scroll mode. If 'none', the horizontal scrollbar will never be\ndisplayed. If 'static', the scrollbar will always be displayed. If 'dynamic',\nthe scrollbar will be displayed only if necessary. The &default is 'dynamic'."
p6900
sg8
(lp6901
sg10
(lp6902
S'2006/03/22'
p6903
asg12
I0
sg13
(lp6904
sg15
(lp6905
ssS'wid.tkinter.menubutton.opt.activeforeground'
p6906
(dp6907
g4
(lp6908
sg6
S'>option.activeforeground.generic "Menubutton"'
p6909
sg8
(lp6910
sg10
(lp6911
sg12
I0
sg13
(lp6912
sg15
(lp6913
ssS'code-edit.findmatch'
p6914
(dp6915
g4
(lp6916
sg6
S'{HCode editor - find matching}\n\nIf the character to the right of the cursor is a\n\n o Square bracket [ ]\n o Curly bracket   {{ }\n o Parentheses    ( )\n\nthen this action looks for and highlights in red the matching character.'
p6917
sg8
(lp6918
sg10
(lp6919
S'2005/04/16'
p6920
asg12
I0
sg13
(lp6921
sg15
(lp6922
S'Code editor - find matching bracket, brace, parenthesis'
p6923
assS'wid.pmw.entryfield.opt.label'
p6924
(dp6925
g4
(lp6926
sg6
S">option.pmw.label.generic 'EntryField'"
p6927
sg8
(lp6928
sg10
(lp6929
sg12
I0
sg13
(lp6930
sg15
(lp6931
ssS'buffet.widget.messagebar'
p6932
(dp6933
g4
(lp6934
sg6
S'>buffet.widget.generic2 "Pmw.MessageBar", \'\', \'wid.pmw.messagebar.overview\''
p6935
sg8
(lp6936
sg10
(lp6937
sg12
I0
sg13
(lp6938
sg15
(lp6939
ssS'code-edit.action.redo'
p6940
(dp6941
g3262
(lp6942
sg3264
S"{HCode editor - Redo}\n\n Key:   $tActionRedo\n Menu: {fEdit/Redo}\n\nRedo can be used ONLY immediately after one or more undo/redo operations. It undoes the undo. Note that, following a\nseries of undo and redo operations, the first operation that isn't undo/redo - even cursor motion - clears the redo\nbuffer which puts an end to any redo operations at that point.\n\nMostly redo is useful for when you are using undo to back out a bunch of changes and you go a bit too far. At that\npoint judicious use redo can get you back to where you want to be."
p6943
sg3266
(lp6944
sg3268
(lp6945
S'2014-04-16'
p6946
asg3271
I0
sg3272
(lp6947
sg3274
(lp6948
S'Code editor - Redo'
p6949
assS'wid.tkinter.scrollbar.opt.highlightcolor'
p6950
(dp6951
g4
(lp6952
sg6
S'>option.highlightcolor.generic "Scrollbar"'
p6953
sg8
(lp6954
sg10
(lp6955
sg12
I0
sg13
(lp6956
sg15
(lp6957
ssS'wid.tkinter.scrollbar.opt.pyclass'
p6958
(dp6959
g4
(lp6960
sg6
S'>option.pyclass.generic "Scrollbar"'
p6961
sg8
(lp6962
sg10
(lp6963
sg12
I0
sg13
(lp6964
sg15
(lp6965
ssS'wid.pmw.scrolledlistbox.opt.listbox'
p6966
(dp6967
g4
(lp6968
sg6
S'{HScrolledListBox - listbox}\n\nThe listbox widget which is scrolled by the scrollbars.'
p6969
sg8
(lp6970
sg10
(lp6971
S'2006/03/23'
p6972
asg12
I0
sg13
(lp6973
sg15
(lp6974
ssS'wid.tkinter.radiobutton.opt.width'
p6975
(dp6976
g4
(lp6977
sg6
S'>option.width.generic "Radiobutton"'
p6978
sg8
(lp6979
sg10
(lp6980
sg12
I0
sg13
(lp6981
sg15
(lp6982
ssS'wid.tkinter.scrollbar.opt.activebackground'
p6983
(dp6984
g4
(lp6985
S'&color'
p6986
aS'&new mexico tech'
p6987
asg6
S'{HScrollbar - activebackground}\n\nThe &color of the slider and arrowheads when the mouse is over them.\n\n$nmt'
p6988
sg8
(lp6989
sg10
(lp6990
S'2005/04/27'
p6991
asg12
I0
sg13
(lp6992
sg15
(lp6993
ssS'option.selectborderwidth.generic'
p6994
(dp6995
g4
(lp6996
S'&new mexico tech'
p6997
asg6
S'{H@0 - selectborderwidth}\n\nA &dimensioned number giving the width of the border to use around selected @1.\n\n$nmt'
p6998
sg8
(lp6999
sg10
(lp7000
S'2005/03/06'
p7001
asg12
I0
sg13
(lp7002
sg15
(lp7003
ssS'binding.whatis'
p7004
(dp7005
g4
(lp7006
S'&event'
p7007
aS'&handler'
p7008
aS'&event'
p7009
aS'&handler'
p7010
aS'&maintained'
p7011
aS'&maintained'
p7012
aS'&bind editor'
p7013
aS'&command option'
p7014
aS'&option editor'
p7015
asg6
S'{HBindings}\n\nA binding is a connection between an &event and a &handler such that when the\n&event happens the &handler is called.\n\nMost bindings are &maintained by $$ but bindings can be created manually by the\nuser.\n\nMost $$ &maintained bindings are handled by the &bind editor but some widgets\nhave one or more &command options which are a kind of binding (eg the Button\nwidget has an option where you specify what function to call when the button is\npressed) and these are handled by the &option editor.'
p7016
sg8
(lp7017
S'binding'
p7018
asg10
(lp7019
S'2006/02/07'
p7020
asg12
I0
sg13
(lp7021
sg15
(lp7022
S'What is: A binding'
p7023
assS'bindassist.handlerinvalidname'
p7024
(dp7025
g4
(lp7026
S'&event'
p7027
aS'&handler'
p7028
aS'&binding'
p7029
aS'&event'
p7030
aS'&handler'
p7031
aS'&event'
p7032
aS'&handler'
p7033
aS'&recommend'
p7034
aS'&handler'
p7035
aS'&bind assist'
p7036
aS'&binding'
p7037
aS'&binding'
p7038
aS'&binding'
p7039
aS'&binding'
p7040
aS'&handler'
p7041
aS'&event'
p7042
asg6
S'{HBind Assist - Handler name invalid on close}\n\nYou just clicked on {gOK} but the &event &handler name is not a valid Python name.\n\nTo have a valid &binding, a non-blank &event string and a valid name of the\n&handler for the &event are required.\n\nA valid &handler name:\n\n o Starts with a letter or underscore (_).\n o If longer than one character, it continues with letters, digits or\n   underscore.\n\nThe $$ team &recommends using &handler names of the\nform "{gon_widgetname_whatever}".\n\n\no To exit the &Bind Assist without changing any &bindings, use the {gCancel}\n  button.\n\no If you were about to create a new &binding but changed your mind, use the\n  {gCancel} button\n\no If you want to delete the current &binding, use the {gDelete} button.\n\no To make this a valid &binding, enter or select the name of the &handler for this\n  &event in the combo box just above the buttons.'
p7043
sg8
(lp7044
sg10
(lp7045
S'2005/03/15'
p7046
asg12
I0
sg13
(lp7047
sg15
(lp7048
ssS'wid.pmw.scrolledlistbox.opt.pyclass'
p7049
(dp7050
g4
(lp7051
sg6
S'>option.pyclass.generic "ScrolledListBox"'
p7052
sg8
(lp7053
sg10
(lp7054
sg12
I0
sg13
(lp7055
sg15
(lp7056
ssS'wid.tkinter.scrollbar.opt.background'
p7057
(dp7058
g4
(lp7059
S'&new mexico tech'
p7060
asg6
S'{HScrollbar - background}\n\nThe color of the slider and arrowheads when the mouse is not over them.\n\n$nmt'
p7061
sg8
(lp7062
sg10
(lp7063
S'2005/04/27'
p7064
asg12
I0
sg13
(lp7065
sg15
(lp7066
ssS'wid.pmw.scrolledtext.opt.border-frame'
p7067
(dp7068
g4
(lp7069
sg6
S'{HScrolledText - borderframe}\n\nIf true, the {gborderframe component} will be created. The default is False.'
p7070
sg8
(lp7071
sg10
(lp7072
S'2006/03/23'
p7073
asg12
I0
sg13
(lp7074
sg15
(lp7075
ssS'option.bitmap.generic'
p7076
(dp7077
g4
(lp7078
S'&bitmap'
p7079
asg6
S'{H@0 - bitmap}\n\nEnter a &bitmap-designation if you want a bitmap to be displayed on this @0.\n\nIf you supply both text and bitmap options, then the text option is ignored\nand the bitmap option is used.'
p7080
sg8
(lp7081
sg10
(lp7082
S'2005/02/26'
p7083
asg12
I0
sg13
(lp7084
sg15
(lp7085
ssS'wid.tkinter.scale.opt.troughcolor'
p7086
(dp7087
g4
(lp7088
sg6
S'>option.troughcolor.generic "Scale"'
p7089
sg8
(lp7090
sg10
(lp7091
sg12
I0
sg13
(lp7092
sg15
(lp7093
ssS'wid.tkinter.scale.opt.activebackground'
p7094
(dp7095
g4
(lp7096
S'&color'
p7097
aS'&new mexico tech'
p7098
asg6
S'{HScale - activebackground}\n\nThe &color of the slider when the mouse is over it.\n\n$nmt'
p7099
sg8
(lp7100
sg10
(lp7101
S'2005/04/27'
p7102
asg12
I0
sg13
(lp7103
sg15
(lp7104
ssS'option.validate.generic'
p7105
(dp7106
g4
(lp7107
S'=option.validatecommand.generic'
p7108
asg6
S'{H@0 - validate}\n\nSpecifies when validation should be done. Choices are:\n\n o {gfocus   } Validate whenever the widget gets or loses the focus.\n o {gfocusin } Validate only when the widget gets the focus.\n o {gfocusout} Validate when the widget loses the focus.\n o {gkey     } Validate on any modification of the text.\n o {gall     } All of the above.\n\nDefault is {gnone} (no validation).\n\nThe actual validation is done by the command specified in the\n{lvalidatecommand=option.validatecommand.generic} option.'
p7109
sg8
(lp7110
sg10
(lp7111
S'2005/04/05'
p7112
asg12
I0
sg13
(lp7113
sg15
(lp7114
ssS'wid.tkinter.button.opt.default'
p7115
(dp7116
g4
(lp7117
sg6
S'>option.default.generic "Button"'
p7118
sg8
(lp7119
sg10
(lp7120
sg12
I0
sg13
(lp7121
sg15
(lp7122
ssS'wid.pmw.timecounter.opt.buttonaspect'
p7123
(dp7124
g4
(lp7125
sg6
S">option.pmw.buttonaspect.generic 'TimeCounter', 'arrow button'"
p7126
sg8
(lp7127
sg10
(lp7128
sg12
I0
sg13
(lp7129
sg15
(lp7130
ssS'wid.pmw.menubar.opt.name'
p7131
(dp7132
g4
(lp7133
sg6
S">option.name.generic 'MenuBar'"
p7134
sg8
(lp7135
sg10
(lp7136
sg12
I0
sg13
(lp7137
sg15
(lp7138
ssS'whatis.widget'
p7139
(dp7140
g4
(lp7141
S'&form'
p7142
aS'&layout editor'
p7143
aS'&widget buffet'
p7144
aS'&widgetator'
p7145
aS'&option editor'
p7146
aS'&bind editor'
p7147
aS'&pack editor'
p7148
asg6
S'{HWhat is: A widget}\n\nAs far as $$ is concerned there are two kinds of widgets:\n\no {gFrame Widgets}\n   Divide you &form up into rectangular areas. Frame widgets are created and\n  maintained using the &layout editor. \n  \no {gRegular Widgets}\n   Are things like Buttons, ListBoxes and the like. They are created by\n  dragging them from the &Widget Buffet.\n  \nThe &Widgetator contains an &option editor, a &bind editor and a &pack\neditor which helps you view and set the options of both kinds of widgets.'
p7149
sg8
(lp7150
S'a widget'
p7151
aS'the widget'
p7152
asg10
(lp7153
S'2006/02/17'
p7154
asg12
I0
sg13
(lp7155
sg15
(lp7156
S'What is: A Widget'
p7157
assS'option.pmw.hotkeys.generic'
p7158
(dp7159
g4
(lp7160
S'&default'
p7161
asg6
S'{H@0 - hotkeys}\n\nIf true, keyboard accelerators will be assigned to each menu item. Keyboard\naccelerators can be used to access the menus without using the mouse. The\naccelerator character is always one of the alphanumeric characters in the\ntext label of the menu item and is indicated by an underline.\n\nTo select a menu, simultaneously press the <Alt> key and the accelerator\ncharacter indicated on a toplevel menu item. The arrows keys can then be used\nto select other menus and menu items. To invoke a menu item, press <Return>\nor press the accelerator character indicated on the menu item.\n\nEach accelerator character will be assigned automatically unless {itraverseSpec}\nis supplied to the {faddmenu(), addmenuitem()} or {faddcascademenu()} methods. The\nautomatically selected accelerator character for a menu item is the first\ncharacter in the label text that has not already been used as an accelerator\nin the menu containing the menu item.\n\nIf {itraverseSpec} is given, it must be either an integer or a character. If an\ninteger, it specifies the index of the character in the label text to use as\nthe accelerator character. If a character, it specifies the character to use\nas the accelerator character. The &default is True.'
p7162
sg8
(lp7163
sg10
(lp7164
S'2006/03/20'
p7165
asg12
I0
sg13
(lp7166
sg15
(lp7167
ssS'buffet.widget.generic'
p7168
(dp7169
g4
(lp7170
S'&widget buffet'
p7171
aS'&layout area'
p7172
aS'&form'
p7173
asg6
S'{HWidget Buffet - @0 Icon}\n\nThis is the @0 icon on the &widget buffet, which is itself part of the\n&layout area. Drag from this icon to place a@1 @0 widget on your &form.'
p7174
sg8
(lp7175
sg10
(lp7176
S'2005/04/06'
p7177
aS'@0 - Name of the widget'
p7178
aS"@1 - 'n' if the widget starts with a vowel, else ''"
p7179
asg12
I0
sg13
(lp7180
sg15
(lp7181
ssS'wid.pmw.scrolledcanvas.opt.hscrollmode'
p7182
(dp7183
g4
(lp7184
sg6
S">option.pmw.hscrollmode.generic 'ScrolledCanvas'"
p7185
sg8
(lp7186
sg10
(lp7187
sg12
I0
sg13
(lp7188
sg15
(lp7189
ssS'wid.pmw.timecounter.opt.min'
p7190
(dp7191
g4
(lp7192
sg6
S'{HTimeCOunter - min}\n\nSpecifies the minimum acceptable time in the form "HH:MM:SS".'
p7193
sg8
(lp7194
sg10
(lp7195
S'2006/03/24'
p7196
asg12
I0
sg13
(lp7197
sg15
(lp7198
ssS'option.selectbackground.generic'
p7199
(dp7200
g4
(lp7201
S'&color'
p7202
aS'&new mexico tech'
p7203
asg6
S'{H@0 - selectbackground}\n\nThe background &color to use when displaying selected @1.\n\n$nmt'
p7204
sg8
(lp7205
sg10
(lp7206
S'2005/03/06'
p7207
asg12
I0
sg13
(lp7208
sg15
(lp7209
ssS'wid.tkinter.entry.opt.invalidcommand'
p7210
(dp7211
g4
(lp7212
sg6
S'>option.invalidcommand.generic "Entry"'
p7213
sg8
(lp7214
sg10
(lp7215
sg12
I0
sg13
(lp7216
sg15
(lp7217
ssS'wid.tkinter.listbox.opt.selectbackground'
p7218
(dp7219
g4
(lp7220
sg6
S'>option.selectbackground.generic "Listbox", "text"'
p7221
sg8
(lp7222
sg10
(lp7223
sg12
I0
sg13
(lp7224
sg15
(lp7225
ssS'wid.tkinter.text.opt.exportselection'
p7226
(dp7227
g4
(lp7228
sg6
S'>option.exportselection.generic "Text"'
p7229
sg8
(lp7230
sg10
(lp7231
sg12
I0
sg13
(lp7232
sg15
(lp7233
ssS'wid.pmw.entryfield.opt.extravalidators'
p7234
(dp7235
g4
(lp7236
sg6
S'{HEntryField - extravalidators}\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.\n\nThis is a dictionary of extra validators. The keys are the names of validators\nwhich may be used in a future call to the {gvalidate} option. Each value in the\ndictionary is a tuple of ({ivalidate_function, stringtovalue_function}).\n\nThe {ivalidate_function} is used to implement the validation and the\n{istringtovalue_function} is used to convert the entry input into a value which\ncan be compared with the minimum and maximum limits. These functions are as\ndescribed for the {gvalidate} option.\n\nIf either of these is not given as a function, it is assumed to be the name of one\nof the other extra validators or one of the standard validators. The alias search\nis performed when the {gvalidate} option is configured, not when the\n{gextravalidators} option is configured or when the {gvalidate} function is\ncalled.\n\nIf the name of one of the extra validators is the same as one of the standard\nvalidators, the extra validator takes precedence.'
p7237
sg8
(lp7238
sg10
(lp7239
S'2006/03/19'
p7240
asg12
I0
sg13
(lp7241
sg15
(lp7242
ssS'wid.pmw.optionmenu.opt.labelmargin'
p7243
(dp7244
g4
(lp7245
sg6
S">option.pmw.labelmargin.generic 'OptionMenu'"
p7246
sg8
(lp7247
sg10
(lp7248
sg12
I0
sg13
(lp7249
sg15
(lp7250
ssS'wid.tkinter.label.opt.activeforeground'
p7251
(dp7252
g4
(lp7253
S'&color'
p7254
asg6
S'>option.activeforeground.generic "Label"\n#!!! Does this really apply? The manual doesn\'t mention\n#\'active\' for labels'
p7255
sg8
(lp7256
sg10
(lp7257
sg12
I0
sg13
(lp7258
sg15
(lp7259
ssS'layout.module-indicator'
p7260
(dp7261
g4
(lp7262
S'&project'
p7263
aS'&module'
p7264
aS'&module'
p7265
asg6
S'{hThe Module Indicator}: {P$imgpr-help-ModuleIndicator.ppm}\n\n\nA &project can consist of many &modules. The module indicator, in the upper right\ncorner of the $$ window, shows the name of the current &module.\n\n o {b$tActionModuleAlternate} conviently switches between the current and previous\n   module.\n\n o {b$tActionModuleNext} steps through the modules in alpahbetic order.\n\n o To work on a specific module call up the {bModule} menu then use the {bModule\n   Select} choice.'
p7266
sg8
(lp7267
sg10
(lp7268
S'2006/01/24'
p7269
asg12
I0
sg13
(lp7270
sg15
(lp7271
S'What is: The Module Indicator'
p7272
assS'wid.pmw.counter.opt.downarrow'
p7273
(dp7274
g4
(lp7275
sg6
S'{HCounter - downarrow}\n\nThe arrow button used for decrementing the counter. Depending of the value\nof {gorient}, it will appear on the left of or below the entry field.'
p7276
sg8
(lp7277
sg10
(lp7278
S'2006/03/18'
p7279
asg12
I0
sg13
(lp7280
sg15
(lp7281
ssS'wid.tkinter.button.opt.command'
p7282
(dp7283
g4
(lp7284
S'&command option'
p7285
aS'&event'
p7286
aS'&handler'
p7287
aS'&handler'
p7288
aS'&command option'
p7289
aS'&handler'
p7290
aS'&command option'
p7291
aS'&handler'
p7292
aS'&handler'
p7293
aS'&handler'
p7294
aS'&code editor'
p7295
asg6
S'{HButton - command}\n\nThis &command option specifies the name of the &event &handler to be called\nwhen the button is clicked.\n If no &handler is currently associated with this &command option then clicking\non the {P$imgpr-help-Assist.ppm} "assist" icon will allow you to easily create a &handler and\nassociate it with this &command option.\n\nIf this option already specifies a &handler then double-clicking on the name\nof the &handler in the option-editor will immediately take you to that &handler\nin the &code editor.'
p7296
sg8
(lp7297
sg10
(lp7298
S'2005/04/07'
p7299
asg12
I0
sg13
(lp7300
sg15
(lp7301
ssS'wid.pmw.combobox.opt.autoclear'
p7302
(dp7303
g4
(lp7304
S'&default'
p7305
asg6
S'{HComboBox - autoclear}\n\nIf both {gautoclear} and {ghistory} are True, clear the entry field whenever\n{gReturn} is pressed, after adding the value to the history list. The &default is\n{gFalse}.'
p7306
sg8
(lp7307
sg10
(lp7308
S'2006/03/18'
p7309
asg12
I0
sg13
(lp7310
sg15
(lp7311
ssS'wid.tkinter.label.opt.text'
p7312
(dp7313
g4
(lp7314
sg6
S'>option.text.generic "Label"'
p7315
sg8
(lp7316
sg10
(lp7317
sg12
I0
sg13
(lp7318
sg15
(lp7319
ssS'wid.pmw.entryfield.opt.modifiedcommand'
p7320
(dp7321
g4
(lp7322
S'&command option'
p7323
aS'&event'
p7324
asg6
S'{HEntryField - modifiedcommand}\n\nThis &command option specifies the &event &handler to be called whenever the text\nof the entry has been changed due to user action or by a call to {fsetentry()}.'
p7325
sg8
(lp7326
sg10
(lp7327
S'2006/03/19'
p7328
asg12
I0
sg13
(lp7329
sg15
(lp7330
ssS'pass.on.frames'
p7331
(dp7332
S'Links'
p7333
(lp7334
sS'Text'
p7335
S'{HWhy does $$ add a "pass" statement to the end of all my forms?}\n\nThe short answer is because syntax-errors involving unclosed parenthesis are reported on the line following the line\nwith the missing parenthesis.\n\nThe long answer is that $$ glues together the lines from the main code area and from all your forms when it builds\nyour project into the "whatever.py" file that actually runs. If you have a missing parenthesis on the last line of a\nmodule then the error gets reported as being on the subsequent line. Because of the way $$ glues the lines together,\nthat means that "the subsequent line" can be in a completely different section of code, which can be quite\nmisleading when you are trying to figure out where the error is.\n\nFor example, if you make a missing-parenthesis error on the last line of the last module, then - without the\ngratutious "pass" statement - the error is reported as being in the main code area because the code from the modules\nis glued into the middle of the main code area. The added "pass" line forces errors like this to be reported as\nhappening within section of code where they actually are.'
p7336
sS'Hotlinks'
p7337
(lp7338
sS'Comments'
p7339
(lp7340
S'2014-04-27'
p7341
asS'Wip'
p7342
I0
sS'Plurals'
p7343
(lp7344
sS'Abstracts'
p7345
(lp7346
S'Why does $$ add a pass statement to the end of all my forms?'
p7347
assS'pack.orientation-violation'
p7348
(dp7349
g4
(lp7350
S'=layout-frame-create'
p7351
asg6
S"{HAmbiguous widget placement}\n\nWhen using $$ all the widgets in a given frame should be laid out\nhorizontally or vertically. The message indicates that in the specified\nframes it wasn't clear if you were arranging the widgets horizontally or\nvertically.\n\nYou don't have to be all that precise about it - pretty much any attempt on\nyour part to make the widgets line up one above the other or one next to the\nother is acceptable - but if they are all over the frame then $$ isn't sure\nhow you want them packed.\n\nIf you really do want widgets scattered about a frame, this suggests that you\nneed to add additional sub-frames ( {Lwhich is really easy to\ndo=layout-frame-create}). Add sub-frames as seems necessary so that the\nwidgets in any one frame are all horizontal or all vertical."
p7352
sg8
(lp7353
sg10
(lp7354
S'2005/05/09'
p7355
asg12
I0
sg13
(lp7356
sg15
(lp7357
ssS'code-editor.actions-tab'
p7358
(dp7359
g4
(lp7360
S'&config file'
p7361
asg6
S"{HTabs}\n\n$$ avoids the {GTab} character almost totally. On reading a code file, $$\nconverts {gtab} characters to an appropriate number of spaces; that's the end of\nwhat it does with tabs.\n\nInternally all whitespace is represented by spaces. When files are written out,\nthey have spaces but no tabs. Pressing the {gTab} key invokes the text editor\n{gindent} action which injects however many spaces are necessary for the cursor\nto land on a multiple of the {gindent} setting but that's all. The indent value\nis specified in the &config file.\n\nRelated edit actions available:\n\n o {gOutdent}, {f$tActionOutdent}, is the inverse of {gindent}; it backs up\n   deleting spaces until the cursor is on a multiple of the {gindent} amount (or\n   until it runs out of spaces to delete).\n\n o {gIndentBlock}, {f$tActionIndentBlock}, indents every line in the currently\n   selected block by the {gindent} amount.\n\n o {gOutdentBlock}, {f$tActionOutdentBlock}, attempts to outdent every line in\n   the currently selected block by the {goutdent} amount."
p7362
sg8
(lp7363
sg10
(lp7364
S'2005/03/07'
p7365
asg12
I0
sg13
(lp7366
sg15
(lp7367
S'$$ avoids tabs where possible'
p7368
assS'packedit.invalidvalue'
p7369
(dp7370
g4
(lp7371
sg6
S"{HOption Edit - Invalid Value}\n\nHi, I'm the pack option editor for widget @2 and I notice that you just put\nin a request to @0. Howerver right now the value in option @1 is invalid.\nPlease correct the invalid value, then you can @0.\n\nTo get help about the @1 option in particular option, close this help message\nthen click the $hb over the label, inside the black rectangle, that says\n{g@1}."
p7372
sg8
(lp7373
sg10
(lp7374
S'<2005/05/01'
p7375
aS'@0 The action requested'
p7376
aS'@1 The name of the invalid option'
p7377
aS'@2 The name of the widget'
p7378
asg12
I0
sg13
(lp7379
sg15
(lp7380
ssS'assist.proc.new'
p7381
(dp7382
g4
(lp7383
S'&command option'
p7384
aS'&command option'
p7385
aS'&event'
p7386
aS'&handler'
p7387
aS'&command option'
p7388
aS'&event'
p7389
aS'&handler'
p7390
aS'&maintained'
p7391
aS'&command option'
p7392
aS'&command option'
p7393
aS'&command option'
p7394
aS'&maintained'
p7395
aS'&command option'
p7396
aS'&maintained'
p7397
aS'&command option'
p7398
aS'&handler'
p7399
asg6
S'{HAssist - Command}\n\nThis assist helps you set a &command option. This &command option is\ncurrently clear so presumably you now want to associate it with an &event\n&handler.\n\n{bThe usual case}\n\nThe usual case is to associate the &command option with an &event &handler\nwhich is &maintained by $$. There is already a suggested name for the event\nhandler in the entry area just above the buttons. To complete the usual case:\n\n o Make sure the "$$ maintained handler" checkbutton remains checked.\n o Select the name of the handler in the entry area.\n o Click on {gOK}\n\nWe glossed over the part about selecting the name of the handler. Here are\nthe gory details.\n\n o If you are happy with the suggested handler name AND you want to create a\n   new handler just for this &command options use then just click {gOK}\n\n o If you are not happy with the suggested handler name but you do want to\n   create a new handler just for this &command options use then revise the\n   name in the entry area to be whatever you want (other than the name of an\n   existing handler) then click on {gOK}.\n\n o If you want to link this &command option to an existing $$ &maintained\n   handler then select the name of the handler form the drop down list to the\n   right of the entry area.\n\n{bThe unusual case}\n\nThe Usual Case assumes that you want to associate this &command option with a\n$$ &maintained handler. While this is normally the preferred thing to do,\nthere are times when it isn\'t appropriate. For example when linking a\n{gScrollbar} widget to a {gText} widget both the Scrollbar and the Text have\n&command options that need to be link to handlers of the other widget. No $$\nmaintained &handlers are involved in this case.\n\nTo accomplish this, un-check the "$$ maintained handler" box, then enter the\nname of the handler in the entry area. In this case $$ never generates an\nevent handler automatically. It is your responsibility to ensure that the\nhandler named exists when the widget is created.'
p7400
sg8
(lp7401
sg10
(lp7402
sg12
I0
sg13
(lp7403
sg15
(lp7404
S'The option editor Command assist dialog (for currently unset command options)'
p7405
assS'form-properties-dialog'
p7406
(dp7407
g4
(lp7408
S'&name rules'
p7409
aS'=form-properties-dialog-other'
p7410
asg6
S'{HForm Properties Dialog}\n\nA form has various properties and this dialog is where you set them.\n\n\n{BName}\n\nForm names have to conform to Python &name rules and they have to be\ndifferent than the name of any other form in this project.\n\n\n{BThis form to derive from}\n\nSpecifies the class from which this form is to be derived.\n\nThe form you are creating must derive, directly or indirectly, from either\n{gToplevel}, {gFrame}, {gScrolledFrame} or from a class which provides\nequivalent functionality. If you think you want to derive from {fCanvas},\n{fText} or something like that, {lclick\nhere=form-properties-dialog-other}.\n\nThe simple solution is to derive directly from {gToplevel}, {GFrame} or\n{gScrolledFrame} and if you are not totally sure about it, then this is\nthe solution for you; use the following two rules to help you decide\nbetween the two:\n\n n Derive from {gToplevel} if this form is designed to live in its own\n   private window on the screen. This is the case for dialogs and other\n   major components of an application.\n\n n Derive from {gFrame} or {gScrolledFrame} if this form is designed to be\n   built into something else. This is the case for user written widgets.\n\nFor advanced user, you can choose to derive from something which was\nitself derived from either {gToplevel}, {gFrame} or {gScrolledFrame}. This\nwill be the case if you want to use a class which was derived from one of\nthese but adds additional functionality. To do this choose one of:\n\n o {gA widget derived from Tkinter.Toplevel}\n o {gA widget derived from Tkinter.Frame}\n o {gA widget derived from Pmw.ScrolledFrame}\n\nand then key in the name of the actual class from which to derive. $$ does\nnot check that the class you specify is in fact derived from {gToplevel},\n{gFrame}, {gScrolledFrame} or something which provides equivalent\nfunctionality; if you lie about this you will just crash and burn when you\ngo to run the resulting code, OK?'
p7411
sg8
(lp7412
sg10
(lp7413
S'2005/04/17'
p7414
asg12
I0
sg13
(lp7415
sg15
(lp7416
S'The Form properties dialog'
p7417
assS'wid.tkinter.frame.opt.highlightthickness'
p7418
(dp7419
g4
(lp7420
sg6
S'>option.highlightthickness.generic "Frame"'
p7421
sg8
(lp7422
sg10
(lp7423
sg12
I0
sg13
(lp7424
sg15
(lp7425
ssS'wid.pmw.combobox.opt.unique'
p7426
(dp7427
g4
(lp7428
sg6
S'{HComboBox - Unique}\n\nIf both {gunique} and {ghistory} are True, the current value of the entry field\nis not added to the ListBox if it is already in the list.'
p7429
sg8
(lp7430
sg10
(lp7431
S'2006/03/18'
p7432
asg12
I0
sg13
(lp7433
sg15
(lp7434
ssS'wid.pmw.scrolledlistbox.opt.hull'
p7435
(dp7436
g4
(lp7437
sg6
S">option.pmw.hull.generic 'ScrolledListBox'"
p7438
sg8
(lp7439
sg10
(lp7440
sg12
I0
sg13
(lp7441
sg15
(lp7442
ssS'option.pmw.buttonaspect.generic'
p7443
(dp7444
g4
(lp7445
sg6
S'{H@0 - buttonaspect}\n\nThe width of the @1 as a proportion of the height. The height of the @1 is\nset to the height of the entry widget. The default is {g1.0}.\n\nValues less than 1.0 will produce thin @1s, values greater than 1.0 will\nproduce fat @1s.'
p7446
sg8
(lp7447
sg10
(lp7448
S'2006/03/18'
p7449
aS'@1 The thing whose aspect we are setting eg arrow button'
p7450
asg12
I0
sg13
(lp7451
sg15
(lp7452
ssS'howto.delete.form'
p7453
(dp7454
g4
(lp7455
S'&form'
p7456
aS'&form'
p7457
aS'&form'
p7458
asg6
S"{HHow to: Delete the current form}\n\nKeep in mind that deleting a &form deletes the visual layout of the form, all\nit's code and all the widgets and their settings settings. You can't\nun-delete a &form, so think before you delete, OK?\n\nTo delete the current &form:\n\n n From the {gForms} menu click the {gDelete the current form} choice.\n\n n A menu will popup requesting confirmation. Click the {gDelete} choice."
p7459
sg8
(lp7460
sg10
(lp7461
S'2006/02/09'
p7462
asg12
I0
sg13
(lp7463
sg15
(lp7464
S'How to: Delete the current form'
p7465
assS'wid.pmw.optionmenu.opt.name'
p7466
(dp7467
g4
(lp7468
sg6
S">option.name.generic 'OptionMenu'"
p7469
sg8
(lp7470
sg10
(lp7471
sg12
I0
sg13
(lp7472
sg15
(lp7473
ssS'option.orient.generic'
p7474
(dp7475
g4
(lp7476
S'&new mexico tech'
p7477
asg6
S'{H@0 - orient}\n\nSet orient to {bhorizontal} if you want the @0 to run parallel to the x-axis,\nor to {bvertical} to run parallel to the y-axis.\n\n$nmt'
p7478
sg8
(lp7479
sg10
(lp7480
S'2005/03/06'
p7481
asg12
I0
sg13
(lp7482
sg15
(lp7483
ssS'wid.tkinter.radiobutton.opt.selectcolor'
p7484
(dp7485
g4
(lp7486
sg6
S'>option.selectcolor.generic "Radiobutton"'
p7487
sg8
(lp7488
sg10
(lp7489
sg12
I0
sg13
(lp7490
sg15
(lp7491
ssS'wid.tkinter.frame.opt.width'
p7492
(dp7493
g4
(lp7494
S'&dimension'
p7495
aS'&new mexico tech'
p7496
asg6
S'{HFrame - width}\n\nThe horizontal &dimension of the new frame. This value be ignored unless you\nalso call {Gpack_propogate(0)} or {Ggrid_propagate(0)} on the frame.\n\n$nmt'
p7497
sg8
(lp7498
sg10
(lp7499
S'2005/04/28'
p7500
asg12
I0
sg13
(lp7501
sg15
(lp7502
ssS'wid.tkinter.frame.opt.highlightcolor'
p7503
(dp7504
g4
(lp7505
sg6
S'>option.highlightcolor.generic "Frame"'
p7506
sg8
(lp7507
sg10
(lp7508
sg12
I0
sg13
(lp7509
sg15
(lp7510
ssS'wid.pmw.panedwidget.opt.handlesize'
p7511
(dp7512
g4
(lp7513
S'&dimension'
p7514
aS'&default'
p7515
asg6
S'{HPanedWidget - handlesize}\n\nA &dimensioned number which specifies the size in pixels of the square handle which appears on the lines separating\nthe panes. The default is 8 pixels.'
p7516
sg8
(lp7517
sg10
(lp7518
S'2006/03/21'
p7519
asg12
I0
sg13
(lp7520
sg15
(lp7521
ssS'howto.create.event.handler'
p7522
(dp7523
g4
(lp7524
S'&event'
p7525
aS'&handler'
p7526
aS'&binding'
p7527
aS'&command option'
p7528
aS'&binding'
p7529
aS'&bind editor'
p7530
aS'&widgetator'
p7531
aS'&binding'
p7532
aS'&handler'
p7533
aS'&handler'
p7534
aS'&handler'
p7535
aS'&binding'
p7536
aS'&binding'
p7537
aS'&bind editor'
p7538
aS'&command option'
p7539
aS'&command option'
p7540
aS'&option editor'
p7541
aS'&widgetator'
p7542
aS'&command option'
p7543
aS'&handler'
p7544
aS'&handler'
p7545
aS'&command option'
p7546
aS'&command option'
p7547
aS'&option editor'
p7548
asg6
S'{HHow to: Create a new event handler}\n\n&Event &handlers spring into existence automatically when you create a &binding or &command\noption that refers to them.\n\no To create a new &binding first select the widget to receive the binding then call up the\n  &bind editor of the &widgetator and click on the {gCreate new binding} button. Once the\n  &binding information is complete and you click on {gOk} the new &handler will\n  automatically be created.\n\n  Note that in the code editor &handlers are kept in alphabetical order making them easy to\n  find.\n\n  To go directly to the &handler of a particular &binding just double-click over that\n  &binding in the &bind editor.\n\no To set a &command option first select the widget that contains the &command option then\n  call up the &option editor of the &widgetator and click on the {P$img/pr-msc-assist.ppm}\n  "assist" button for the &command option in question. Once you have selected the name for\n  the corresponding handler and clicked {gOk} the new &handler is automatically created.\n\n  To go directly to the &handler of a particular &command option just double-click over that\n  &command option in the &option editor'
p7549
sg8
(lp7550
sg10
(lp7551
S'2006/02/17'
p7552
asg12
I0
sg13
(lp7553
sg15
(lp7554
S'How to: Create a new event handler'
p7555
assS'wid.tkinter.text.opt.cursor'
p7556
(dp7557
g4
(lp7558
sg6
S'>option.cursor.generic "Text"'
p7559
sg8
(lp7560
sg10
(lp7561
sg12
I0
sg13
(lp7562
sg15
(lp7563
ssS'option.activeforeground.generic'
p7564
(dp7565
g4
(lp7566
S'&color'
p7567
asg6
S'{H@0 - activeforeground}\n\nThe foreground &color when mouse cursor is over this @0.'
p7568
sg8
(lp7569
sg10
(lp7570
S'2005/02/26'
p7571
asg12
I0
sg13
(lp7572
sg15
(lp7573
ssS'form.main.arcane'
p7574
(dp7575
g4
(lp7576
sg6
S'{HArcane details of the Dreaded Main Form of the main module}\n\nAre you in the right secton? Nobody really wants to know this stuff, do they? Well, whatever, we press on.\n\nIf the the universe were unfolding as it should then to start a project you would point Tkinter at a class which was\nderived from {fTkinter.Toplevel} and say "fire up an application based on this here Toplevel" or words to that\neffect. This would make all kinds of sense, since an application is in fact a top level window. It would have made\nour life easier too since then the rule would be that the main form of the main module has to be a {fTopLevel} which\nwould have seemed reasonable to most people.\n\nAlas, it doesn\'t work that way. Instead, what you have to say is "Hey there Tkinter, fire be up a project for me,\neh?" and having done so it hands to you a {fToplevel} that it created. Which is to say you don\'t have a lot of\ncontrol over the {fToplevel} created; it\'s just generated for you as a fait accompli.\n\nThe question the $$ team faced was: what to do about it. Normally a form is a class and a {fToplevel} form is\nderived from the {fToplevel} class. While we could have let the user create the main form of the main module as a\n{fToplevel} we couldn\'t have done much with it. You can\'t pass it to Tkinter and you can\'t somehow glom it on top of\nthe {fToplevel} supplied by Tkinter. We could have gone through a song and dance to generate main form code just as\ncode and not as part of a class, but that sounded like it had a lot of potential problems not the least of which is\nthat it is totally different from how every other $$ form works.\n\nThe eventual conclusion was to force the main form to be a {fFrame} which we could then pack into the {fToplevel}\nprovided by Tkinter. Not all that pretty but it works and the main form is much like a normal form but with a few\nrelatively minor restrictions.\n\nThe only other oddity is that a {fPmw.MainMenuBar} normally has to be associated with a {fToplevel} but it is\nallowed in the case of the main frame in which case it is generated as attaching to the {fToplevel} provided by\nTkinter.\n\nThe $$ team makes no claim that this is the best possible solution. It\'s simply the best one we were able to come up\nwith and it seemed reasonable at the time.'
p7577
sg8
(lp7578
sg10
(lp7579
S'2006/03/26'
p7580
asg12
I0
sg13
(lp7581
sg15
(lp7582
S'Arcane details of the Dreaded Main Form of the main module'
p7583
assS'howto.tidy.widgets'
p7584
(dp7585
g4
(lp7586
S'&select the frame'
p7587
aS'=layout-frame-create'
p7588
asg6
S'{HHow to: Tidy widgets within a frame}\n\nWhen working with $$ all the widgets within a given frame must* be arranged\neither horizontally or vertically. You don\'t have to work very hard at this -\nany reasonable attempt on your part to place the widgets in a line will work\nfine. If you want the widgets to be {Iexactly} horizontal or vertical then\nthe "Tidy widgets" operation is for you.\n\n&Select the frame whose widgets you want to tidy, right click the mouse\nwithin that frame then choose the "Tidy widgets" choice. The widgets in that\nwindow will be moved so they form an exact vertical or horizontal line.\n\nThis alignment is, of course, purely cosmetic. When your project is built and\nrun the actual widgets are arranged by the pack geometry manager and by that\ntime it matters not if they were nicely or haphazardly aligned on the layout area.\nTiding them simply makes them look nice visually at layout time.\n\nt * Although $$ requires widgets in a frame to be either horizontal or\n  vertical, it it is so ridiculously easy to {Ladd additional\n  frames=layout-frame-create} that this represents no actual burden.'
p7589
sg8
(lp7590
sg10
(lp7591
S'2006/02/09'
p7592
asg12
I0
sg13
(lp7593
sg15
(lp7594
S'How to: Tidy (line up) widgets within a frame.'
p7595
assS'wid.tkinter.frame.opt.background'
p7596
(dp7597
g4
(lp7598
sg6
S'>option.background.generic "Frame"'
p7599
sg8
(lp7600
sg10
(lp7601
sg12
I0
sg13
(lp7602
sg15
(lp7603
ssS'wid.pmw.panedwidget.opt.name'
p7604
(dp7605
g4
(lp7606
sg6
S">option.name.generic 'PanedWidget'"
p7607
sg8
(lp7608
sg10
(lp7609
sg12
I0
sg13
(lp7610
sg15
(lp7611
ssS'datatypeassist.baddict'
p7612
(dp7613
g4
(lp7614
sg6
S'{HPmw.Counter invalid "datatype" dictionary specification}\n\nIf you set this to type "dictionary" then you have to supply either:\n\n o the name of a dictionary (which must be a valid python name), or\n o an actual dictionary specifier enclosed in curley brackets.\n\nWhat you entered meets neither of these criteria.\n\nEither correct the dictionary specification or click on {gCancel}.'
p7615
sg8
(lp7616
sg10
(lp7617
S'2006/02/27'
p7618
asg12
I0
sg13
(lp7619
sg15
(lp7620
ssS'option.yscrollincrement.generic'
p7621
(dp7622
g4
(lp7623
S'&dimension'
p7624
aS'&new mexico tech'
p7625
asg6
S'{H@0 - yscrollincrement}\n\nNormally, canvases can be scrolled vertically to any position. You get this\nbehavior by setting {gyscrollincrement} to zero.\n\nIf you set this option to some positive non-zero &dimension, the canvas can\nbe positioned only on multiples of that distance, and the value will be used\nfor scrolling by scrolling units, such as when the user clicks on the arrows\nat the ends of a scrollbar.\n\n$nmt'
p7626
sg8
(lp7627
sg10
(lp7628
S'2005/04/07'
p7629
asg12
I0
sg13
(lp7630
sg15
(lp7631
ssS'wid.tkinter.radiobutton.opt.activeforeground'
p7632
(dp7633
g4
(lp7634
sg6
S'>option.activeforeground.generic "Radiobutton"'
p7635
sg8
(lp7636
sg10
(lp7637
sg12
I0
sg13
(lp7638
sg15
(lp7639
ssS'option.pyclass.generic'
p7640
(dp7641
g4
(lp7642
sg6
S'{H@0 - pyclass}\n\nThe {gpyclass} option has two uses, one with respect to Tkinter widgets and one with respect\nto Pmw widgets.\n\n{bTkinter}\n\nConsider the Button widget. When you add a button to a $$ form, code to create that button is\ngenerated something like this:\n\nt {fself.__Button1 = Button(yadayada)}\n\nHowever, say you have created some wonderful improvement on the lowly Button widget which you\ncall SuperButton. It has all the functionality of a regular Button, plus extras, and you want\nto use it in a $$ project. This is what the {gpyclass} option is for. Normally, in the case of\na Button the {gpyclass} option is set to "Button". If you change it to be "SuperButton" then\nthe creation code will be:\n\nt {fself.__Button1 = SuperButton(yadayada)}\n\nNote that the class that you specify in {gpyclass} should have all the functionality of the\nclass it is replacing or things will go badly in a hurry. There is nothing preventing you from\nsetting {gpyclass} of a Button to be "Canvas" but this isn\'t likely to be useful.\n\nAlso note that although SuperButton may accept initilization options over and above those\nallowed by Button, there is no way to make those known to $$. The best you can do is set any\nsuch options in your own code following the $$-generated code.\n\n{bPmw}\n\nMost Pmw widgets contain other widgets as components. For example the Counter widget contains\nand EntryField which itself contains an Entry. By way of the {gpyclass} option you can change\nthe widget from which the components are created. This is a standard Pmw feature which is\naccessed by changing the {fpyclass} option OF A COMPONENT. Be aware that if you change the\n{fpyclass} option of the Pmw widget itself then you are turning it into something else which\nmay or may not be what you want.'
p7643
sg8
(lp7644
sg10
(lp7645
S'2006/11/06'
p7646
asg12
I0
sg13
(lp7647
sg15
(lp7648
ssS'assist.int'
p7649
(dp7650
S'Links'
p7651
(lp7652
S'=assist-code'
p7653
asS'Text'
p7654
S'{HThe option-editor integer-number assist dialog}\n\nThis dialog help you specify an integer number. You have two choices:\n\n n Specify an integer number directly, or\n n Specify some code which will supply the integer number.\n\n{BSpecify directly}\n\nIn the upper area of the assist, enter the number you want. Only valid integers are allowed here. If you want to get\nback to the default value (which for this option is "@1") then click on the {gDefault} button and "@1" will appear\nin the entry.\n\n{BSpecify code}\n\nIn the lower area of the assist, enter the {Lcode=assist-code} that will supply an integer number. This can be the\nname of a variable, a function or whatever you need. No checking is done on the code you enter.'
p7655
sS'Hotlinks'
p7656
(lp7657
sS'Comments'
p7658
(lp7659
S'2014-05-04'
p7660
asS'Wip'
p7661
I0
sS'Plurals'
p7662
(lp7663
sS'Abstracts'
p7664
(lp7665
S'The option editor integer-number assist dialog'
p7666
assS'fonts-rapyd'
p7667
(dp7668
g4
(lp7669
S'&config file'
p7670
aS'&config file'
p7671
aS'&config file'
p7672
asg6
S'{HHow to adjust the text fonts that $$ uses, particularly the size}\n\nSince screen size and personal preference vary widely the usual issue with fonts is the size.\n\nThere are three kinds of text that $$ is concerned with:\n\n n Text inside the code editor\n n Text used for help pages\n n Everything else (menus, dialogs, error messages, etc.)\n\nAll of these are set via specifications in the &config file.\n\n{BCode editor text}\n\nThe standard &config file contains two different schemes for the code editor and each scheme has it\'s own font\nspecification. To change the code editor font, first note which code editor scheme you are using. Look for a line in\nsection {gGeneral} of the config file that says something like:\n\nt {fDefaultEditorScheme = Idle}\n\nwhich in this case would indicate that you are using the "Idle" editor scheme. Look for the line saying:\n\nt {f[EditorScheme Idle]}\n\nA few lines after that will be the font line, like this:\n\nt {FFont: (\'Terminal\',\'12\')}\n\nIf you just want to make the font larger or smaller then alter the {g12} value, otherwise feel free to change the\nwhole font to whatever you want.\n\n{bHelp page text}\n\nHelp always used {bHelvetica} for narative text and {bCourier} for code and fixed point text but you get to choose\nthe sizes. In section {bGeneral} of the &config file look for a line like:\n\nt {fHelpTextSize = 8, 10}\n\nThis line is saying that all help text is to be 8 points in size and that heading text is to be 10 points. In the\nusual Tkinter manner, negative numbers mean pixels and positive numbers mean points.\n\n{bEverything else}\n\nAll other $$ text is set in section {bGeneral} by the line that says\n\nt {fFont = (\'helvetica\',\'7\',\'bold\')}\n\nIf the only issue is size then adjust the number, otherwise feel free to set the font to whatever you want.'
p7673
sg8
(lp7674
sg10
(lp7675
S'2006/05/11'
p7676
asg12
I0
sg13
(lp7677
sg15
(lp7678
S'How to: adjust the text fonts that $$ uses, particularly the size'
p7679
assS'form.delete.mainform'
p7680
(dp7681
g4
(lp7682
S'&form'
p7683
aS'&module'
p7684
aS'=form.main.info'
p7685
aS'&form'
p7686
aS'&form'
p7687
aS'&module'
p7688
asg6
S"{HYou can't delete the main form of the main module}\n\nThe main &form of the main &module is {Lspecial=form.main.info} in that it is\nrequired for the project and $$ makes no provision for deleting it.\n\nAll &forms other than the main &form of the main &module can be deleted."
p7689
sg8
(lp7690
sg10
(lp7691
S'2006/03/26'
p7692
asg12
I0
sg13
(lp7693
sg15
(lp7694
S"You can't delete the main form of the main module"
p7695
assS'wid.pmw.counter.overview'
p7696
(dp7697
g4
(lp7698
sg6
S'{HWhat is: A Counter widget}\n\n A counter contains an entry field and two arrow buttons to increment and\ndecrement the value in the entry field. Standard counting types include\nnumbers, times and dates. A user defined counting function may also be\nsupplied for specialized counting. Counting can be used in combination with\nthe entry field\'s validation. The components may be laid out horizontally or\nvertically.\n\nEach time an arrow button is pressed the value displayed in the entry field\nis incremented or decremented by the value of the increment option. If the\nnew value is invalid (according to the entry field\'s validate option, perhaps\ndue to exceeding minimum or maximum limits), the old value is restored.\n\nWhen an arrow button is pressed and the value displayed is not an exact\nmultiple of the increment, it is "truncated" up or down to the nearest\nincrement.'
p7699
sg8
(lp7700
sg10
(lp7701
S'2006/03/19'
p7702
asg12
I0
sg13
(lp7703
sg15
(lp7704
S'What is: A Counter widget'
p7705
assS'option.scrollregion.generic'
p7706
(dp7707
g4
(lp7708
S'&new mexico tech'
p7709
asg6
S'{H@0 - scrollregion}\n\nA tuple of four integers (w, n, e, s) that defines over how large an area the\n@0 can be scrolled, where {bw} is the left side, {bn} the top, {be} the right\nside, and {bs} the bottom.\n\n$nmt'
p7710
sg8
(lp7711
sg10
(lp7712
S'20065/03/06'
p7713
asg12
I0
sg13
(lp7714
sg15
(lp7715
ssS'wid.tkinter.listbox.opt.width'
p7716
(dp7717
g4
(lp7718
sg6
S'>option.width.generic "Listbox"'
p7719
sg8
(lp7720
sg10
(lp7721
sg12
I0
sg13
(lp7722
sg15
(lp7723
ssS'wid.tkinter.text.opt.selectborderwidth'
p7724
(dp7725
g4
(lp7726
sg6
S'>option.selectborderwidth.generic "Text","text"'
p7727
sg8
(lp7728
sg10
(lp7729
sg12
I0
sg13
(lp7730
sg15
(lp7731
ssS'wid.pmw.timecounter.opt.minuteentryfield'
p7732
(dp7733
g4
(lp7734
sg6
S'{HTimeCounter - minuteentryfield}\n\nThe entry field where the minutes are entered and displayed.'
p7735
sg8
(lp7736
sg10
(lp7737
S'2006/03/24'
p7738
asg12
I0
sg13
(lp7739
sg15
(lp7740
ssS'wid.pmw.counter.opt.uparrow'
p7741
(dp7742
g4
(lp7743
sg6
S'{HCounter - uparrow}\n\nThe arrow button used for incrementing the counter. Depending of the value\nof {gorient}, it will appear on the right of or above the entry field.'
p7744
sg8
(lp7745
sg10
(lp7746
S'2006/03/18'
p7747
asg12
I0
sg13
(lp7748
sg15
(lp7749
ssS'howto.rename.form'
p7750
(dp7751
g4
(lp7752
S'&frame'
p7753
aS'&form'
p7754
aS'&form'
p7755
aS'&form'
p7756
aS'&form'
p7757
aS'&layout editor'
p7758
aS'=layout-frame-select'
p7759
aS'&frame'
p7760
aS'&layout area'
p7761
aS'&option editor'
p7762
aS'&form'
p7763
aS'&form'
p7764
aS'&module'
p7765
aS'=form.main.info'
p7766
aS'&module'
p7767
aS'&form'
p7768
aS'&module'
p7769
aS'=layout.menu.project'
p7770
asg6
S"{HHow to rename a form}\n\nThe form name is carried by the outermost &frame of the &form. To rename a\n&form:\n\n n Click on the &form's tab as necessary to select the &form and bring\n   forward the &layout editor.\n\n n {LSelect=layout-frame-select} the outermost &frame in the &layout area.\n\n n In the &option editor change the {gname} option to be your desired new\n   name; the &form will be renamed accordingly.\n\nThe directions above apply to all forms except the main &form of the main\n&module; it is {Lspecial=form.main.info}. The project itself, the main\n&module of the project and the main &form of the main &module all carry the\nsame name and thus the only way to rename one is to rename the project.\n\n{LHow to rename the entire project=layout.menu.project}."
p7771
sg8
(lp7772
sg10
(lp7773
S'2006/02/07'
p7774
asg12
I0
sg13
(lp7775
sg15
(lp7776
S'How to: Rename a form'
p7777
assS'assist-code'
p7778
(dp7779
S'Links'
p7780
(lp7781
S'&duplicator'
p7782
asS'Text'
p7783
S'{HUser-code as an option value}\n\nMany options and pack-options (for example font, color, dimensioned number and integer number) will let you specify\nyour own arbitrary code for the value of that option. What\'s the purpose of this?\n\nThis feature is useful if you have several widgets that you want to have the same setting for some option. For\nexample if you have 10 Label widgets and you want them all to have a Width option of 15 then you can set each one to\nhave a Width of 15 but what if in the future you want to change the Width? Then you have to go changing each and\nevery one.\n\nHowever, if you create a variable up near the top of the form before the widgets are created saying something like:\n\n t {gLabelWidth = 15}\n\nthen when creating the Label widgets select the "Use this code" option in the Width assist dialog and enter\n{gLabelWidth} as the code. Then to change the Width of {ball} those widgets all you have to do is change the line to\nread:\n\n t {gLabelWidth = 25}\n\nBecause the code can be anything it isn\'t limited to just a variable name: it can be a function call, a selection\nfrom a list, or whatever is best in your application.\n\nSpeaking of creating 10 Labels, often the easist way to create a bunch of similar widgets is to create the first\none, get its settings the way you want then use the &duplicator to create the rest.'
p7784
sS'Hotlinks'
p7785
(lp7786
sS'Comments'
p7787
(lp7788
S'2014-05-08'
p7789
asS'Wip'
p7790
I0
sS'Plurals'
p7791
(lp7792
sS'Abstracts'
p7793
(lp7794
S'Why you might want user code as an option value'
p7795
assS'option.direction.generic'
p7796
(dp7797
g4
(lp7798
sg6
S'{H@0 - direction}\n\nNormally, the menu will appear below the menubutton. Set direction to one of:\n\n o {gabove}\n o {gbelow}\n o {gflush}\n o {gleft}\n o {gright}\n\nto adjust where the menu will appear.'
p7799
sg8
(lp7800
sg10
(lp7801
S'2005/03/02'
p7802
asg12
I0
sg13
(lp7803
sg15
(lp7804
ssS'wid.tkinter.text.opt.setgrid'
p7805
(dp7806
g4
(lp7807
sg6
S'>option.setgrid.generic "Text"'
p7808
sg8
(lp7809
sg10
(lp7810
sg12
I0
sg13
(lp7811
sg15
(lp7812
ssS'wid.tkinter.scale.opt.length'
p7813
(dp7814
g4
(lp7815
sg6
S'>option.length.generic "Scale"'
p7816
sg8
(lp7817
sg10
(lp7818
sg12
I0
sg13
(lp7819
sg15
(lp7820
ssS'wid.tkinter.entry.opt.insertwidth'
p7821
(dp7822
g4
(lp7823
sg6
S'>option.insertwidth.generic "Entry"'
p7824
sg8
(lp7825
sg10
(lp7826
sg12
I0
sg13
(lp7827
sg15
(lp7828
ssS'code-edit.action.pushlinenumber'
p7829
(dp7830
g4
(lp7831
S'&remembered line'
p7832
aS'&editor actions'
p7833
asg6
S'{HCode editor - Push line number}\n\n Key:   $tActionPushLineNumber\n Menu: {fEdit/Push line number}\n \nPush the number of the current line onto the stack of &remembered line numbers. \n\nSince this is a stack you can push as many line numbers as are necessary and\nstep back through them when appropriate.\n\nCode &editor actions'
p7834
sg8
(lp7835
sg10
(lp7836
S'2005/04/07'
p7837
asg12
I0
sg13
(lp7838
sg15
(lp7839
ssS'buffet.widget.group'
p7840
(dp7841
g4
(lp7842
sg6
S'>buffet.widget.generic2 "Pmw.Group", \'\', \'wid.pmw.group.overview\''
p7843
sg8
(lp7844
sg10
(lp7845
sg12
I0
sg13
(lp7846
sg15
(lp7847
ssS'option.invalidcommand.generic'
p7848
(dp7849
g4
(lp7850
S'=command-option.whatis'
p7851
aS'=wid.tkinter.entry.opt.validate'
p7852
aS'=wid.tkinter.entry.opt.validate'
p7853
asg6
S"{H@0 - invalidcommand}\n\nThe {Lcommand=command-option.whatis} to run if\n{Lvalidation=wid.tkinter.entry.opt.validate} is enabled and the\n{Lvalidatecommand=wid.tkinter.entry.opt.validate} returns false.\n\nThis option isn't all that useful since anything that can be done by the\n{Ginvalidcommand} function could also be done by the function that does the\nvalidating."
p7854
sg8
(lp7855
sg10
(lp7856
S'2005/03/03'
p7857
asg12
I0
sg13
(lp7858
sg15
(lp7859
ssS'wid.tkinter.scale.opt.repeatinterval'
p7860
(dp7861
g4
(lp7862
sg6
S'>option.repeatinterval.generic "Scale"'
p7863
sg8
(lp7864
sg10
(lp7865
sg12
I0
sg13
(lp7866
sg15
(lp7867
ssS'wid.pmw.optionmenu.opt.labelpos'
p7868
(dp7869
g4
(lp7870
sg6
S">option.pmw.labelpos.generic 'OptionMenu'"
p7871
sg8
(lp7872
sg10
(lp7873
sg12
I0
sg13
(lp7874
sg15
(lp7875
ssS'wid.tkinter.radiobutton.opt.textvariable'
p7876
(dp7877
g4
(lp7878
sg6
S'>option.textvariable.generic "Radiobutton"'
p7879
sg8
(lp7880
sg10
(lp7881
sg12
I0
sg13
(lp7882
sg15
(lp7883
ssS'wid.pmw.entryfield.opt.errorbackground'
p7884
(dp7885
g4
(lp7886
S'&default'
p7887
asg6
S"{HEntryField - errorbackground}\n\nSpecifies the color to use when displaying invalid or partially valid text.\nThe &default is '{gpink}'."
p7888
sg8
(lp7889
sg10
(lp7890
S'2006/03/19'
p7891
asg12
I0
sg13
(lp7892
sg15
(lp7893
ssS'wid.pmw.labeledwidget.opt.labelmargin'
p7894
(dp7895
g4
(lp7896
sg6
S">option.pmw.labelmargin.generic 'LabeledWidget'"
p7897
sg8
(lp7898
sg10
(lp7899
sg12
I0
sg13
(lp7900
sg15
(lp7901
ssS'help.index'
p7902
(dp7903
g4
(lp7904
sg6
S'{HHow the help index searcher works}\n\n{bThe short answer}\n\nKey in one or more words related to the topic of interest then press {gEnter} or click on {gOk}.\n\n\n{bThe long answer}\n\no Searches are case insensitive.\n\no If you key in a single word, then all index entries which contain that word will be presented.\n\no If you key in two or more words (for purposes of index searching, a "word" is a clump of any characters except\n  space, comma and quotes) then for an index entry to be presented it must contain ALL the words. The order of the\n  words or where they are in the index entry doesn\'t matter.\n\no To search for a specific phrase which contains spaces, put it inside single or double quotes. For example,\n  searching for\n\n  t handler names\n\n  will return all index entries that contain both the word "handler" and the word "names", while searching for\n\n  t "handler names"\n\n  will return only index entries with the exact phrase "handler names" in them somewhere.\n\no To search for a series of alternatives separate them with commas. Thus searching for:\n\n  t form, module, project\n\n  will return an index entry if it contains the word "form" or if it contains the word "module" or if it contains\n  the word "project".\n\no You can combine these rules. Searching for:\n\n  t "handler names", project\n\n  will return an index entry if it contains the exact phrase "handler names" or if it contains the word "project".'
p7905
sg8
(lp7906
sg10
(lp7907
S'2006/03/17'
p7908
asg12
I0
sg13
(lp7909
sg15
(lp7910
S'How the help index searcher works'
p7911
assS'form.invalidname'
p7912
(dp7913
g4
(lp7914
sg6
S'>name-rules'
p7915
sg8
(lp7916
sg10
(lp7917
sg12
I0
sg13
(lp7918
sg15
(lp7919
ssS'wid.pmw.labeledwidget.opt.labelpos'
p7920
(dp7921
g4
(lp7922
sg6
S">option.pmw.labelpos.generic 'LabeledWidget'"
p7923
sg8
(lp7924
sg10
(lp7925
sg12
I0
sg13
(lp7926
sg15
(lp7927
ssS'wid.pmw.entryfield.overview'
p7928
(dp7929
g4
(lp7930
sg6
S"{HWhat is: An EntryField widget}\n\nAn EntryField contains an entry widget with optional validation of various\nkinds. Built-in validation may be used, such as integer, real, time or date,\nor an external validation function may be supplied. If valid text is entered,\nit will be displayed with the normal background. If invalid text is entered,\nit is not displayed and the previously displayed text is restored. If\npartially valid text is entered, it will be displayed with a background color\nto indicate it is in error. An example of partially valid real text is '-.',\nwhich may be the first two charactes of the valid string '-.5'. Some\nvalidators, such as date, have a relaxed interpretation of partial validity,\nwhich allows the user flexibility in how they enter the text.\n\nValidation is performed early, at each keystroke or other event which\nmodifies the text. However, if partially valid text is permitted, the\nvalidity of the entered text can be checked just before it is to be used,\nwhich is a form of late validation.\n\nMinimum and maximum values may be specified. Some validators also accept\nother specifications, such as date and time formats and separators."
p7931
sg8
(lp7932
sg10
(lp7933
S'2006/03/19'
p7934
asg12
I0
sg13
(lp7935
sg15
(lp7936
S'What is: An EntryField widget'
p7937
assS'layout-editor'
p7938
(dp7939
g4
(lp7940
S'&form'
p7941
aS'&widget buffet'
p7942
aS'=layout-frame-create'
p7943
aS'=layout-frame-resize'
p7944
aS'=layout-frame-delete'
p7945
aS'=layout-frame-select'
p7946
aS'=frame-properties-dialog'
p7947
aS'=layout-widget-add'
p7948
aS'=layout-widget-move'
p7949
aS'=layout-widget-delete'
p7950
aS'=duplicator'
p7951
aS'&code editor'
p7952
aS'&code editor'
p7953
aS'=howto.swap.code.layout'
p7954
aS'&form'
p7955
aS'&form'
p7956
aS'&form'
p7957
aS'&form'
p7958
aS'&form'
p7959
aS'&duplicator'
p7960
aS'&parking lot'
p7961
aS'&trash bin'
p7962
aS'&widget buffet'
p7963
asg6
S'{HLayout Editor}\n\nThe layout editor is where you do the visual layout of your &form by:\n\n o Using lines to divide the form up into a series of frames.\n o Dragging and dropping widgets (from the &widget buffet) onto the form.\n\nt {LCreating Frames=layout-frame-create} . . . {LResizing Existing Frames=layout-frame-resize}\n  . . . {LDeleting Frames=layout-frame-delete} . . .{LSelecting Frames=layout-frame-select} .\n  . . {LChanging frame type=frame-properties-dialog}\n\nt {LAdding Widgets=layout-widget-add} . . . {LMoving Widgets=layout-widget-move} . . .\n  {LDeleting Widgets=layout-widget-delete} . . . {LDuplicating Widgets=duplicator}\n\nThe layout editor time-shares space on the screen with the &code editor. You can snap back and\nforth between the layout editor and the &code editor in any of {Lthree\nways=howto.swap.code.layout}.\n\nThe layout editor presents a schematic representation of your &form; it shows the relative\nspatial relationships between frames and widgets. It {bis not and is not supposed to be} a\n"what you see is what you get" exact representation of what your &form will look like when\nyour application runs. It is simply a convenient graphical way for you to manipulate frames\nand widgets. Similarly the size of the layout area bears no relationship to the size of your\neventual &form. When you change the size of the $$ window all the items in the layout area\nscale as needed but this says nothing about the size of your eventual &form. The size of the\n&form is determined by widget option settings and by your code.\n\nDown near the the bottom of the layout are are:\n\n o (on the left) the &Duplicator\n o (in the middle) the &Parking Lot\n o (on the right) the &Trash Bin\n\nAnd down at the very bottom is the &widget buffet.'
p7964
sg8
(lp7965
S'layout editor'
p7966
asg10
(lp7967
S'2005/03/05'
p7968
asg12
I0
sg13
(lp7969
sg15
(lp7970
S'The Layout Editor'
p7971
assS'wid.tkinter.label.opt.highlightthickness'
p7972
(dp7973
g4
(lp7974
sg6
S'>option.highlightthickness.generic "Label"'
p7975
sg8
(lp7976
sg10
(lp7977
sg12
I0
sg13
(lp7978
sg15
(lp7979
ssS'wid.tkinter.entry.opt.xscrollcommand'
p7980
(dp7981
g4
(lp7982
sg6
S'>option.xscrollcommand.generic "Entry"'
p7983
sg8
(lp7984
sg10
(lp7985
sg12
I0
sg13
(lp7986
sg15
(lp7987
ssS'wid.pmw.group.opt.pyclass'
p7988
(dp7989
g4
(lp7990
sg6
S'>option.pyclass.generic "Group"'
p7991
sg8
(lp7992
sg10
(lp7993
sg12
I0
sg13
(lp7994
sg15
(lp7995
ssS'option.activebackground.generic'
p7996
(dp7997
g4
(lp7998
S'&color'
p7999
asg6
S'{H@0 - activebackground}\n\nThe background &color when mouse cursor is over this @0.'
p8000
sg8
(lp8001
sg10
(lp8002
S'2005/02/26'
p8003
asg12
I0
sg13
(lp8004
sg15
(lp8005
ssS'option.selectimage.generic'
p8006
(dp8007
g4
(lp8008
S'&image'
p8009
asg6
S'{H@0 - selectimage}\n\nThis option has no effect unless you also supply the {gimage} option. When\nboth options are supplied then:\n\n o the {gimage} image will be displayed when this @0 is not set, and\n o the {gselectimage} image will be displayed with this @0 is set.\n\nInformation on &images.'
p8010
sg8
(lp8011
sg10
(lp8012
S'2005/04/03'
p8013
asg12
I0
sg13
(lp8014
sg15
(lp8015
ssS'wid.pmw.combobox.opt.labelpos'
p8016
(dp8017
g4
(lp8018
sg6
S">option.pmw.labelpos.generic 'ComboBox'"
p8019
sg8
(lp8020
sg10
(lp8021
sg12
I0
sg13
(lp8022
sg15
(lp8023
ssS'wid.tkinter.text.opt.wrap'
p8024
(dp8025
g4
(lp8026
sg6
S'>option.wrap.generic "Text"'
p8027
sg8
(lp8028
sg10
(lp8029
sg12
I0
sg13
(lp8030
sg15
(lp8031
ssS'wid.tkinter.radiobutton.opt.wraplength'
p8032
(dp8033
g4
(lp8034
sg6
S'>option.wraplength.generic "Radiobutton"'
p8035
sg8
(lp8036
sg10
(lp8037
sg12
I0
sg13
(lp8038
sg15
(lp8039
ssS'wid.tkinter.entry.opt.font'
p8040
(dp8041
g4
(lp8042
sg6
S'>option.font.generic "Entry"'
p8043
sg8
(lp8044
sg10
(lp8045
sg12
I0
sg13
(lp8046
sg15
(lp8047
ssS'wid.tkinter.scrollbar.opt.elementborderwidth'
p8048
(dp8049
g4
(lp8050
sg6
S'>option.elementborderwidth.generic "Scrollbar"'
p8051
sg8
(lp8052
sg10
(lp8053
sg12
I0
sg13
(lp8054
sg15
(lp8055
ssS'wid.pmw.scrolledcanvas.opt.canvas'
p8056
(dp8057
g4
(lp8058
sg6
S'{HScrolledCanvas - canvas}\n\nThe canvas widget which is scrolled by the scrollbars. If the {gborderframe}\noption is true, this is created with a borderwidth of 0 to overcome a known\nproblem with canvas widgets: if a widget inside a canvas extends across one\nof the edges of the canvas, then the widget obscures the border of the\ncanvas. Therefore, if the canvas has no border, then this overlapping does\nnot occur.'
p8059
sg8
(lp8060
sg10
(lp8061
S'2006/03/22'
p8062
asg12
I0
sg13
(lp8063
sg15
(lp8064
ssS'wid.pmw.combobox.opt.label'
p8065
(dp8066
g4
(lp8067
sg6
S">option.pmw.label.generic 'ComboBox'"
p8068
sg8
(lp8069
sg10
(lp8070
sg12
I0
sg13
(lp8071
sg15
(lp8072
ssS'wid.tkinter.canvas.opt.background'
p8073
(dp8074
g4
(lp8075
sg6
S'>option.background.generic "Canvas"'
p8076
sg8
(lp8077
sg10
(lp8078
sg12
I0
sg13
(lp8079
sg15
(lp8080
ssS'widgetator.tab.bindings'
p8081
(dp8082
g4
(lp8083
S'&widgetator'
p8084
aS'&bind editor'
p8085
aS'&handler'
p8086
aS'&event'
p8087
asg6
S'{HWidgetator - Bindings tab}\n\nThis tab is part of the &widgetator. It makes visible the &bind editor which\nlets you see and edit the bindings for the selected widget. Bindings allow\nyou to activate user-written &handler methods in response to &events which\nhappen to a widget.'
p8088
sg8
(lp8089
sg10
(lp8090
S'2005/03/04'
p8091
asg12
I0
sg13
(lp8092
sg15
(lp8093
ssS'widgetator.tab.options'
p8094
(dp8095
g4
(lp8096
S'&widgetator'
p8097
aS'&option editor'
p8098
asg6
S'{HWidgetator - Options tab}\n\nThis tab is part of the &widgetator. It brings forward the &option editor\nwhich lets you see and edit all the options of the selected widget. The\noptions specified here are the ones that will be in effect when the widget is\ncreated.'
p8099
sg8
(lp8100
sg10
(lp8101
S'2005/03/04'
p8102
asg12
I0
sg13
(lp8103
sg15
(lp8104
ssS'wid.tkinter.checkbutton.opt.text'
p8105
(dp8106
g4
(lp8107
sg6
S'>option.text.generic "Checkbutton"'
p8108
sg8
(lp8109
sg10
(lp8110
sg12
I0
sg13
(lp8111
sg15
(lp8112
ssS'wid.pmw.messagebar.opt.silent'
p8113
(dp8114
g4
(lp8115
S'&default'
p8116
asg6
S'{HMessageBar - silent}\n\nIf true, no audible bells will sound, regardless of the value for bells\ndefined in the messagetypes option. The &default is False.'
p8117
sg8
(lp8118
sg10
(lp8119
S'2005/03/20'
p8120
asg12
I0
sg13
(lp8121
sg15
(lp8122
ssS'wid.pmw.optionmenu.opt.pyclass'
p8123
(dp8124
g4
(lp8125
sg6
S'>option.pyclass.generic "OptionMenu"'
p8126
sg8
(lp8127
sg10
(lp8128
sg12
I0
sg13
(lp8129
sg15
(lp8130
ssS'delete.handlerstoo'
p8131
(dp8132
g4
(lp8133
S'&event'
p8134
aS'&handler'
p8135
aS'&maintained'
p8136
aS'&maintained'
p8137
aS'&handler'
p8138
aS'&handler'
p8139
aS'&handler'
p8140
aS'&handler'
p8141
aS'&handler'
p8142
aS'&handler'
p8143
aS'=howto.delete.event.handler'
p8144
asg6
S'{HOption to delete orphan event handlers}\n\nYou just deleted widget "@0".\n\n<This/These> &event &handler</s>:\n\n@1\n\n<was/were> referneced by widget @0 but not by any other $$ &maintained widgets.\nNow that widget @0 is gone no $$ &maintained binding refers to <this/these>\n&handler</s> and you have the option to delete <it/them>.\n\no If you refer to <this/these> event &handler</s> in your code (I didn\'t check for\n  that) or if you plan to create new bind entries or command-options which will\n  refer to <this/these> event &handler</s> then clearly you want to choose {GKeep\n  handler</s>} to retain the event &handler</s>.\n\no If none of your code calls <this/these> event &handler</s> and you have no\n  proposed use for <it/them> then you might as well choose {G Delete handler</s>}\n  to delete the handler</s> rather than leaving unused code hanging around your\n  form.\n\nIf you choose to retain the &handler</s> you can always {Ldelete\n<it/them>=howto.delete.event.handler} at a later time.'
p8145
sg8
(lp8146
sg10
(lp8147
S'2006/02/14'
p8148
aS'@0 The name of the deleted widget'
p8149
aS'@1 List of now orphaned handlers'
p8150
aS'@2 The number of orphaned handlers'
p8151
asg12
I0
sg13
(lp8152
I2
asg15
(lp8153
ssS'wid.tkinter.button.opt.takefocus'
p8154
(dp8155
g4
(lp8156
sg6
S'>option.takefocus.generic "Button"'
p8157
sg8
(lp8158
sg10
(lp8159
sg12
I0
sg13
(lp8160
sg15
(lp8161
ssS'bindassist.delete'
p8162
(dp8163
g4
(lp8164
S'=bindassist.general'
p8165
aS'&event'
p8166
asg6
S'{HBind Assist Dialog - Delete Button}\n\nThis is the {GDelete} button of the {lBind Assist Dialog=bindassist.general}.\n\nClick this button to delete the current &binding from the list of &events for\n&binding to the current widget. You will be asked for confirmation before the\ndeletion actually happens.'
p8167
sg8
(lp8168
sg10
(lp8169
S'2005/03/16'
p8170
asg12
I0
sg13
(lp8171
sg15
(lp8172
S'The Delete button of the Bind Assist Dialog'
p8173
assS'wid.pmw.scrolledcanvas.opt.hull'
p8174
(dp8175
g4
(lp8176
sg6
S">option.pmw.hull.generic 'ScrolledCanvas'"
p8177
sg8
(lp8178
sg10
(lp8179
sg12
I0
sg13
(lp8180
sg15
(lp8181
ssS'wid.pmw.scrolledframe.opt.horizfraction'
p8182
(dp8183
g4
(lp8184
S'&default'
p8185
asg6
S'{HScrolledFrame - horizfraction}\n\nThe fraction of the width of the clipper frame to scroll the interior frame\nwhen the user clicks on the horizontal scrollbar arrows. The &default is\n0.05.'
p8186
sg8
(lp8187
sg10
(lp8188
S'2006/03/23'
p8189
asg12
I0
sg13
(lp8190
sg15
(lp8191
ssS'buffet.widget.panedwidget'
p8192
(dp8193
g4
(lp8194
sg6
S'>buffet.widget.generic2 "Pmw.PanedWidget", \'\', \'wid.pmw.panedwidget.overview\''
p8195
sg8
(lp8196
sg10
(lp8197
sg12
I0
sg13
(lp8198
sg15
(lp8199
ssS'import.export'
p8200
(dp8201
S'Links'
p8202
(lp8203
S'=form.main.info'
p8204
asS'Text'
p8205
S'{HAll about Import and Export}\n\nWhen you save your project the whole thing gets bagged up and saved to disk. When you load your project the whole\nthing is read from disk and un-bagged. So far so good. However, there are times when it is convenient to save just a\nsingle form from a project. This allows you to clone a form within a project or to put a copy of the form into a\ndifferent project.\n\n{BExport}\n\nTo export the current form call up the {bForms} menu choice then click on {bExport the current form}. You will get\nthe opportunity to set the name. Note that forms are exported the file extension {grpf}: {br}apyd {bp}roject\n{bf}orm.\n\nNote: The main form of the main module is {lspecial=form.main.info} and to code necessary to export it has yet to be\nwritten thus you can not export it. Sorry.\n\n{bImport}\n\nImport fetches a previously exported form and adds it to the current project. Regardless of the name under which the\nform was exported, you get a chance to set the name at import time. Thus you can clone a form in a project by\nexporting it and then importing it under a different name.'
p8206
sS'Hotlinks'
p8207
(lp8208
sS'Comments'
p8209
(lp8210
S'2014-03-01'
p8211
asS'Wip'
p8212
I0
sS'Plurals'
p8213
(lp8214
sS'Abstracts'
p8215
(lp8216
S'All about Form Import and Form Export'
p8217
aS'How to copy / clone a form'
p8218
assS'assist.pmwdatatype'
p8219
(dp8220
g4
(lp8221
sg6
S'>wid.pmw.counter.opt.datatype'
p8222
sg8
(lp8223
sg10
(lp8224
sg12
I0
sg13
(lp8225
sg15
(lp8226
ssS'wid.tkinter.radiobutton.opt.cursor'
p8227
(dp8228
g4
(lp8229
sg6
S'>option.cursor.generic "Radiobutton"'
p8230
sg8
(lp8231
sg10
(lp8232
sg12
I0
sg13
(lp8233
sg15
(lp8234
ssS'wid.tkinter.entry.opt.validatecommand'
p8235
(dp8236
g4
(lp8237
sg6
S'>option.validatecommand.generic "Entry"'
p8238
sg8
(lp8239
sg10
(lp8240
sg12
I0
sg13
(lp8241
sg15
(lp8242
ssS'wid.tkinter.menu.opt.foreground'
p8243
(dp8244
g4
(lp8245
S'&new mexico tech'
p8246
asg6
S'{HMenu - foreground}\n\nThe foreground color for choices not under the mouse.\n\n$nmt'
p8247
sg8
(lp8248
sg10
(lp8249
S'2005/04/19'
p8250
asg12
I0
sg13
(lp8251
sg15
(lp8252
ssS'wid.pmw.radioselect.opt.labelpos'
p8253
(dp8254
g4
(lp8255
sg6
S">option.pmw.labelpos.generic 'RadioSelect'"
p8256
sg8
(lp8257
sg10
(lp8258
sg12
I0
sg13
(lp8259
sg15
(lp8260
ssS'wid.pmw.group.opt.name'
p8261
(dp8262
g4
(lp8263
sg6
S">option.name.generic 'Group'"
p8264
sg8
(lp8265
sg10
(lp8266
sg12
I0
sg13
(lp8267
sg15
(lp8268
ssS'wid.tkinter.scale.opt.highlightthickness'
p8269
(dp8270
g4
(lp8271
sg6
S'>option.highlightthickness.generic "Scale"'
p8272
sg8
(lp8273
sg10
(lp8274
sg12
I0
sg13
(lp8275
sg15
(lp8276
ssS'option.exportselection.generic'
p8277
(dp8278
g4
(lp8279
S'&new mexico tech'
p8280
asg6
S"{H@0 - exportselection}\n\nNormally, this option is set to {gtrue} and text selected within the @0\nwidget is exported to be the selection in the window manager. Set this\noption to {gfalse} if you don't want that behavior.\n\n$nmt"
p8281
sg8
(lp8282
sg10
(lp8283
S'2005/03/02'
p8284
asg12
I0
sg13
(lp8285
sg15
(lp8286
ssS'wid.pmw.radioselect.opt.buttontype'
p8287
(dp8288
g4
(lp8289
sg6
S"{HRadioSelect - buttontype}\n\nSpecifies the default type of buttons created by the {fadd()}  method. If\n'button', the default type is Tkinter.Button. If 'radiobutton', the default\ntype is Tkinter.Radiobutton. If 'checkbutton', the default type is\nTkinter.Checkbutton.\n\nIf 'radiobutton', single selection mode is automatically set. If\n'checkbutton', multiple selection mode is automatically set. The &default is\n'button'."
p8290
sg8
(lp8291
sg10
(lp8292
S'2006/03/21'
p8293
asg12
I0
sg13
(lp8294
sg15
(lp8295
ssS'wid.pmw.counter.opt.frame'
p8296
(dp8297
g4
(lp8298
sg6
S'{HCounter - frame}\n\nIf the {glabel} component has been created (that is, the {glabelpos} option is not\n{gNone}), the {gframe} component is created to act as the container of the entry\nfield and arrow buttons. If there is no {glabel} component, then no {gframe}\ncomponent is created and the {ghull} component acts as the container. In either\ncase the border around the container of the entry field and arrow buttons\nwill be raised (but not around the label).'
p8299
sg8
(lp8300
sg10
(lp8301
S'2006/03/20'
p8302
asg12
I0
sg13
(lp8303
sg15
(lp8304
ssS'layout-widget-add'
p8305
(dp8306
g4
(lp8307
S'&layout area'
p8308
aS'&widget buffet'
p8309
aS'&parking lot'
p8310
aS'&form'
p8311
aS'&widget buffet'
p8312
aS'&within'
p8313
aS'&frame'
p8314
aS'&frame'
p8315
aS'&frame'
p8316
aS'&frame'
p8317
aS'=layout-frame-create'
p8318
aS'&frame'
p8319
aS'&form'
p8320
aS'&widgetator'
p8321
aS'=option-editor'
p8322
aS'=bind-editor'
p8323
aS'=pack-editor'
p8324
asg6
S"{HAdding Widgets to your form}\n\nWidgets are added to the form in the &layout area by dragging them from the\n&widget buffet (way at the bottom below the &parking lot) and dropping them at\nthe desired location on the &form.\n\nNote that the &widget buffet contains several sets of widgets arranged in\ntabs and that each tab may contain more widgets than can be seen at once.\n\nAll the widgets which you place &within in a single &frame in your form should\nbe arranged either vertically or horizontally within that &frame. You don't\nhave to be all that precise about it - pretty much any attempt on your part\nto make the widgets line up one above the other or one next to the other is\nacceptable - but if they are all over the &frame then $$ isn't sure how you\nwant them packed.\n\nIf you really do want widgets scattered about a &frame, this suggests that you\nneed to add additional sub-frames (which is {Lreally easy to\ndo=layout-frame-create}). Add sub-frames as seems necessary so that the\nwidgets in any one &frame are all horizontal or all vertical.\n\nOnce a widget has been added to your &form you can, over on the left side of\nthe screen in the &Widgetator, look at and set the {Lwidget\noptions=option-editor}, the {Lbindings=bind-editor} and the {Lpack\noptions=pack-editor}."
p8325
sg8
(lp8326
sg10
(lp8327
S'2005/03/05'
p8328
asg12
I0
sg13
(lp8329
sg15
(lp8330
S'How to: Add widgets to your form'
p8331
assS'option.activeborderwidth.generic'
p8332
(dp8333
g4
(lp8334
S'&dimension'
p8335
asg6
S'{H@0 - activeborderwidth}\n\nA &dimensioned number giving the width of the border which is drawn around a choice when the mouse cursor is over\nit.'
p8336
sg8
(lp8337
sg10
(lp8338
S'2005/02/26'
p8339
asg12
I0
sg13
(lp8340
sg15
(lp8341
ssS'wid.tkinter.checkbutton.opt.pyclass'
p8342
(dp8343
g4
(lp8344
sg6
S'>option.pyclass.generic "Checkbutton"'
p8345
sg8
(lp8346
sg10
(lp8347
sg12
I0
sg13
(lp8348
sg15
(lp8349
ssS'wid.pmw.panedwidget.opt.orient'
p8350
(dp8351
g4
(lp8352
S'&default'
p8353
asg6
S"{HPanedWidget - orient}\n\nSpecifies the orientation of the paned widget. This\nmay be 'horizontal' or 'vertical'. If 'vertical', the panes are stacked above\nand below each other, otherwise the panes are laid out side by side. The\n&default is 'vertical'."
p8354
sg8
(lp8355
sg10
(lp8356
S'2006/03/21'
p8357
asg12
I0
sg13
(lp8358
sg15
(lp8359
ssS'wid.pmw.scrolledfield.opt.pyclass'
p8360
(dp8361
g4
(lp8362
sg6
S'>option.pyclass.generic "ScrolledField"'
p8363
sg8
(lp8364
sg10
(lp8365
sg12
I0
sg13
(lp8366
sg15
(lp8367
ssS'wid.pmw.radioselect.opt.labelmargin'
p8368
(dp8369
g4
(lp8370
sg6
S">option.pmw.labelmargin.generic 'RadioSelect'"
p8371
sg8
(lp8372
sg10
(lp8373
sg12
I0
sg13
(lp8374
sg15
(lp8375
ssS'wid.pmw.group.opt.hull'
p8376
(dp8377
g4
(lp8378
sg6
S">option.pmw.hull.generic 'Group'"
p8379
sg8
(lp8380
sg10
(lp8381
sg12
I0
sg13
(lp8382
sg15
(lp8383
ssS'project.new.write.failed'
p8384
(dp8385
S'Links'
p8386
(lp8387
sS'Text'
p8388
S'{HError creating new project}\n\nYou just asked me to create project "{g@1}" in directory "{g@0}",  however my attempt to write in that directory\nfailed with the error message:\n\nt {g@2}\n\nThis is generally the result of of not having the necessary permissions, but the message above shows all the details\nI have available. Sorry it didn\'t work.'
p8389
sS'Hotlinks'
p8390
(lp8391
sS'Comments'
p8392
(lp8393
S'2014-03-25'
p8394
asS'Wip'
p8395
I0
sS'Plurals'
p8396
(lp8397
sS'Abstracts'
p8398
(lp8399
ssS'option.spacing1.generic'
p8400
(dp8401
g4
(lp8402
S'&dimension'
p8403
aS'&new mexico tech'
p8404
asg6
S'{H@0 - spacing1}\n\nThis option is a &dimensioned number which specifies how much extra vertical space is put above each line of text. If a line wraps, this space is\nadded only before the first line it occupies on the display.\n\n$nmt'
p8405
sg8
(lp8406
sg10
(lp8407
S'2005/04/04'
p8408
asg12
I0
sg13
(lp8409
sg15
(lp8410
ssS'wid.tkinter.canvas.opt.relief'
p8411
(dp8412
g4
(lp8413
sg6
S'>option.relief.generic "Canvas"'
p8414
sg8
(lp8415
sg10
(lp8416
sg12
I0
sg13
(lp8417
sg15
(lp8418
ssS'wid.tkinter.radiobutton.opt.justify'
p8419
(dp8420
g4
(lp8421
sg6
S'>option.justify.generic "Radiobutton"'
p8422
sg8
(lp8423
sg10
(lp8424
sg12
I0
sg13
(lp8425
sg15
(lp8426
ssS'wid.pmw.buttonbox.opt.orient'
p8427
(dp8428
g4
(lp8429
sg6
S'>option.pmw.orient.generic "ButtonBox"'
p8430
sg8
(lp8431
sg10
(lp8432
sg12
I0
sg13
(lp8433
sg15
(lp8434
ssS'wid.tkinter.checkbutton.opt.pady'
p8435
(dp8436
g4
(lp8437
sg6
S'>option.pady.generic "Checkbutton", "widget"'
p8438
sg8
(lp8439
sg10
(lp8440
sg12
I0
sg13
(lp8441
sg15
(lp8442
ssS'wid.tkinter.checkbutton.opt.padx'
p8443
(dp8444
g4
(lp8445
sg6
S'>option.padx.generic "Checkbutton", "widget"'
p8446
sg8
(lp8447
sg10
(lp8448
sg12
I0
sg13
(lp8449
sg15
(lp8450
ssS'option.pmw.pady.generic'
p8451
(dp8452
g4
(lp8453
sg6
S'{H@0 - pady}\n\nSpecifies a padding distance to leave between each @1 in the\n{gy} direction and also between the @1s and the outer edge of the @0. \nThe default is {g3}.'
p8454
sg8
(lp8455
sg10
(lp8456
S'2006/03/18'
p8457
aS'@1 - Name of the component the space is between eg button'
p8458
asg12
I0
sg13
(lp8459
sg15
(lp8460
ssS'wid.tkinter.listbox.opt.takefocus'
p8461
(dp8462
g4
(lp8463
sg6
S'>option.takefocus.generic "Listbox"'
p8464
sg8
(lp8465
sg10
(lp8466
sg12
I0
sg13
(lp8467
sg15
(lp8468
ssS'widgetator.selector'
p8469
(dp8470
g4
(lp8471
S'&widgetator'
p8472
aS'&layout area'
p8473
aS'&layout area'
p8474
aS'&code editor'
p8475
aS'&layout area'
p8476
asg6
S'{HWidgetator - Selector}  \n\n{P$imgpr-help-Selector.ppm}\n\nThis {bSelector} is part of the &Widgetator. It is for selecting which widget\nyou want to work on. You can either click on the arrow to choose a widget\nfrom a dropdown list, or you can type the name of the widget to select into\nthe edit area then press {fenter}. The specified widget will be selected and\nit will be highlighted in the &layout area so you can see where the selected\nwidget is on the form.\n\nOf course you can also select a widget by clicking on it in the &layout area\nbut sometimes this selector comes in handy if you are in the &code editor and\nwant to switch widgets.\n\nNote that the selector only lists the widgets of the current form. To access\nthe attributes of a widget on a different form, first select that from in the\n&layout area.'
p8477
sg8
(lp8478
S'selector'
p8479
asg10
(lp8480
S'2005/03/04'
p8481
asg12
I0
sg13
(lp8482
sg15
(lp8483
S'The selector of the Widgetator is for selecting widgets'
p8484
assS'wid.tkinter.scale.opt.sliderlength'
p8485
(dp8486
g4
(lp8487
sg6
S'>option.sliderlength.generic "Scale"'
p8488
sg8
(lp8489
sg10
(lp8490
sg12
I0
sg13
(lp8491
sg15
(lp8492
ssS'option.pmw.vscrollmode.generic'
p8493
(dp8494
g4
(lp8495
S'&default'
p8496
asg6
S"{H@0 - vscrollmode}\n\nThe vertical scroll mode. If 'none', the vertical scrollbar will never be\ndisplayed. If 'static', the scrollbar will always be displayed. If 'dynamic',\nthe scrollbar will be displayed only if necessary. The &default is 'dynamic'."
p8497
sg8
(lp8498
sg10
(lp8499
S'2006/03/22'
p8500
asg12
I0
sg13
(lp8501
sg15
(lp8502
ssS'wid.tkinter.menu.opt.activeborderwidth'
p8503
(dp8504
g4
(lp8505
sg6
S'>option.activeborderwidth.generic "Menu"'
p8506
sg8
(lp8507
sg10
(lp8508
sg12
I0
sg13
(lp8509
sg15
(lp8510
ssS'wid.tkinter.radiobutton.opt.state'
p8511
(dp8512
g4
(lp8513
sg6
S'>option.state.generic "Radiobutton"'
p8514
sg8
(lp8515
sg10
(lp8516
sg12
I0
sg13
(lp8517
sg15
(lp8518
ssS'wid.tkinter.radiobutton.opt.selectimage'
p8519
(dp8520
g4
(lp8521
sg6
S'>option.selectimage.generic "Radiobutton"'
p8522
sg8
(lp8523
sg10
(lp8524
sg12
I0
sg13
(lp8525
sg15
(lp8526
ssS'wid.pmw.combobox.overview'
p8527
(dp8528
g4
(lp8529
sg6
S'{HWhat is: A ComboBox widget}\n\nA combobox contains an entry field and an associated scrolled listbox. When\nan item in the listbox is selected, it is displayed in the entry field.\nOptionally, the user may also edit the entry field directly.\n\nFor a simple combobox, the scrolled listbox is displayed beneath the entry\nfield. For a dropdown combobox (the default), the scrolled listbox is\ndisplayed in a window which pops up beneath the entry field when the user\nclicks on an arrow button on the right of the entry field. Either style\nallows an optional label.'
p8530
sg8
(lp8531
sg10
(lp8532
S'2006/03/19'
p8533
asg12
I0
sg13
(lp8534
sg15
(lp8535
S'What is: A ComboBox widget'
p8536
assS'option.tearoff.generic'
p8537
(dp8538
g4
(lp8539
S'&new mexico tech'
p8540
asg6
S'{H@0 - tearoff}\n\nNormally, a menu can be torn off; the first position (position 0) in the list\nof choices is occupied by the tear-off element, and the additional choices\nare added starting at position 1. If you set tearoff to {gFalse}, the menu\nwill not have a tear-off feature, and choices will be added starting at\nposition 0.\n\n$nmt'
p8541
sg8
(lp8542
sg10
(lp8543
S'2005/04/04'
p8544
asg12
I0
sg13
(lp8545
sg15
(lp8546
ssS'layout-frame-insert'
p8547
(dp8548
g4
(lp8549
S'=layout-frame-create'
p8550
aS'=layout-frame-select'
p8551
aS'=layout-frame-resize'
p8552
asg6
S'{HInserting frames in the layout editor}\n\nUsually you add new frames by {ldrawing lines=layout-frame-create} but there are situations\nwhere that method is not sufficient. Consider the following simple layout:\n\n{P$imgpr-help-Insert1.ppm}\n\nIf what you want is to add a new frame on the right, like this\n\n{P$imgpr-help-Insert2.ppm}\n\nthen you need something more powerful than simply adding another line to an existing layout.\n{bFrame insert} to the rescue. To insert a frame:\n\nn {lSelect=layout-frame-select} the frame inside which you wish to add the new frame. You can\n  add frames inside any frame, not just the main frame.\n\nn Right click within the frame you just selected.\n\nn From the popup menu, click one of the "{gInsert Frame <side>}" choices to insert a new frame\n  at the left, right, top or bottom of the current frame.\n\n{bNote} that there must be enough clear space for the new frame. If the {bInsert Frame} choice\nyou want is disabled (grey) then there is already a line, running the the same direction as\nthe frame you want, near that edge of the current frame. {lMove=layout-frame-resize} that line\naway from the edge of the frame and try again.'
p8553
sg8
(lp8554
sg10
(lp8555
S'2006/12/16'
p8556
asg12
I0
sg13
(lp8557
sg15
(lp8558
S'Inserting frames in the layout editor'
p8559
aS'How to: Insert a new frame along the side of an existing frame'
p8560
assS'wid.tkinter.canvas.opt.highlightbackground'
p8561
(dp8562
g4
(lp8563
sg6
S'>option.highlightbackground.generic "Canvas"'
p8564
sg8
(lp8565
sg10
(lp8566
sg12
I0
sg13
(lp8567
sg15
(lp8568
ssS'wid.pmw.combobox.opt.entryfield'
p8569
(dp8570
g4
(lp8571
sg6
S'{HComboBox - entryfield}\n\nThe entry field where the current selection is displayed.'
p8572
sg8
(lp8573
sg10
(lp8574
S'2006/03/18'
p8575
asg12
I0
sg13
(lp8576
sg15
(lp8577
ssS'technical.support'
p8578
(dp8579
g736
(lp8580
sg738
S'{H$$ Technical Support}\n\nIf you have questions or concerns about $$ or if, goodness, you have found a bug, then please get in touch with the\n$$ team at:\n\nt {b$mailto}\n\nTwo notes:\n\nn When you email us at the above address then you must put the word "rapyd" somewhere in the subject line or your\n  email will be silently deleted by our spam filers. As this is a publicly visible email account (it is mentioned\n  on our web site) it attracts it\'s share of spam.\n\nn We are happy to deal with questions that are specifically about $$, but if you have general questions about Python\n  or TkInter then best to contact the mailing lists that exist for that purpose.'
p8581
sg740
(lp8582
sg742
(lp8583
S'2014-05-09'
p8584
asg745
I1
sg746
(lp8585
sg748
(lp8586
S'How to: Get technical support'
p8587
assS'wid.tkinter.canvas.opt.yscrollcommand'
p8588
(dp8589
g4
(lp8590
sg6
S'>option.yscrollcommand.generic "Canvas"'
p8591
sg8
(lp8592
sg10
(lp8593
sg12
I0
sg13
(lp8594
sg15
(lp8595
ssS'wid.pmw.scrolledframe.opt.scrollmargin'
p8596
(dp8597
g4
(lp8598
S'&default'
p8599
asg6
S'{HScrolledFrame - scrollmargin}\n\nThe distance between the scrollbars and the clipping frame. The &default is 2.'
p8600
sg8
(lp8601
sg10
(lp8602
S'2006/03/23'
p8603
asg12
I0
sg13
(lp8604
sg15
(lp8605
ssS'wid.pmw.combobox.opt.labelmargin'
p8606
(dp8607
g4
(lp8608
sg6
S">option.pmw.labelmargin.generic 'ComboBox'"
p8609
sg8
(lp8610
sg10
(lp8611
sg12
I0
sg13
(lp8612
sg15
(lp8613
ssS'wid.tkinter.label.opt.highlightbackground'
p8614
(dp8615
g4
(lp8616
sg6
S'>option.highlightbackground.generic "Label"'
p8617
sg8
(lp8618
sg10
(lp8619
sg12
I0
sg13
(lp8620
sg15
(lp8621
ssS'option.name.generic'
p8622
(dp8623
g4
(lp8624
S'&name rules'
p8625
aS'&event'
p8626
aS'&handler'
p8627
aS'=option.name.rebind'
p8628
asg6
S"{H@0 - name}\n\nThe name by which this @0-instance is to be known within the current form.\n\nWhen new @0-instances are created, they are given arbitrary non-conflicting\nnames like {g@03} because they have to be called {isomething}. Your code will\nbe more easily understood if you give widget instances meaningful names.\n\nWidget names have to follow the Python &name rules and the name of a widget\nmust be unique within it's form.\n\nThere is an issue of widget-names in relation to &event &handler names. Click\n{lhere=option.name.rebind} if you care."
p8629
sg8
(lp8630
sg10
(lp8631
S'2005/04/08'
p8632
asg12
I0
sg13
(lp8633
sg15
(lp8634
ssS'wid.pmw.buttonbox.opt.pyclass'
p8635
(dp8636
g4
(lp8637
sg6
S'>option.pyclass.generic "ButtonBox"'
p8638
sg8
(lp8639
sg10
(lp8640
sg12
I0
sg13
(lp8641
sg15
(lp8642
ssS'widget.rename.handlers'
p8643
(dp8644
g4
(lp8645
S'=bindassist.name-suggestion'
p8646
aS'=howto.rename.handler'
p8647
asg6
S'{BChanging event handler names when a widget is renamed}\n\nYou just renamed the current widget from "@0" to "@1". In the current form\nthe following handler</s> reference<s> widget "@0":\n\n@2\n\nIf you choose {gNo} then the name</s> of the above hander</s> will not be\nchanged.\n\nIf you choose {gYes} then the name</s> of the handler</s> will be changed to:\n\n@4\n\nand all bindings that make reference to the above handler</s> will be revised\naccordingly.\n\nNote that only event handlers with names of the\n{Lrecommended=bindassist.name-suggestion} form {gon_widget_whatever} are\nconsidered for automatic renaming. Non-standard event handler names are\nalways left as-is. If you wish to change them then you have to do the\n{Lrename=howto.rename.handler} manually.'
p8648
sg8
(lp8649
sg10
(lp8650
S'2005/05/16'
p8651
aS'@0 Old widget name'
p8652
aS'@1 New widget name'
p8653
aS'@2 List of old handler names'
p8654
aS'@3 Count of handlers involved (Pluralize)'
p8655
aS'@4 List of new handler names'
p8656
asg12
I0
sg13
(lp8657
I3
asg15
(lp8658
ssS'gpl.license'
p8659
(dp8660
g4
(lp8661
S'=gpl'
p8662
aS'=layout.menu.about'
p8663
asg6
S'This is the section of the {bGNU General Public License} which deals with redistribution\nissues.\n\n o Click {lhere=gpl} for the full text of the license.\n o Click {Lhere=layout.menu.about} for the $$ "about" box.\n\n TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\nn {n0}This License applies to any program or other work which contains a notice placed by\n  the copyright holder saying it may be distributed under the terms of this General Public\n  License.  The "Program", below, refers to any such program or work, and a "work based on\n  the Program" means either the Program or any derivative work under copyright law: that is\n  to say, a work containing the Program or a portion of it, either verbatim or with\n  modifications and/or translated into another language.  (Hereinafter, translation is\n  included without limitation in the term "modification".)  Each licensee is addressed as\n  "you".\n\n  Activities other than copying, distribution and modification are not covered by this\n  License; they are outside its scope.  The act of running the Program is not restricted,\n  and the output from the Program is covered only if its contents constitute a work based on\n  the Program (independent of having been made by running the Program). Whether that is true\n  depends on what the Program does.\n\nn You may copy and distribute verbatim copies of the Program\'s source code as you receive\n  it, in any medium, provided that you conspicuously and appropriately publish on each copy\n  an appropriate copyright notice and disclaimer of warranty; keep intact all the notices\n  that refer to this License and to the absence of any warranty; and give any other\n  recipients of the Program a copy of this License along with the Program.\n\n  You may charge a fee for the physical act of transferring a copy, and you may at your\n  option offer warranty protection in exchange for a fee.\n\nn You may modify your copy or copies of the Program or any portion of it, thus forming a\n  work based on the Program, and copy and distribute such modifications or work under the\n  terms of Section 1 above, provided that you also meet all of these conditions:\n\n  n {na}You must cause the modified files to carry prominent notices stating that you\n    changed the files and the date of any change.\n\n  n You must cause any work that you distribute or publish, that in whole or in part\n    contains or is derived from the Program or any part thereof, to be licensed as a whole\n    at no charge to all third parties under the terms of this License.\n\n  n If the modified program normally reads commands interactively when run, you must cause\n    it, when started running for such interactive use in the most ordinary way, to print or\n    display an announcement including an appropriate copyright notice and a notice that\n    there is no warranty (or else, saying that you provide a warranty) and that users may\n    redistribute the program under these conditions, and telling the user how to view a copy\n    of this License. (Exception: if the Program itself is interactive but does not normally\n    print such an announcement, your work based on the Program is not required to print an\n    announcement.)\n\n  These requirements apply to the modified work as a whole.  If identifiable sections of\n  that work are not derived from the Program, and can be reasonably considered independent\n  and separate works in themselves, then this License, and its terms, do not apply to those\n  sections when you distribute them as separate works.  But when you distribute the same\n  sections as part of a whole which is a work based on the Program, the distribution of the\n  whole must be on the terms of this License, whose permissions for other licensees extend\n  to the entire whole, and thus to each and every part regardless of who wrote it.\n\n  Thus, it is not the intent of this section to claim rights or contest your rights to work\n  written entirely by you; rather, the intent is to exercise the right to control the\n  distribution of derivative or collective works based on the Program.\n\n  In addition, mere aggregation of another work not based on the Program with the Program\n  (or with a work based on the Program) on a volume of a storage or distribution medium does\n  not bring the other work under the scope of this License.\n\nn You may copy and distribute the Program (or a work based on it, under Section 2) in object\n  code or executable form under the terms of Sections 1 and 2 above provided that you also\n  do one of the following:\n\n  n {na} Accompany it with the complete corresponding machine-readable source code, which\n    must be distributed under the terms of Sections 1 and 2 above on a medium customarily\n    used for software interchange; or,\n\n  n Accompany it with a written offer, valid for at least three years, to give any third\n    party, for a charge no more than your cost of physically performing source distribution,\n    a complete machine-readable copy of the corresponding source code, to be distributed\n    under the terms of Sections 1 and 2 above on a medium customarily used for software\n    interchange; or,\n\n  n Accompany it with the information you received as to the offer to distribute\n    corresponding source code.  (This alternative is allowed only for noncommercial\n    distribution and only if you received the program in object code or executable form with\n    such an offer, in accord with Subsection b above.)\n\n  The source code for a work means the preferred form of the work for making modifications\n  to it.  For an executable work, complete source code means all the source code for all\n  modules it contains, plus any associated interface definition files, plus the scripts used\n  to control compilation and installation of the executable.  However, as a special\n  exception, the source code distributed need not include anything that is normally\n  distributed (in either source or binary form) with the major components (compiler, kernel,\n  and so on) of the operating system on which the executable runs, unless that component\n  itself accompanies the executable.\n\n  If distribution of executable or object code is made by offering access to copy from a\n  designated place, then offering equivalent access to copy the source code from the same\n  place counts as distribution of the source code, even though third parties are not\n  compelled to copy the source along with the object code.\n\nn You may not copy, modify, sublicense, or distribute the Program except as expressly\n  provided under this License.  Any attempt otherwise to copy, modify, sublicense or\n  distribute the Program is void, and will automatically terminate your rights under this\n  License. However, parties who have received copies, or rights, from you under this License\n  will not have their licenses terminated so long as such parties remain in full compliance.\n\nn You are not required to accept this License, since you have not signed it. However,\n  nothing else grants you permission to modify or distribute the Program or its derivative\n  works.  These actions are prohibited by law if you do not accept this License.  Therefore,\n  by modifying or distributing the Program (or any work based on the Program), you indicate\n  your acceptance of this License to do so, and all its terms and conditions for copying,\n  distributing or modifying the Program or works based on it.\n\nn Each time you redistribute the Program (or any work based on the Program), the recipient\n  automatically receives a license from the original licensor to copy, distribute or modify\n  the Program subject to these terms and conditions. You may not impose any further\n  restrictions on the recipients\' exercise of the rights granted herein. You are not\n  responsible for enforcing compliance by third parties to this License.\n\nn If, as a consequence of a court judgment or allegation of patent infringement or for any\n  other reason (not limited to patent issues), conditions are imposed on you (whether by\n  court order, agreement or otherwise) that contradict the conditions of this License, they\n  do not excuse you from the conditions of this License.  If you cannot distribute so as to\n  satisfy simultaneously your obligations under this License and any other pertinent\n  obligations, then as a consequence you may not distribute the Program at all. For example,\n  if a patent license would not permit royalty-free redistribution of the Program by all\n  those who receive copies directly or indirectly through you, then the only way you could\n  satisfy both it and this License would be to refrain entirely from distribution of the\n  Program.\n\n  If any portion of this section is held invalid or unenforceable under any particular\n  circumstance, the balance of the section is intended to apply and the section as a whole\n  is intended to apply in other circumstances.\n\n  It is not the purpose of this section to induce you to infringe any patents or other\n  property right claims or to contest validity of any such claims; this section has the sole\n  purpose of protecting the integrity of the free software distribution system, which is\n  implemented by public license practices.  Many people have made generous contributions to\n  the wide range of software distributed through that system in reliance on consistent\n  application of that system; it is up to the author/donor to decide if he or she is willing\n  to distribute software through any other system and a licensee cannot impose that choice.\n\n  This section is intended to make thoroughly clear what is believed to be a consequence of\n  the rest of this License.\n\nn If the distribution and/or use of the Program is restricted in certain countries either by\n  patents or by copyrighted interfaces, the original copyright holder who places the Program\n  under this License may add an explicit geographical distribution limitation excluding\n  those countries, so that distribution is permitted only in or among countries not thus\n  excluded.  In such case, this License incorporates the limitation as if written in the\n  body of this License.\n\nn The Free Software Foundation may publish revised and/or new versions of the General Public\n  License from time to time.  Such new versions will be similar in spirit to the present\n  version, but may differ in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the Program specifies a version\n  number of this License which applies to it and "any later version", you have the option of\n  following the terms and conditions either of that version or of any later version\n  published by the Free Software Foundation. If the Program does not specify a version\n  number of this License, you may choose any version ever published by the Free Software\n  Foundation.\n\nn If you wish to incorporate parts of the Program into other free programs whose\n  distribution conditions are different, write to the author to ask for permission.  For\n  software which is copyrighted by the Free Software Foundation, write to the Free Software\n  Foundation; we sometimes make exceptions for this. Our decision will be guided by the two\n  goals of preserving the free status of all derivatives of our free software and of\n  promoting the sharing and reuse of software generally.'
p8664
sg8
(lp8665
sg10
(lp8666
S'<2006/03/12'
p8667
asg12
I0
sg13
(lp8668
sg15
(lp8669
ssS'wid.tkinter.menubutton.opt.borderwidth'
p8670
(dp8671
g4
(lp8672
sg6
S'>option.borderwidth.generic "Menubutton"'
p8673
sg8
(lp8674
sg10
(lp8675
sg12
I0
sg13
(lp8676
sg15
(lp8677
ssS'load.changed.importtype'
p8678
(dp8679
g4
(lp8680
S'&config file'
p8681
aS'&maintained'
p8682
asg6
S'{HChange of import-type at project load time}\n\nAs shown in the table below there <is/are> @1 module</s> which <has/have> a different\n"import type" setting than when the @2 was last saved.\n\n@0\n\nIn the table above "At-Save" is the import-type setting for the module at the time when this\n@2 was last saved while "Now" is the current import-type setting as specified by the &config\nfile.\n\n{bWhat this means}\n\nConsider the Tkinter module. If it\'s import type is set to "from" then the line to import it\nis "{gfrom Tkinter import *}" and you can then refer to methods and variables of the\n{fTkinter} module without qualification for example "{fButton}" and "{fGROOVE}".\n\nIf it\'s import type is set to "import" then the line to import it is "{gimport Tkinter}" and\nyou must quality all references to methods and variables for example "{fTkinter.Button}" and\n"{fTkinter.GROOVE}".\n\nWhen you continue with the load, any $$ &maintained references to names from the module</s>\nwhose import-typed changed will automatically be updated but any references you have created\nwill need to be revised to add or remove the qualification.'
p8683
sg8
(lp8684
sg10
(lp8685
S'2006/03/20'
p8686
aS'@0 Table of modules and then/now settings'
p8687
aS'@1 Number of modules in table'
p8688
aS"@2 'project' or 'form'"
p8689
asg12
I0
sg13
(lp8690
I1
asg15
(lp8691
ssS'wid.pmw.scrolledfield.opt.labelmargin'
p8692
(dp8693
g4
(lp8694
sg6
S">option.pmw.labelmargin.generic 'ScrolledField'"
p8695
sg8
(lp8696
sg10
(lp8697
sg12
I0
sg13
(lp8698
sg15
(lp8699
ssS'wid.pmw.menubar.overview'
p8700
(dp8701
g4
(lp8702
sg6
S'{HWhat is: A MenuBar widget}\n\nA menu bar is a container megawidget which manages a number of menu buttons\nand dropdown menus. There are methods to add menu buttons and menus to the\nmenu bar and for adding menu items to the menus. Menu buttons may be added to\nthe left or right of the megawidget. Each menu button and menu item may have\nhelp text to be displayed by a Pmw.Balloon. Each menu and cascaded menu\n(sub-menu) is referenced by name which is supplied on creation.'
p8703
sg8
(lp8704
sg10
(lp8705
S'2006/03/20'
p8706
asg12
I0
sg13
(lp8707
sg15
(lp8708
S'What is: A MenuBar widget'
p8709
assS'wid.tkinter.scale.opt.digits'
p8710
(dp8711
g4
(lp8712
sg6
S'>option.digits.generic "Scale"'
p8713
sg8
(lp8714
sg10
(lp8715
sg12
I0
sg13
(lp8716
sg15
(lp8717
ssS'wid.tkinter.label.opt.textvariable'
p8718
(dp8719
g4
(lp8720
sg6
S'>option.textvariable.generic "Label"'
p8721
sg8
(lp8722
sg10
(lp8723
sg12
I0
sg13
(lp8724
sg15
(lp8725
ssS'optioneditor.resizeknobs'
p8726
(dp8727
g4
(lp8728
S'&option editor'
p8729
asg6
S"{bOption Editor - Resize Knobs}    {P$imgpr-help-Resize.ppm}\n\nThe &option editor's has two of these resize knobs, each of which can be dragged\nleft or right.\n\n o Dragging the first resize knob adjusts the width of the area which shows\n   the option names.\n\n o Dragging the second resize knob adjusts the width of the edit area in\n   which you set the value of the options.\n\n{bNote}: To make the edit area wider, you can drag the second resize knob off\nthe right side of the option editor. Although the resize knob itself stops at\nthe edge of the option editor, the position of the mouse is still being\nfollowed and the edit area will resize appropriately."
p8730
sg8
(lp8731
sg10
(lp8732
S'2005/03/04'
p8733
asg12
I0
sg13
(lp8734
sg15
(lp8735
ssS'layout-frame-delete'
p8736
(dp8737
g4
(lp8738
S'&layout editor'
p8739
aS'&select the frame'
p8740
aS'&parking lot'
p8741
aS'&form'
p8742
aS'&form'
p8743
aS'&form'
p8744
aS'&form'
p8745
asg6
S"{HHow to delete a frame from the Layout editor}\n\nNote that you can delete only inner-most frames. In other words, if a frame\ncontains sub-frames then you have to delete the sub-frames first before you\ncan delete the frame.\n\nTo delete a frame from the &layout editor:\n\n o &Select the frame to be deleted.\n o Click and release the right mouse button within the frame (but not over a\n   widget within the frame).\n o From the popup menu choose {gDelete Frame}.\n o Confirm the deletion.\n\nOnce the frame is deleted, the area which the frame occupied is amalgamated\ninto an adjacent frame as appropriate.\n\nIf there were any widgets in the frame they are deleted as well (the popup\nwill tell you how many widgets are in the frame). If you want to delete a\nframe but keep the widgets, then prior to deleting the frame move the widgets\nto another frame or the &parking lot.\n\nNote that the outermost frame of a &form is the &form itself. If you want to\ndelete the entire &form (which deletes all the &form's widgets and all it's\ncode) then use the {gForms/Delete-the-current-form} menu choice."
p8746
sg8
(lp8747
sg10
(lp8748
S'2005/03/06'
p8749
asg12
I0
sg13
(lp8750
sg15
(lp8751
S'How to: Delete a frame from the layout editor'
p8752
assS'option.wrap.generic'
p8753
(dp8754
g4
(lp8755
sg6
S'{H@0 - wrap}\n\nThis option controls the display of lines that are too wide to fit in the\nwidget.\n\n o {gchar} - Lines which are too wide are wrapped after the last character\n   that will fit.\n\n o {gword} - Lines which are too wide are wrapped after the last word that\n   will fit.\n\n o {gnone} - Lines are never wrapped. You should provide a horizontal\n   scrollbar to allow access to wide lines.'
p8756
sg8
(lp8757
sg10
(lp8758
S'2005/04/06'
p8759
asg12
I0
sg13
(lp8760
sg15
(lp8761
ssS'wid.tkinter.entry.opt.show'
p8762
(dp8763
g4
(lp8764
sg6
S'>option.show.generic "Entry"'
p8765
sg8
(lp8766
sg10
(lp8767
sg12
I0
sg13
(lp8768
sg15
(lp8769
ssS'wid.pmw.timecounter.opt.autorepeat'
p8770
(dp8771
g4
(lp8772
S'&default'
p8773
asg6
S'{HTimeCounter - autorepeat}\n\nIf true, the counter will continue to count up or down while an arrow button\nis held pressed down. The &default is True.'
p8774
sg8
(lp8775
sg10
(lp8776
S'2006/03/23'
p8777
asg12
I0
sg13
(lp8778
sg15
(lp8779
ssS'module.new.dialog.formconflict'
p8780
(dp8781
g4
(lp8782
sg6
S'{HForm name conflict at project rename time}\n\nThe project, the main module of the project, and the main form of the main\nmodule all share the same name and when you rename the project, all three\nneed to be renamed. You just asked to change the name of the project to "@0".\nHowever, there is already a form of that name in the main module of the\nproject and thus there would be a name conflict when it came time to rename\nthe main form of the main module.\n\nEither\n\n o Choose a different name for the project, one that doesn\'t conflict with\n   the name of any existing module nor with any existing form in the main\n   module,\n\n   or\n\n o In the main module, change the form named "@0" be of a different name,\n   then do the project rename again.'
p8783
sg8
(lp8784
sg10
(lp8785
S'2006/03/27'
p8786
asg12
I0
sg13
(lp8787
sg15
(lp8788
ssS'module.new.dialog'
p8789
(dp8790
g4
(lp8791
S'&module'
p8792
aS'&project'
p8793
aS'&module'
p8794
aS'&module'
p8795
aS'&project'
p8796
aS'&name rules'
p8797
asg6
S'{HCreate new module dialog}\n\nThis dialog is about adding a new, empty &module to your &project. You will\nneed to supply a name for the new &module which is different from the name\nof any other &module in the current &project and is valid according to\nthe Python &name rules.'
p8798
sg8
(lp8799
sg10
(lp8800
S'2005/05/25'
p8801
asg12
I0
sg13
(lp8802
sg15
(lp8803
ssS'bindassist.handlerchange'
p8804
(dp8805
g4
(lp8806
S'&binding'
p8807
aS'&command option'
p8808
aS'&handler'
p8809
aS'&handler'
p8810
aS'&binding'
p8811
aS'&command option'
p8812
aS'&handler'
p8813
aS'&binding'
p8814
aS'&binding'
p8815
aS'&handler'
p8816
aS'&handler'
p8817
aS'&handler'
p8818
aS'&binding'
p8819
aS'&handler'
p8820
aS'&handler'
p8821
aS'&handler'
p8822
aS'&handler'
p8823
aS'&binding'
p8824
aS'&binding'
p8825
aS'&handler'
p8826
aS'&handler'
p8827
aS'&handler'
p8828
aS'&binding'
p8829
aS'&handler'
p8830
aS'&binding'
p8831
aS'&handler'
p8832
aS'&binding'
p8833
aS'&handler'
p8834
aS'&binding'
p8835
aS'&handler'
p8836
aS'&handler'
p8837
aS'&handler'
p8838
aS'&handler'
p8839
aS'&binding'
p8840
aS'&binding'
p8841
aS'&handler'
p8842
aS'&handler'
p8843
aS'&binding'
p8844
aS'&handler'
p8845
aS'&handler'
p8846
aS'&binding'
p8847
aS'&handler'
p8848
asg6
S'{HChanging the event-handler name}\n\nIf you are working on an existing &binding or &command option and you change the name of the &handler then various\nthings happen, depending on the situation.\n\n{BThe short story}\n\nThe short story is: go ahead and change &handler names as you see fit. Things should happen properly and if there\nare any choices to be made a dialog should pop up giving you the choice.\n\n{BThe long story}\n\nThe long story is given below and if you are curious or if things aren\'t working as you expected then perhaps it is\nexplained here. The details below assume that you have called up an {bexisting} &binding or &command option and have\nchanged the name of the &handler to be associated with it. By "binding" we mean "binding or command-option", they\nwork the same way.\n\no If this &binding was the only &binding which referred to the &handler and no &handler of the new name already\n  exists, then the name of the &handler is changed in both the &binding and the code. Note that &handlers are kept\n  in alphabetical order in the code, so the &handlers position in the code can change when it is renamed.\n\no If the name of the &handler is changed to mention a &handler that already exists, then there are various\n  possibilities. If the current &binding is the only one which refers to the old handler then after the change is\n  made no &bindings wil refer to the old &handler and you are given the option of deleting the old &handler. Of\n  course it is quite possible that you have made calls to the &handler from your code ($$ doesn\'t check for that) in\n  which case you will not want to delete the &handler.\n\no If one or more other &bindings refer to the &handler to which this &binding referred then there are two\n  possibilities and a dialog pops up asking you which one you want.\n\n n You might simply be renaming the &handler and you now want all the &bindings (including the current one) which\n   referred to the old name to now refer to the new name. There will be a {gChange Name} button in the dialog for\n   this choice. The name of the &handler in the code will be changed and all the &bindings will be updated to\n   reflect this new name. Note that &handlers are kept in alphabetical order in the code, so the &handlers position\n   in the code can change when it is renamed.\n\n   If your code has explicit calls to the handler then you will have to update that code yourself to refer to the\n   new &handler name; $$ doesn\'t check for this.\n\n n You might want to create a &handler of the new name for use solely by this &binding while leaving the original\n   hander and any other &bindings which refer to the original &handler alone. There will be a {GNew Handler} button\n   in the dialog for this choice. A new, empty, &handler is created, this &binding referrs to the new &handler, the\n   old &handler stays in place and all the other &bindings continue to refer to the old &handler.'
p8849
sg8
(lp8850
sg10
(lp8851
S'2005/05/15'
p8852
asg12
I0
sg13
(lp8853
sg15
(lp8854
S'Changing the name of an existing event handler'
p8855
assS'wid.tkinter.menubutton.opt.highlightthickness'
p8856
(dp8857
g4
(lp8858
sg6
S'>option.highlightthickness.generic "Menubutton"'
p8859
sg8
(lp8860
sg10
(lp8861
sg12
I0
sg13
(lp8862
sg15
(lp8863
ssS'wid.pmw.radioselect.opt.name'
p8864
(dp8865
g4
(lp8866
sg6
S">option.name.generic 'RadioSelect'"
p8867
sg8
(lp8868
sg10
(lp8869
sg12
I0
sg13
(lp8870
sg15
(lp8871
ssS'wid.tkinter.menubutton.opt.font'
p8872
(dp8873
g4
(lp8874
sg6
S'>option.font.generic "Menubutton"'
p8875
sg8
(lp8876
sg10
(lp8877
sg12
I0
sg13
(lp8878
sg15
(lp8879
ssS'wid.pmw.buttonbox.opt.hull'
p8880
(dp8881
g4
(lp8882
sg6
S'>option.pmw.hull.generic "ButtonBox"'
p8883
sg8
(lp8884
sg10
(lp8885
sg12
I0
sg13
(lp8886
sg15
(lp8887
ssS'code-edit.action.paste'
p8888
(dp8889
g4
(lp8890
S'&editor actions'
p8891
asg6
S'{HCode editor - Paste}\n\n Key:   $tActionPaste\n Menu: {fEdit/Paste}\n\nAny text in the clipboard is copied into the code at the current cursor\nlocation. The clipboard is not cleared.\n\nCode &editor actions'
p8892
sg8
(lp8893
sg10
(lp8894
S'2005/04/07'
p8895
asg12
I0
sg13
(lp8896
sg15
(lp8897
S'Code editor - Paste'
p8898
assS'module.rename.dialog.fileexists'
p8899
(dp8900
g4
(lp8901
S'&module'
p8902
aS'&project'
p8903
aS'&module'
p8904
aS'&project'
p8905
aS'&module'
p8906
aS'&module'
p8907
asg6
S'{HFile already exists warning}\n\nYou just asked to rename the current &module from "{b@2}" to "{b@0}". When\nthe &project is made all the code for the renamed module will be gathered\ntogether and written to a file named "{b@1}". However, I note that there is\nalready a file of that name in existence.\n\nIf you go ahead and rename the &module to "@0" then the next time the\n&project is built the existing file "@1" will be overwritten with the code for\nthe renamed &module. If you are OK with this then so am I; just thought I\nshould warn you that an existing file will be wiped out if you keep going.\n\nIf you are {bnot} OK with this, then click {gCancel} and either enter a\ndifferent name for the &module or cancel the rename altogether.'
p8908
sg8
(lp8909
sg10
(lp8910
S'2005/05/25'
p8911
aS'@0 The requested name of the module'
p8912
aS'@1 The path for the python file'
p8913
aS'@2 The current name of the module'
p8914
asg12
I0
sg13
(lp8915
sg15
(lp8916
ssS'wid.tkinter.label.opt.wraplength'
p8917
(dp8918
g4
(lp8919
sg6
S'>option.wraplength.generic "Label"'
p8920
sg8
(lp8921
sg10
(lp8922
sg12
I0
sg13
(lp8923
sg15
(lp8924
ssS'wid.tkinter.label.opt.font'
p8925
(dp8926
g4
(lp8927
S'&font'
p8928
asg6
S'>option.font.generic "Label"'
p8929
sg8
(lp8930
sg10
(lp8931
sg12
I0
sg13
(lp8932
sg15
(lp8933
ssS'wid.tkinter.menubutton.opt.highlightcolor'
p8934
(dp8935
g4
(lp8936
sg6
S'>option.highlightcolor.generic "Menubutton"'
p8937
sg8
(lp8938
sg10
(lp8939
sg12
I0
sg13
(lp8940
sg15
(lp8941
ssS'option.pmw.hull.generic'
p8942
(dp8943
g4
(lp8944
sg6
S'{H@0 - hull}\n\nThe hull acts as the body for the entire @0. Other components are created as\nchildren of the hull to further specialize the widget.'
p8945
sg8
(lp8946
sg10
(lp8947
S'2006/03/18'
p8948
asg12
I0
sg13
(lp8949
sg15
(lp8950
ssS'wid.tkinter.listbox.opt.xscrollcommand'
p8951
(dp8952
g4
(lp8953
sg6
S'>option.xscrollcommand.generic "Listbox"'
p8954
sg8
(lp8955
sg10
(lp8956
sg12
I0
sg13
(lp8957
sg15
(lp8958
ssS'bindassist.button'
p8959
(dp8960
g4
(lp8961
S'&bind editor'
p8962
aS'=bindassist.general'
p8963
aS'&binding'
p8964
asg6
S'{HBind Editor - "Assist" Button}\n\nThis button is part of the &Bind Editor. Clicking on it will bounce you into\nthe {LBind Assist=bindassist.general} dialog where you can modify or delete the\n&binding shown to the left of this button.'
p8965
sg8
(lp8966
sg10
(lp8967
S'2005/03/17'
p8968
asg12
I0
sg13
(lp8969
sg15
(lp8970
S'The "Assist" Button of the Bind Editor'
p8971
assS'color.orange'
p8972
(dp8973
g1319
(lp8974
sg1321
S'{HOranges}\n\n {f#FF8C00}  dark orange\n {f#FF8C00}  DarkOrange\n {f#FF7F00}  DarkOrange1\n {f#EE7600}  DarkOrange2\n {f#CD6600}  DarkOrange3\n {f#8B4500}  DarkOrange4\n {f#FFA500}  orange\n {f#FF4500}  orange red\n {f#FFA500}  orange1\n {f#EE9A00}  orange2\n {f#CD8500}  orange3\n {f#8B5A00}  orange4\n {f#FF4500}  OrangeRed\n {f#FF4500}  OrangeRed1\n {f#EE4000}  OrangeRed2\n {f#CD3700}  OrangeRed3\n {f#8B2500}  OrangeRed4'
p8975
sg1323
(lp8976
sg1325
(lp8977
sg1327
I0
sg1328
(lp8978
sg1330
(lp8979
ssS'command-option.whatis'
p8980
(dp8981
g4
(lp8982
S'&option editor'
p8983
aS'&binding'
p8984
aS'&binding'
p8985
aS'&bind editor'
p8986
aS'&option editor'
p8987
aS'&binding'
p8988
aS'&event'
p8989
asg6
S'{HWhat is: a "command option"}\n\nWidgets have options and setting those options is handled by the &option\neditor.\n\nMost options involve setting a value (for example color, width, thickness\netc) while other options involve making a choice (the {fanchor} option for\nexample}.\n\n"Command" options are those options which reference a command - that is, a\npython function - to be executed on certain specified occasions. For example\nthe {fbutton} widget has an option named "command" which specifies a function\nto be called when the button is pressed.\n\nCommand options are closely related to &bindings but while &bindings are\nhandled by the &bind editor, command options are handled by the &option\neditor.\n\nFrom a functional point of view the only difference between &bindings and\ncommand options is that the function called due to a binding receives an\n&event argument while a function called due to a command option \nreceives options that vary depending on the nature of the command option.'
p8990
sg8
(lp8991
S'command option'
p8992
asg10
(lp8993
S'2006/02/08'
p8994
asg12
I0
sg13
(lp8995
sg15
(lp8996
S'What is: A command option'
p8997
assS'wid.pmw.scrolledframe.opt.horizscrollbar'
p8998
(dp8999
g4
(lp9000
sg6
S'{HScrolledFrame - horizscrollbar}\n\nThe horizontal scrollbar component. Its component group is Scrollbar.'
p9001
sg8
(lp9002
sg10
(lp9003
S'2006/03/23'
p9004
asg12
I0
sg13
(lp9005
sg15
(lp9006
ssS'wid.tkinter.listbox.opt.background'
p9007
(dp9008
g4
(lp9009
sg6
S'>option.background.generic "Listbox"'
p9010
sg8
(lp9011
sg10
(lp9012
S'2005/02/26'
p9013
asg12
I0
sg13
(lp9014
sg15
(lp9015
ssS'wid.tkinter.entry.opt.takefocus'
p9016
(dp9017
g4
(lp9018
sg6
S'>option.takefocus.generic "Entry"'
p9019
sg8
(lp9020
sg10
(lp9021
sg12
I0
sg13
(lp9022
sg15
(lp9023
ssS'wid.pmw.scrolledcanvas.opt.pyclass'
p9024
(dp9025
g4
(lp9026
sg6
S'>option.pyclass.generic "ScrolledCanvas"'
p9027
sg8
(lp9028
sg10
(lp9029
sg12
I0
sg13
(lp9030
sg15
(lp9031
ssS'wid.tkinter.canvas.opt.scrollregion'
p9032
(dp9033
g4
(lp9034
sg6
S'>option.scrollregion.generic "Canvas"'
p9035
sg8
(lp9036
sg10
(lp9037
sg12
I0
sg13
(lp9038
sg15
(lp9039
ssS'wid.tkinter.menubutton.opt.background'
p9040
(dp9041
g4
(lp9042
sg6
S'>option.background.generic "Menubutton"'
p9043
sg8
(lp9044
sg10
(lp9045
sg12
I0
sg13
(lp9046
sg15
(lp9047
ssS'bindassist.eventnoangle'
p9048
(dp9049
g4
(lp9050
S'&event'
p9051
aS'&bind wizard'
p9052
asg6
S'{HEvent string not in angle brackets}\n\nTk &event strings have to be inside angle brackets {b<like this>}. The event string you\njust entered is missing one or both of the angle brackets.\n\nMay we suggest the &bind wizard as a most excellent means of always getting a properly\nformed event string?'
p9053
sg8
(lp9054
sg10
(lp9055
S'2006/02/20'
p9056
asg12
I0
sg13
(lp9057
sg15
(lp9058
ssS'load.versionconflict'
p9059
(dp9060
S'Links'
p9061
(lp9062
S'=whatis.version-number'
p9063
asS'Text'
p9064
S"{HFile Version Conflict}\n\nI'm $$ @3 and I am able to handle Rapyd Project files (.rpj files) from version-@0 through version-@1, however the\nproject that you just asked to load is version-@2 which was produced, presumably, by a more recent version of $$,\nand which I am unable to handle. In order to be able to import that project you will need to upgrade to a more\nrecent version of $$.\n\n{LAll about File Version Numbers=whatis.version-number}"
p9065
sS'Hotlinks'
p9066
(lp9067
sS'Comments'
p9068
(lp9069
S'2014-02-27'
p9070
aS'@0 Lowest acceptable version number'
p9071
aS'@1 Highest acceptable version number'
p9072
aS'@2 Version number of form under import'
p9073
aS'@3 Version number of Rapyd'
p9074
asS'Wip'
p9075
I0
sS'Plurals'
p9076
(lp9077
sS'Abstracts'
p9078
(lp9079
ssS'buffet.widget.menubar'
p9080
(dp9081
g4
(lp9082
sg6
S'>buffet.widget.generic2 "Pmw.MenuBar", \'\', \'wid.pmw.menubar.overview\''
p9083
sg8
(lp9084
sg10
(lp9085
sg12
I0
sg13
(lp9086
sg15
(lp9087
ssS'wid.tkinter.checkbutton.opt.image'
p9088
(dp9089
g4
(lp9090
sg6
S'>option.image.generic "Checkbutton"'
p9091
sg8
(lp9092
sg10
(lp9093
sg12
I0
sg13
(lp9094
sg15
(lp9095
ssS'wid.pmw.scrolledfield.opt.labelpos'
p9096
(dp9097
g4
(lp9098
sg6
S">option.pmw.labelpos.generic 'ScrolledField'"
p9099
sg8
(lp9100
sg10
(lp9101
sg12
I0
sg13
(lp9102
sg15
(lp9103
ssS'project.rename.dialog'
p9104
(dp9105
g4
(lp9106
S'&module'
p9107
aS'&module'
p9108
aS'&project'
p9109
aS'=project.files'
p9110
aS'&module'
p9111
aS'&project'
p9112
aS'&form'
p9113
aS'&project'
p9114
aS'&project'
p9115
aS'&project'
p9116
aS'&project'
p9117
aS'&module'
p9118
aS'&project'
p9119
aS'&project'
p9120
asg6
S'{HMain-module/project rename dialog}\n\nYou asked to rename the project or to rename of the current &module, which happens to be the primary &module of the\n&project.\n\nThe project, the main-module of the project and the main-form of the main module all share the same name. Thus\nchanging the name here will rename all three. This isn\'t a bad thing; it\'s simple something you should be aware of.\nFor information about the files of a $$ project {Lclick here.=project.files}\n\nEnter the new name (which must be different from any existing &module of the &project and different from any &form\nin the main module) and press OK.\n\nThe next time you save the &project it will be saved under the new name.\n\nNote that after a name change, any existing &project files will still exist and if you want it to go away you have\nto delete it yourself from the operating system. For example if you have a &project named "{fBaffy}" then all the\ninformation about that &project will be stored in a file named "{gBaffy.rpj}". If you change the name of the main\n&module (and hence of the &project) to "{gStringettes}" then the next time you save the &project it will be saved\ninto a file named "{gStringettes.rpj}" but the file "{gBaffy.rpj}" will still exist.'
p9121
sg8
(lp9122
sg10
(lp9123
S'2005/05/27'
p9124
asg12
I0
sg13
(lp9125
sg15
(lp9126
ssS'wid.tkinter.entry.opt.background'
p9127
(dp9128
g4
(lp9129
sg6
S'>option.background.generic "Entry"'
p9130
sg8
(lp9131
sg10
(lp9132
sg12
I0
sg13
(lp9133
sg15
(lp9134
ssS'wid.tkinter.text.opt.insertontime'
p9135
(dp9136
g4
(lp9137
sg6
S'>option.insertontime.generic "Text"'
p9138
sg8
(lp9139
sg10
(lp9140
sg12
I0
sg13
(lp9141
sg15
(lp9142
ssS'wid.tkinter.canvas.opt.xscrollincrement'
p9143
(dp9144
g4
(lp9145
sg6
S'>option.xscrollincrement.generic "Canvas"'
p9146
sg8
(lp9147
sg10
(lp9148
sg12
I0
sg13
(lp9149
sg15
(lp9150
ssS'wid.pmw.scrolledtext.opt.vertscrollbar'
p9151
(dp9152
g4
(lp9153
sg6
S'{HScrolledText - vertscrollbar}\n\nThe vertical scrollbar. Its component group is Scrollbar.'
p9154
sg8
(lp9155
sg10
(lp9156
S'2006/03/23'
p9157
asg12
I0
sg13
(lp9158
sg15
(lp9159
ssS'bind.eventwizard.metamodifiers'
p9160
(dp9161
g4
(lp9162
S'&event'
p9163
asg6
S'{HBind Event Wizard - Meta Modifiers}\n\nMost &events can be modified so they happen {bonly} if one or more special\n"meta" keys are down when the basic &event takes place.\n\nIf you want the &event you are specifying to happen only if, for example, one of\nthe {gAlt} keys is pressed at the time, then select the "Alt" checkbutton.\n\nIf you want your &event to happen regardless of the state of these meta keys,\nthen leave all the checkbuttons in this section of the wizard unchecked.\n\nWhen you are done chosing the meta keys, click on {gNext} to continue.\n\nTo change a previous choice, click on the {GBackUp} button.'
p9164
sg8
(lp9165
sg10
(lp9166
S'2005/03/13'
p9167
asg12
I0
sg13
(lp9168
sg15
(lp9169
S'Bind Event Wizard - Meta Modifiers'
p9170
assS'tutorial'
p9171
(dp9172
g4
(lp9173
S'&project'
p9174
aS'=new-project-details'
p9175
aS'&widgetator'
p9176
aS'&option editor'
p9177
aS'&bind editor'
p9178
aS'&pack editor'
p9179
aS'&layout area'
p9180
aS'&layout editor'
p9181
aS'&code editor'
p9182
aS'&layout editor'
p9183
aS'&frame'
p9184
aS'&code editor'
p9185
aS'=tutorial.2'
p9186
asg6
S'{HTurorial}\n\nHello new user!\n\nThis tutorial is designed introduce you to $$ by stepping you through the process of creating a simple "Hello World"\nproject. This tutorial presumes that you are already familiar with Python and Tkinter.\n\nSince you are reading this message (I can see your eyeballs moving) I am assuming you were successful at starting $$\nand finding the help system. Speaking of help, you can get help about almost everything you see within $$ by putting\nthe cursor over it and clicking the $hb.\n\nOh, another little detail about help. Right now you are looking at the "tutorial" help page. Real Soon now were\ngoing to have you do some stuff and while you are doing that stuff there will be lots of opportunities to click on\n"help" buttons or use the $hb to call up help. Once you have finished with any such help messages, you can use the\n{gBack} button within the help window to get back to this help page.\n\nFirst lets create a new, empty &project named {gHello}. To do that from the main menu\n\n{P$imgpr-help-MainMenu.ppm}\n\nclick on {gProject} and then on {gNew Project}. {LClick here=new-project-details} for details about exactly what\nhappens when you create a new project. Once you have created the new project, lets take a quick tour around the $$\nwindow.\n\no On the left is the &widgetator which is where you use the &option editor, the &bind editor and the &pack editor to\n  mess around with the characteristics of widgets.\n\no On the right is the &layout area which is timeshared between the &layout editor (what you are seeing right now)\n  and the &code editor (which we\'ll get to in a minute). You use the &layout editor to arrange &frames and widgets\n  within your form while the &code editor is for working on the Python code that makes your application go.\n\n         t ===> {LNext Tutorial Page=tutorial.2}'
p9187
sg8
(lp9188
sg10
(lp9189
S'2006/03/16'
p9190
asg12
I0
sg13
(lp9191
sg15
(lp9192
S'A hello-world tutorial'
p9193
assS'wid.tkinter.menubutton.opt.pyclass'
p9194
(dp9195
g4
(lp9196
sg6
S'>option.pyclass.generic "Menubutton"'
p9197
sg8
(lp9198
sg10
(lp9199
sg12
I0
sg13
(lp9200
sg15
(lp9201
ssS'project.new.dialog'
p9202
(dp9203
g4
(lp9204
S'&project'
p9205
aS'&project'
p9206
aS'=name-rules'
p9207
aS'=project.files'
p9208
aS'&project'
p9209
aS'&project'
p9210
aS'&module'
p9211
aS'&project'
p9212
aS'&module'
p9213
aS'&project'
p9214
asg6
S'{HThe New Project dialog}\n\nThe New Project dialog pops up when you ask to create a new &project. We need two pieces of information from you:\n\n n The name for the new &project (which must be a {Lvalid Python name=name-rules} , and\n\n n The directory into which the {Lproject\'s files=project.files} should be saved.\n\no The name you enter for the &project should be just the plain name, no extension.\n\no The name needs to be a legal Python name, even if your operating system allows other names.\n\no A default directory is shown on a button in the dialog. If you want your &project to be saved in a different\n  directory, click on the button and then select the desired directory.\n\no Every $$ project has a "main module"; this is the Python &module which is executed when it comes time to run the\n  project. The &project and the main &module of the &project always share the same name.'
p9215
sg8
(lp9216
sg10
(lp9217
S'2005/05/26'
p9218
asg12
I0
sg13
(lp9219
sg15
(lp9220
S'The New Project dialog'
p9221
assS'wid.tkinter.menubutton.opt.takefocus'
p9222
(dp9223
g4
(lp9224
sg6
S'>option.takefocus.generic "Menubutton"'
p9225
sg8
(lp9226
sg10
(lp9227
sg12
I0
sg13
(lp9228
sg15
(lp9229
ssS'project.rename.dialog.fileexists'
p9230
(dp9231
g4
(lp9232
S'&module'
p9233
aS'&module'
p9234
aS'&project'
p9235
aS'&project'
p9236
aS'&module'
p9237
aS'&project'
p9238
aS'&project'
p9239
aS'&project'
p9240
aS'&project'
p9241
aS'&module'
p9242
aS'&project'
p9243
aS'=project.files'
p9244
asg6
S'{HProject already exists warning}\n\nYou just asked to rename the main &module from "{b@2}" to "{b@0}". Since the\nname of the main &module is also the name of the entire &project that means the\n&project itself is being renamed. However, I note that there is already a file\nnamed "{b@1}" in existence.\n\nIf you go ahead and rename the &module and the &project to "@0" then the first\ntime the &project is saved the existing file "@1" will be overwritten with the\ndata for the renamed &project. If you are OK with this then so am I; just\nthought I should warn you that what looks to be an existing &project will be\nwiped out if you go ahead.\n\nIf you are {bnot} OK with this, then click {gCancel} and either enter a\ndifferent name for the &module and &project or cancel the rename altogether.\n\n{LClick here=project.files} for information about the file of a $$ project.'
p9245
sg8
(lp9246
sg10
(lp9247
S'2005/05/27'
p9248
aS'@0 The requested name of the module'
p9249
aS'@1 The path for the project file'
p9250
aS'@2 The current name of the module'
p9251
asg12
I0
sg13
(lp9252
sg15
(lp9253
ssS'wid.mainform.name'
p9254
(dp9255
g4
(lp9256
S'&form'
p9257
aS'&module'
p9258
aS'&project'
p9259
aS'=form.main.info'
p9260
aS'&project'
p9261
aS'&project'
p9262
asg6
S"{HName of main form}\n\nThis is the name of the main &form of the main &module of the &project.\n\nThe main form {Lis special=form.main.info}. It's name is always the same\nas the name of the whole &project so you can't change it here.\n\nIf you want to change the name of the whole &project then from the main\nmenu click on {gProjects} then on {gRename Project}."
p9263
sg8
(lp9264
sg10
(lp9265
S'2005/04/08'
p9266
asg12
I0
sg13
(lp9267
sg15
(lp9268
ssS'wid.pmw.scrolledlistbox.opt.labelpos'
p9269
(dp9270
g4
(lp9271
sg6
S">option.pmw.labelpos.generic 'ScrolledListBox'"
p9272
sg8
(lp9273
sg10
(lp9274
sg12
I0
sg13
(lp9275
sg15
(lp9276
ssS'dialog-handlerrename'
p9277
(dp9278
g4
(lp9279
S'&maintained'
p9280
aS'&event'
p9281
aS'&handler'
p9282
aS'&handler'
p9283
aS'&handler'
p9284
aS'&maintained'
p9285
aS'&handler'
p9286
asg6
S'{hThe event handler rename dialog}\n\nThis dialog shows you:\n\no The number of $$ &maintained references to this &event &handler.\n\no The current name of the &handler.\n\nKey in the new name for the &handler and click on OK. All $$ &maintained\nreferences to this &handler will be adjusted as necessary.'
p9287
sg8
(lp9288
sg10
(lp9289
S'2006/02/05'
p9290
asg12
I0
sg13
(lp9291
sg15
(lp9292
S'The event handler rename dialog'
p9293
assS'option.takefocus.generic'
p9294
(dp9295
g4
(lp9296
S'&focus'
p9297
asg6
S'{H@0 - takefocus}\n\nDetermines if and when the &focus visits this @0. There are three possible\nsettings.\n\n{GYes } - This @0 should receive the input focus as long as it is viewable\n(it and all of its ancestors are mapped).\n\n{GNo  } - This @0 should never receive the focus.\n\n{GAuto} - The decision about the focus will be made automatically by Tkinter.\nThe @0 will receive the focus unless:\n\n  o it is disabled, or\n  o it has no key bindings, or\n  o it is not viewable.'
p9298
sg8
(lp9299
sg10
(lp9300
S'<2005/04/08'
p9301
asg12
I0
sg13
(lp9302
sg15
(lp9303
ssS'wid.tkinter.checkbutton.opt.cursor'
p9304
(dp9305
g4
(lp9306
sg6
S'>option.cursor.generic "Checkbutton"'
p9307
sg8
(lp9308
sg10
(lp9309
sg12
I0
sg13
(lp9310
sg15
(lp9311
ssS'wid.tkinter.entry.opt.insertontime'
p9312
(dp9313
g4
(lp9314
sg6
S'>option.insertontime.generic "Entry"'
p9315
sg8
(lp9316
sg10
(lp9317
sg12
I0
sg13
(lp9318
sg15
(lp9319
ssS'edit-schema.no-bind'
p9320
(dp9321
g4
(lp9322
S'=howto.select.editor.schema'
p9323
asg6
S'{HEdit schema - no binding}\n\nThe editing function you asked about has no specific key assigned to it\nbecause the editing scheme "$editschema", as defined in the configuration\nfile $configfile, didn\'t assign a key to that function.\n\nIf you want to assign a key to that function then open $configfile with your\nfavorite text editor, find the section which starts with\n\nt {f[EditorScheme $editschema]}\n\nAbout 20 lines below that should be the section where editor actions are\nbound to specific keys; modify as necessary.\n\nInformation on changing the default schema is located\n{Lhere=howto.select.editor.schema}.'
p9324
sg8
(lp9325
sg10
(lp9326
sg12
I0
sg13
(lp9327
sg15
(lp9328
ssS'option.default.generic'
p9329
(dp9330
g4
(lp9331
S'&state'
p9332
asg6
S'{H@0 - default}\n\nThis option is really "much ado about nothing" and is rarely used. Your choices are:\n\nt {GNo border   } This is the default choice and simply draws the @0 as you would expect.\n\nt {GBlank border} This choice causes a small (perhaps 4 pixel) border to be drawn around the @0.\n\nt {GThin line   } This choice gives you the same small border around the @0 and draws a thin line in it.\n\nNote:\n\nThe above names for this option were invented by the $$ team. Tk and Tkinter use wonderfully misleading names for\nthis option, but if you care, here they are:\n\n o No border Tkinter calls {gdisabled}.\n o Blank border Tkinter calls {gnormal}.\n o Thin line Tkinter calls {gactive}.\n\nSoooo... The normal choice is called "{fdisabled}", a rarely used choice is called "{fnormal}" and another rarely\nused choice is called "{factive}". Wonderful.\n\nLest there be any confusion this option is {bnot} how you disable a widget; for that you use the &state option.'
p9333
sg8
(lp9334
sg10
(lp9335
S'2005/03/02'
p9336
asg12
I0
sg13
(lp9337
sg15
(lp9338
ssS'wid.pmw.scrolledlistbox.overview'
p9339
(dp9340
g4
(lp9341
sg6
S'{HWhat is: A ScrolledListBox widget}\n\nA scrolled listbox consists of a standard listbox widget with optional\nscrollbars which can be used to scroll the listbox. The scrollbars can be\ndynamic, which means that a scrollbar will only be displayed if it is\nnecessary. That is, if the listbox does not contain enough entries, the\nvertical scrollbar will be automatically hidden and if the entries are not\nwide enough, the horizontal scrollbar will be automatically hidden.'
p9342
sg8
(lp9343
sg10
(lp9344
S'2006/03/21'
p9345
asg12
I0
sg13
(lp9346
sg15
(lp9347
S'What is: A ScrolledListBox widget'
p9348
assS'wid.tkinter.canvas.opt.highlightthickness'
p9349
(dp9350
g4
(lp9351
sg6
S'>option.highlightthickness.generic "Canvas"'
p9352
sg8
(lp9353
sg10
(lp9354
sg12
I0
sg13
(lp9355
sg15
(lp9356
ssS'layout-frame-create'
p9357
(dp9358
g4
(lp9359
S'&form'
p9360
aS'&layout editor'
p9361
aS'&layout editor'
p9362
aS'=howto.scrolledframe'
p9363
aS'=layout-frame-delete'
p9364
aS'&form'
p9365
aS'&form'
p9366
aS'&form'
p9367
aS'=layout-frame-insert'
p9368
asg6
S"{HCreating frames in the layout editor}\n\nYou create frames in the &form on the &layout editor by drawing lines. To draw a line:\n\n o Click and hold the left mouse button about where you want the line.\n\n o While holding the left mouse button down, drag a short distance in the same direction as\n   you want the line to be. That is, for a vertical line move the mouse down a bit; for a\n   horizontal move the mouse right a bit. A line will spring into existence dividing the area\n   into two frames.\n\n o While continuing to hold the left button down, drag to position the line where you want it.\n\n o When the line is in it's final location, release the left mouse button.\n\n o If, as you are dragging the line around, you decide you don't to create a new frame after\n   all, drag the cursor until it is outside the &layout editor and then release the button.\n\n o Newly created frames are of type {fTkinter.Frame} but it's easy to change a frame to be a\n   {lPmw.ScrolledFrame=howto.scrolledframe}.\n\nIf you have created a frame but now want it to go away, it can {Lbe\ndeleted=layout-frame-delete}.\n\n\nNote that lines created as described above are always 'spanlines', that is, they span as much\ndistance as they can, stopping only when they meet a perpindicular line or the edge of the\n&form. This reflects the behavior of the Tkinter {gpack} geometry manager which is ultimately\ngoing to be what makes the layout of the form happen. The {gpack} manager is versitile and\nuseful, but it has it's own particular take on how you lay out &forms.\n\nIf you have come from some other platform and are expecting to start droping widgets at\nabsolute locations or sprinkle rectangles at random on the &form, that's not the way it works\nhere. $$ is a visual front end on top of the {gpack} geometry manager and it wouldn't be a bad\nidea to have at least some knowledge of how {Gpack} works, although at the moment that topic\nis beyond the scope of this help document.\n\n{HInserting frames}\n\nWhile the above method of creating new frames by drawing a line is quick and easy, there are\nsome things that it can not do. In particular if you want to shove an existing frame over and\ncreate a new frame along one of it's sides, then {Linsert frame=layout-frame-insert} is what\nyou need; click on the link for details."
p9369
sg8
(lp9370
sg10
(lp9371
S'2005/03/05'
p9372
asg12
I0
sg13
(lp9373
sg15
(lp9374
S'Creating frames in the layout editor'
p9375
aS'How to: Add a new frame to a form'
p9376
assS'option.yscrollcommand.generic'
p9377
(dp9378
g4
(lp9379
sg6
S'{H@0 - yscrollcommand}\n\nIf the @0 is scrollable, this attribute should be the {g.set()} method of\nthe vertical scrollbar.'
p9380
sg8
(lp9381
sg10
(lp9382
S'2005/04/07'
p9383
asg12
I0
sg13
(lp9384
sg15
(lp9385
ssS'wid.tkinter.canvas.opt.offset'
p9386
(dp9387
g4
(lp9388
sg6
S'>option.offset.generic "Canvas"'
p9389
sg8
(lp9390
sg10
(lp9391
sg12
I0
sg13
(lp9392
sg15
(lp9393
ssS'tutorial.3'
p9394
(dp9395
g4
(lp9396
S'&option editor'
p9397
aS'&widgetator'
p9398
aS'&widgetator'
p9399
aS'&bind editor'
p9400
aS'=tutorial.2'
p9401
aS'=tutorial.4'
p9402
asg6
S'{HTutorial - page 3}\n\nOver on the left in the &option editor there will be a list of all the options of the Label widget. To find out what\na particular options is about click the $hb over the option. Right now, find the {gText} option (you may have to\nscroll the options to get to it)\n\n{P$imgpr-help-TextOption.ppm}\n\nand click within the entry area to the right of the word "text" then key in the text "Hello World" then press the\n{gEnter} key. A quick peek at the code will show that it has been updated to set the text of the label widget.\n\nNow drag a {gButton} widget from the widget buffet and place it on the form just under the {gLabel} widget. In the\noption editor for the Button, set it\'s {gText} option to "Quit". Note that the editors shown in the &widgetator are\nthose of the currently selected widget. The easiest way to select a particular widget is simply to click on it.\n\nNext we want to create a binding and an event handler for the button. Make sure the just-created button widget is\nselected (it should have a border around it indicating selection) then click on the {gBindings} tab at the top of\nthe &widgetator to select the &bind editor. It should now look something like this:\n\n{P$imgpr-help-tut-BindEditor.ppm}\n\nClick on the {gCreate New Binding} button.\n\n{LPrevious Tutorial Page=tutorial.2}  <===>  {LNext Tutorial Page=tutorial.4}'
p9403
sg8
(lp9404
sg10
(lp9405
S'2006/03/17'
p9406
asg12
I0
sg13
(lp9407
sg15
(lp9408
ssS'wid.tkinter.radiobutton.opt.activebackground'
p9409
(dp9410
g4
(lp9411
sg6
S'>option.activebackground.generic "Radiobutton"'
p9412
sg8
(lp9413
sg10
(lp9414
sg12
I0
sg13
(lp9415
sg15
(lp9416
ssS'option.showvalue.generic'
p9417
(dp9418
g4
(lp9419
S'&new mexico tech'
p9420
asg6
S'{H@0 - showvalue}\n\nNormally, the current value of the scale is displayed in text form by the\nslider (above it for horizontal scales, to the left for vertical scales). Set\nthis option to {gfalse} to suppress that label.\n\n$nmt'
p9421
sg8
(lp9422
sg10
(lp9423
S'2005/04/04'
p9424
asg12
I0
sg13
(lp9425
sg15
(lp9426
ssS'option.pmw.orient.generic'
p9427
(dp9428
g4
(lp9429
sg6
S"{H@0 - orient}\n\nSpecifies the orientation of the @0. This may be '{ghorizontal}' or\n'{gvertical}'. The default is '{ghorizontal}'."
p9430
sg8
(lp9431
sg10
(lp9432
S'2006/03/18'
p9433
asg12
I0
sg13
(lp9434
sg15
(lp9435
ssS'option.disabledforeground.generic'
p9436
(dp9437
g4
(lp9438
S'&color'
p9439
asg6
S'{H@0 - disabledforeground}\n\nThe foreground &color to use when the @0 is disabled.'
p9440
sg8
(lp9441
sg10
(lp9442
S'2005/03/02'
p9443
asg12
I0
sg13
(lp9444
sg15
(lp9445
ssS'wid.tkinter.text.opt.font'
p9446
(dp9447
g4
(lp9448
S'&font'
p9449
aS'&new mexico tech'
p9450
asg6
S'{HText - font}\n\nThe default &font for text inserted into the widget. Note that you can have\nmultiple fonts in Text widgets by using tags to change the properties of some\ntext.\n\n$nmt'
p9451
sg8
(lp9452
sg10
(lp9453
S'2005/04/27'
p9454
asg12
I0
sg13
(lp9455
sg15
(lp9456
ssS'wid.tkinter.radiobutton.opt.highlightcolor'
p9457
(dp9458
g4
(lp9459
sg6
S'>option.highlightcolor.generic "Radiobutton"'
p9460
sg8
(lp9461
sg10
(lp9462
sg12
I0
sg13
(lp9463
sg15
(lp9464
ssS'name-rules'
p9465
(dp9466
g4
(lp9467
S'&module'
p9468
aS'&form'
p9469
aS'&module'
p9470
aS'&project'
p9471
aS'&form'
p9472
aS'&module'
p9473
aS'&form'
p9474
asg6
S'{HAcceptable names for Modules, Forms and Widgets}\n\nNames chosen for &Modules, &Forms and for Widgets must be legal Python names which means they must:\n\n o Start with a letter or underscore "{f_}"\n\n o If longer than one character in length, the additional characters can be letters, digits or underscore\n\n\no &Module names must be unique within a &project.\n\no &Form names must be unique within their &module.\n\no Widget names must be unique within their &form.'
p9475
sg8
(lp9476
S'name rules'
p9477
asg10
(lp9478
S'<2005/04/07'
p9479
asg12
I0
sg13
(lp9480
sg15
(lp9481
S'Acceptable names for Modules, Forms and Widgets'
p9482
assS'wid.pmw.notebook.opt.pyclass'
p9483
(dp9484
g4
(lp9485
sg6
S'>option.pyclass.generic "NoteBook"'
p9486
sg8
(lp9487
sg10
(lp9488
sg12
I0
sg13
(lp9489
sg15
(lp9490
ssS'wid.tkinter.menu.opt.relief'
p9491
(dp9492
g4
(lp9493
sg6
S'>option.relief.generic "Menu"'
p9494
sg8
(lp9495
sg10
(lp9496
sg12
I0
sg13
(lp9497
sg15
(lp9498
ssS'option.show.generic'
p9499
(dp9500
g4
(lp9501
S'&new mexico tech'
p9502
asg6
S'{H@0 - show}\n\nNormally, the characters that the user types appear in the entry. To make a\n"password" entry that echoes each character as an asterisk, set show to {G*}.\n\n$nmt'
p9503
sg8
(lp9504
sg10
(lp9505
S'2005/04/04'
p9506
asg12
I0
sg13
(lp9507
sg15
(lp9508
ssS'option.pmw.labelpos.generic'
p9509
(dp9510
g4
(lp9511
sg6
S'{H@0 - labelpos}\n\nSpecifies where to place the {glabel} component.\n\n o If {gNone}, no {glabel} component is created.\n\n o If not {gNone}, the first letter specifies on which side of the @0 to place\n   the label and the second letter, if any, indicates where on that side to\n   place the label.'
p9512
sg8
(lp9513
sg10
(lp9514
S'2006/03/18'
p9515
asg12
I0
sg13
(lp9516
sg15
(lp9517
ssS'wid.pmw.counter.opt.labelpos'
p9518
(dp9519
g4
(lp9520
sg6
S">option.pmw.labelpos.generic 'Counter'"
p9521
sg8
(lp9522
sg10
(lp9523
sg12
I0
sg13
(lp9524
sg15
(lp9525
ssS'form-properties-dialog-noname'
p9526
(dp9527
g4
(lp9528
S'=form-properties-dialog-other'
p9529
asg6
S'{HForm "Derive-From"}\n\nThis dialog is where you can change the class from which this form is to be derived.\n\nThe form must derive, directly or indirectly, from either {gToplevel}, {gFrame}, {gScrolledFrame} or from a class\nwhich provides equivalent functionality. If you think you want to derive from {fCanvas}, {fText} or something like\nthat, {lclick here=form-properties-dialog-other}.\n\nThe simple solution is to derive directly from {gToplevel}, {GFrame} or {gScrolledFrame} and if you are not totally\nsure about it, then this is the solution for you; use the following two rules to help you decide between the two:\n\n n Derive from {gToplevel} if this form is designed to live in its own private window on the screen. This is the\n   case for dialogs and other major components of an application.\n\n n Derive from {gFrame} or {gScrolledFrame} if this form is designed to be built into something else. This is the\n   case for user written widgets.\n\nFor advanced user, you can choose to derive from something which was itself derived from either {gToplevel},\n{gFrame} or {gScrolledFrame}. This will be the case if you want to use a class which was derived from one of these\nbut adds additional functionality. To do this choose one of:\n\n o {gA widget derived from Tkinter.Toplevel}\n o {gA widget derived from Tkinter.Frame}\n o {gA widget derived from Pmw.ScrolledFrame}\n\nand then key in the name of the actual class from which to derive. $$ does not check that the class you specify is\nin fact derived from {gToplevel}, {gFrame}, {gScrolledFrame} or something which provides equivalent functionality;\nif you lie about this you will just crash and burn when you go to run the resulting code, OK?'
p9530
sg8
(lp9531
sg10
(lp9532
S'2005/04/30'
p9533
asg12
I0
sg13
(lp9534
sg15
(lp9535
S'Setting the class from which your form derives'
p9536
assS'code-edit.action.outdentblock'
p9537
(dp9538
g4
(lp9539
S'&editor actions'
p9540
asg6
S'{HCode editor - Outdent block}\n\n Key:   $tActionOutdentBlock\n Menu: {fEdit/Indent block}\n\nEvery line in the currently selected block is outdented by the {gindent} amount.\n\nIf any of the lines in the block have too few spaces at the front for the\noutdent to happen then {bnone} of the lines in the block are outdented.\n\nThe indent amount is specified in the &config file.\n\nCode &editor actions'
p9541
sg8
(lp9542
sg10
(lp9543
S'2005/04/07'
p9544
asg12
I0
sg13
(lp9545
sg15
(lp9546
S'Code editor - Outdent block'
p9547
assS'wid.tkinter.entry.opt.cursor'
p9548
(dp9549
g4
(lp9550
sg6
S'>option.cursor.generic "Entry"'
p9551
sg8
(lp9552
sg10
(lp9553
sg12
I0
sg13
(lp9554
sg15
(lp9555
ssS'option-images'
p9556
(dp9557
g4
(lp9558
S'&bitmap'
p9559
asg6
S"{HImages}\n\nSome widgets (eg Buttons, Labels etc,) can display an image. Note that\n&bitmaps and images are different entities although they do a similar job.\n\nYou need the Python Imaging Library (PIL) to put images in widgets. You\nshould refer to the PIL for full documentation but, in brief, a popular way\nto bring in an image is:\n\n t {gMyImage = PhotoImage(file='myimage.ppm')}\n\nThe {fPhotoImage} method can process images in {g.pbm} (black and white),\n{g.pgm} (grayscale) and {g.ppm} (full color) formats. *\n\nAssuming that you now have an image in object {gMyImage} you can put that\nimage on a widget at creation time:\n\n t {gMyButton = Tkinter.Button(image=MyImage,yadayadayada)}\n\nof after a widget has been created:\n\n t {gMyButton['image'] = MyImage}\n\nFor widgets being created by {b$$} you can specify the name of the image\nobject in the widgets image option using the option editor.\n\n - - - - -\n\n*  {fPhotoImage} can in fact handle {f.gif} format file, but gif's -\ninvolving as they do software patents, retch, gag, ralph - are something nobody in\ntheir right mind uses any more. Death to software patents. See:\n\nt {fhttp://lpf.ai.mit.edu/Patents/against-software-patents.html\nt http://www.nosoftwarepatents.com/en/m/intro/index.html}"
p9560
sg8
(lp9561
S'image'
p9562
asg10
(lp9563
S'2005/02/22'
p9564
asg12
I0
sg13
(lp9565
sg15
(lp9566
S'Images'
p9567
assS'wid.tkinter.menubutton.opt.justify'
p9568
(dp9569
g4
(lp9570
sg6
S'>option.justify.generic "Menubutton"'
p9571
sg8
(lp9572
sg10
(lp9573
sg12
I0
sg13
(lp9574
sg15
(lp9575
ssS'wid.tkinter.toplevel.opt.nametop'
p9576
(dp9577
g4
(lp9578
sg6
S'>option.nametop.generic "Toplevel"'
p9579
sg8
(lp9580
sg10
(lp9581
sg12
I0
sg13
(lp9582
sg15
(lp9583
ssS'buffet.widget.scrolledcanvas'
p9584
(dp9585
g4
(lp9586
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledCanvas", \'\', \'wid.pmw.scrolledcanvas.overview\''
p9587
sg8
(lp9588
sg10
(lp9589
sg12
I0
sg13
(lp9590
sg15
(lp9591
ssS'wid.pmw.timecounter.opt.hull'
p9592
(dp9593
g4
(lp9594
sg6
S">option.pmw.hull.generic 'TimeCounter'"
p9595
sg8
(lp9596
sg10
(lp9597
sg12
I0
sg13
(lp9598
sg15
(lp9599
ssS'wid.tkinter.checkbutton.opt.width'
p9600
(dp9601
g4
(lp9602
S'&image'
p9603
aS'&bitmap'
p9604
aS'&new mexico tech'
p9605
asg6
S'{hCheckbutton - width}\n\nThe default width of a Checkbutton is determined by the size of the displayed\ntext, &image or &bitmap. You can set this option to a numer of characters and\nthe Checkbutton will always have room for that many characters.\n\n$nmt'
p9606
sg8
(lp9607
sg10
(lp9608
S'2005/04/16'
p9609
asg12
I0
sg13
(lp9610
sg15
(lp9611
ssS'wid.tkinter.text.opt.background'
p9612
(dp9613
g4
(lp9614
sg6
S'>option.background.generic "Text"'
p9615
sg8
(lp9616
sg10
(lp9617
sg12
I0
sg13
(lp9618
sg15
(lp9619
ssS'wid.tkinter.label.opt.highlightcolor'
p9620
(dp9621
g4
(lp9622
sg6
S'>option.highlightcolor.generic "Label"'
p9623
sg8
(lp9624
sg10
(lp9625
sg12
I0
sg13
(lp9626
sg15
(lp9627
ssS'buffet.widget.mainmenubar'
p9628
(dp9629
g4
(lp9630
sg6
S'>buffet.widget.generic2 "Pmw.MainMenuBar", \'\', \'wid.pmw.mainmenubar.overview\''
p9631
sg8
(lp9632
sg10
(lp9633
sg12
I0
sg13
(lp9634
sg15
(lp9635
ssS'code-edit.searchandreplace'
p9636
(dp9637
g4
(lp9638
S'=search.replace-dialog'
p9639
aS'&editor actions'
p9640
asg6
S'{HCode editor - Search and replace}\n\n Key:   $tActionSearchReplace\n Menu: {fSearch/Search and replace}\n\nPuts up a {ldialog=search.replace-dialog} to initiate a search and replace operation.\n\nOptions are provided to:\n\n o Be prompted prior to each replacement.\n o Relpace one or all occurences.\n o Search from the first line.\n o Search case sensitive or case insensitive.\n o Search forward or backward.\n o Search for straight text or a sub-set of regular expressions.\n\nCode &editor actions.'
p9641
sg8
(lp9642
sg10
(lp9643
S'2005/04/07'
p9644
asg12
I0
sg13
(lp9645
sg15
(lp9646
S'Code editor - Search and replace'
p9647
assS'wid.tkinter.menubutton.opt.underline'
p9648
(dp9649
g4
(lp9650
sg6
S'>option.underline.generic "Menubutton"'
p9651
sg8
(lp9652
sg10
(lp9653
sg12
I0
sg13
(lp9654
sg15
(lp9655
ssS'wid.tkinter.entry.opt.selectborderwidth'
p9656
(dp9657
g4
(lp9658
sg6
S'>option.selectborderwidth.generic "Entry", "text"'
p9659
sg8
(lp9660
sg10
(lp9661
sg12
I0
sg13
(lp9662
sg15
(lp9663
ssS'wid.tkinter.menu.opt.background'
p9664
(dp9665
g4
(lp9666
S'&new mexico tech'
p9667
asg6
S'{HMeun - background}\n\nThe background color for choices not under the mouse.\n\n$nmt'
p9668
sg8
(lp9669
sg10
(lp9670
S'2005/04/19'
p9671
asg12
I0
sg13
(lp9672
sg15
(lp9673
ssS'wid.pmw.combobox.opt.pyclass'
p9674
(dp9675
g4
(lp9676
sg6
S'>option.pyclass.generic "ComboBox"'
p9677
sg8
(lp9678
sg10
(lp9679
sg12
I0
sg13
(lp9680
sg15
(lp9681
ssS'wid.tkinter.radiobutton.opt.pyclass'
p9682
(dp9683
g4
(lp9684
sg6
S'>option.pyclass.generic "Radiobutton"'
p9685
sg8
(lp9686
sg10
(lp9687
sg12
I0
sg13
(lp9688
sg15
(lp9689
ssS'wid.tkinter.menubutton.opt.menu'
p9690
(dp9691
g4
(lp9692
sg6
S'>option.menu.generic "Menubutton"'
p9693
sg8
(lp9694
sg10
(lp9695
sg12
I0
sg13
(lp9696
sg15
(lp9697
ssS'project.new.dialog.fileexists'
p9698
(dp9699
g4
(lp9700
S'&project'
p9701
aS'&project'
p9702
aS'&project'
p9703
aS'=project.files'
p9704
aS'&project'
p9705
asg6
S"{HFile warning}\n\nYou are in the process of creating a new $$ &project but - as mentioned in the\ndialog - one or two files already exist that will be wiped out if a &project\nof the requested name is created.\n\nIf you continue then when the &project is saved or built, the file(s) mentioned\nwill be overwritten by the {Lproject's files=project.files}. If you know for\nsure that you don't want to keep the existing files then go ahead and click\n{gKeep going}. In all other cases click {gCancel} and pick a different name\nfor your &project."
p9706
sg8
(lp9707
sg10
(lp9708
S'2005/05/26'
p9709
asg12
I0
sg13
(lp9710
sg15
(lp9711
ssS'wid.tkinter.canvas.opt.xscrollcommand'
p9712
(dp9713
g4
(lp9714
sg6
S'>option.xscrollcommand.generic "Canvas"'
p9715
sg8
(lp9716
sg10
(lp9717
sg12
I0
sg13
(lp9718
sg15
(lp9719
ssS'wid.tkinter.button.opt.activebackground'
p9720
(dp9721
g4
(lp9722
sg6
S'>option.activebackground.generic "Button"'
p9723
sg8
(lp9724
sg10
(lp9725
sg12
I0
sg13
(lp9726
sg15
(lp9727
ssS'wid.pmw.counter.opt.datatype'
p9728
(dp9729
g4
(lp9730
sg6
S"{HCounter - datatype}\n\nSpecifies how the counter should count up and down.\n\no {gInteger}\n   The counter counts using whole numbers.\n\no {gReal}\n   The counter counts using floating point numbers. With this choice you get\n  to set the character used to separate the integer portion of the number\n  from the fractional portion.\n\no {gDate}\n   The counter counts in days, months and years. With this choice you get to\n  set the character that separates the date elements and you get to specify\n  the order in which the elements appear. Of course ymd is the only\n  reasonable choice but such is the joy of Pmw that it lets you select any of\n  the unreasonable choices if you so desire.\n\no {gTime}\n   The counter counts in hours and minutes. With this choice you get to set\n  the character that separates the time elements.\n\no {gDictionary}\n   For this one you specify either the name of a dictionary or an actual\n  dictionary enclosed in braces. The dictionary should contain an entry whose\n  key is {g'counter'} and whose value is a function. The function will be\n  called with at least three arguments:\n\n  n {gtext} The current content of the entry field.\n  n {gfactor} 1 when incrementing, -1 when decrementing.\n  n {gincrement} The value of the {gincrement} option.\n\n  The other arguments are keyword arguments made up of the items of the\n  {gdatatype} dictionary, excluding the {gcounter} item.\n\n  The {gcounter} function should return a string representing the revised\n  value. It should raise a {gValueError} if the {itext} is invalid. In this\n  case the bell is rung and the entry text is not changed."
p9731
sg8
(lp9732
sg10
(lp9733
S'2006/03/18'
p9734
asg12
I0
sg13
(lp9735
sg15
(lp9736
ssS'wid.tkinter.radiobutton.opt.takefocus'
p9737
(dp9738
g4
(lp9739
sg6
S'>option.takefocus.generic "Radiobutton"'
p9740
sg8
(lp9741
sg10
(lp9742
sg12
I0
sg13
(lp9743
sg15
(lp9744
ssS'wid.tkinter.radiobutton.opt.underline'
p9745
(dp9746
g4
(lp9747
sg6
S'>option.underline.generic "Radiobutton"'
p9748
sg8
(lp9749
sg10
(lp9750
sg12
I0
sg13
(lp9751
sg15
(lp9752
ssS'wid.pmw.scrolledlistbox.opt.hscrollmode'
p9753
(dp9754
g4
(lp9755
sg6
S">option.pmw.hscrollmode.generic 'ScrolledListBox'"
p9756
sg8
(lp9757
sg10
(lp9758
sg12
I0
sg13
(lp9759
sg15
(lp9760
ssS'wid.tkinter.frame.opt.cursor'
p9761
(dp9762
g4
(lp9763
sg6
S'>option.cursor.generic "Frame"'
p9764
sg8
(lp9765
sg10
(lp9766
sg12
I0
sg13
(lp9767
sg15
(lp9768
ssS'wid.tkinter.scrollbar.opt.repeatinterval'
p9769
(dp9770
g4
(lp9771
sg6
S'>option.repeatinterval.generic "Scrollbar"'
p9772
sg8
(lp9773
sg10
(lp9774
sg12
I0
sg13
(lp9775
sg15
(lp9776
ssS'wid.tkinter.checkbutton.opt.onvalue'
p9777
(dp9778
g4
(lp9779
sg6
S'>option.onvalue.generic "Checkbutton"'
p9780
sg8
(lp9781
sg10
(lp9782
sg12
I0
sg13
(lp9783
sg15
(lp9784
ssS'wid.pmw.timecounter.opt.labelpos'
p9785
(dp9786
g4
(lp9787
sg6
S">option.pmw.labelpos.generic 'TimeCounter'"
p9788
sg8
(lp9789
sg10
(lp9790
sg12
I0
sg13
(lp9791
sg15
(lp9792
ssS'wid.tkinter.scale.opt.to'
p9793
(dp9794
g4
(lp9795
sg6
S'>option.to.generic "Scale"'
p9796
sg8
(lp9797
sg10
(lp9798
sg12
I0
sg13
(lp9799
sg15
(lp9800
ssS'wid.pmw.notebook.opt.tabpos'
p9801
(dp9802
g4
(lp9803
S'&default'
p9804
asg6
S"{HNoteBook - tabpos}\n\nSpecifies the location of the tabs. If '{gn}', tabs are created for each page\nand positioned at the top of the notebook. If {gNone}, no tabs are created, in\nwhich case another selection widget can be used to select pages by calling\nthe selectpage()  method. The &default is '{gn}'."
p9805
sg8
(lp9806
sg10
(lp9807
S'2006/03/21'
p9808
asg12
I0
sg13
(lp9809
sg15
(lp9810
ssS'color.other'
p9811
(dp9812
g1319
(lp9813
sg1321
S'{HAll other colors}\n\n {f#F0FFFF}  azure\n {f#F0FFFF}  azure1\n {f#E0EEEE}  azure2\n {f#C1CDCD}  azure3\n {f#838B8B}  azure4\n {f#F5F5DC}  beige\n {f#FFE4C4}  bisque\n {f#FFE4C4}  bisque1\n {f#EED5B7}  bisque2\n {f#CDB79E}  bisque3\n {f#8B7D6B}  bisque4\n {f#000000}  black\n {f#FFEBCD}  blanched almond\n {f#FFEBCD}  BlanchedAlmond\n {f#DEB887}  burlywood\n {f#FFD39B}  burlywood1\n {f#EEC591}  burlywood2\n {f#CDAA7D}  burlywood3\n {f#8B7355}  burlywood4\n {f#7FFF00}  chartreuse\n {f#7FFF00}  chartreuse1\n {f#76EE00}  chartreuse2\n {f#66CD00}  chartreuse3\n {f#458B00}  chartreuse4\n {f#FF7F50}  coral\n {f#FF7256}  coral1\n {f#EE6A50}  coral2\n {f#CD5B45}  coral3\n {f#8B3E2F}  coral4\n {f#FFF8DC}  cornsilk\n {f#FFF8DC}  cornsilk1\n {f#EEE8CD}  cornsilk2\n {f#CDC8B1}  cornsilk3\n {f#8B8878}  cornsilk4\n {f#B8860B}  dark goldenrod\n {f#9932CC}  dark orchid\n {f#9400D3}  dark violet\n {f#B8860B}  DarkGoldenrod\n {f#FFB90F}  DarkGoldenrod1\n {f#EEAD0E}  DarkGoldenrod2\n {f#CD950C}  DarkGoldenrod3\n {f#8B6508}  DarkGoldenrod4\n {f#9932CC}  DarkOrchid\n {f#BF3EFF}  DarkOrchid1\n {f#B23AEE}  DarkOrchid2\n {f#9A32CD}  DarkOrchid3\n {f#68228B}  DarkOrchid4\n {f#9400D3}  DarkViolet\n {f#DCDCDC}  gainsboro\n {f#FFD700}  gold\n {f#FFD700}  gold1\n {f#EEC900}  gold2\n {f#CDAD00}  gold3\n {f#8B7500}  gold4\n {f#DAA520}  goldenrod\n {f#FFC125}  goldenrod1\n {f#EEB422}  goldenrod2\n {f#CD9B1D}  goldenrod3\n {f#8B6914}  goldenrod4\n {f#F0FFF0}  honeydew\n {f#F0FFF0}  honeydew1\n {f#E0EEE0}  honeydew2\n {f#C1CDC1}  honeydew3\n {f#838B83}  honeydew4\n {f#FFFFF0}  ivory\n {f#FFFFF0}  ivory1\n {f#EEEEE0}  ivory2\n {f#CDCDC1}  ivory3\n {f#8B8B83}  ivory4\n {f#E6E6FA}  lavender\n {f#FFF0F5}  lavender blush\n {f#FFF0F5}  LavenderBlush\n {f#FFF0F5}  LavenderBlush1\n {f#EEE0E5}  LavenderBlush2\n {f#CDC1C5}  LavenderBlush3\n {f#8B8386}  LavenderBlush4\n {f#F08080}  light coral\n {f#EEDD82}  light goldenrod\n {f#F08080}  LightCoral\n {f#EEDD82}  LightGoldenrod\n {f#FFEC8B}  LightGoldenrod1\n {f#EEDC82}  LightGoldenrod2\n {f#CDBE70}  LightGoldenrod3\n {f#8B814C}  LightGoldenrod4\n {f#FAF0E6}  linen\n {f#B03060}  maroon\n {f#FF34B3}  maroon1\n {f#EE30A7}  maroon2\n {f#CD2990}  maroon3\n {f#8B1C62}  maroon4\n {f#BA55D3}  medium orchid\n {f#BA55D3}  MediumOrchid\n {f#E066FF}  MediumOrchid1\n {f#D15FEE}  MediumOrchid2\n {f#B452CD}  MediumOrchid3\n {f#7A378B}  MediumOrchid4\n {f#F5FFFA}  mint cream\n {f#F5FFFA}  MintCream\n {f#FFE4B5}  moccasin\n {f#000080}  navy\n {f#FDF5E6}  old lace\n {f#FDF5E6}  OldLace\n {f#DA70D6}  orchid\n {f#FF83FA}  orchid1\n {f#EE7AE9}  orchid2\n {f#CD69C9}  orchid3\n {f#8B4789}  orchid4\n {f#EEE8AA}  pale goldenrod\n {f#EEE8AA}  PaleGoldenrod\n {f#FFEFD5}  papaya whip\n {f#FFEFD5}  PapayaWhip\n {f#FFDAB9}  peach puff\n {f#FFDAB9}  PeachPuff\n {f#FFDAB9}  PeachPuff1\n {f#EECBAD}  PeachPuff2\n {f#CDAF95}  PeachPuff3\n {f#8B7765}  PeachPuff4\n {f#CD853F}  peru\n {f#DDA0DD}  plum\n {f#FFBBFF}  plum1\n {f#EEAEEE}  plum2\n {f#CD96CD}  plum3\n {f#8B668B}  plum4\n {f#FFF5EE}  seashell\n {f#FFF5EE}  seashell1\n {f#EEE5DE}  seashell2\n {f#CDC5BF}  seashell3\n {f#8B8682}  seashell4\n {f#A0522D}  sienna\n {f#FF8247}  sienna1\n {f#EE7942}  sienna2\n {f#CD6839}  sienna3\n {f#8B4726}  sienna4\n {f#D2B48C}  tan\n {f#FFA54F}  tan1\n {f#EE9A49}  tan2\n {f#CD853F}  tan3\n {f#8B5A2B}  tan4\n {f#D8BFD8}  thistle\n {f#FFE1FF}  thistle1\n {f#EED2EE}  thistle2\n {f#CDB5CD}  thistle3\n {f#8B7B8B}  thistle4\n {f#EE82EE}  violet\n {f#F5DEB3}  wheat\n {f#FFE7BA}  wheat1\n {f#EED8AE}  wheat2\n {f#CDBA96}  wheat3\n {f#8B7E66}  wheat4'
p9814
sg1323
(lp9815
sg1325
(lp9816
sg1327
I0
sg1328
(lp9817
sg1330
(lp9818
ssS'wid.tkinter.listbox.opt.highlightthickness'
p9819
(dp9820
g4
(lp9821
sg6
S'>option.highlightthickness.generic "Listbox"'
p9822
sg8
(lp9823
sg10
(lp9824
sg12
I0
sg13
(lp9825
sg15
(lp9826
ssS'trashbin'
p9827
(dp9828
g4
(lp9829
S'&layout editor'
p9830
aS'&parking lot'
p9831
asg6
S'{HLayout Editor - The Trash Bin}\n\nThe Trash Bin {P$imgpr-trash.ppm} is part of the &Layout Editor.\n\nTo delete a widget, drag it and drop it on the trash bin. Goodbye widget.\n\nThe Trash Bin is {bnot} a "recycle bin"; once dropped on the Trash Bin the widget\nis gone {bforever}. If you want to move a widget off a form but still keep it\nalive, drag it onto the &Parking Lot.'
p9832
sg8
(lp9833
S'trash bin'
p9834
asg10
(lp9835
S'2005/03/17'
p9836
asg12
I0
sg13
(lp9837
sg15
(lp9838
S'The Trash bin is used to delete widgets.'
p9839
assS'wid.tkinter.button.opt.image'
p9840
(dp9841
g4
(lp9842
sg6
S'>option.image.generic "Button"'
p9843
sg8
(lp9844
sg10
(lp9845
sg12
I0
sg13
(lp9846
sg15
(lp9847
ssS'wid.tkinter.entry.opt.relief'
p9848
(dp9849
g4
(lp9850
sg6
S'>option.relief.generic "Entry"'
p9851
sg8
(lp9852
sg10
(lp9853
sg12
I0
sg13
(lp9854
sg15
(lp9855
ssS'wid.pmw.messagebar.opt.labelmargin'
p9856
(dp9857
g4
(lp9858
sg6
S">option.pmw.labelmargin.generic 'MessageBar'"
p9859
sg8
(lp9860
sg10
(lp9861
sg12
I0
sg13
(lp9862
sg15
(lp9863
ssS'module'
p9864
(dp9865
g4
(lp9866
S'&form'
p9867
aS'=layout.menu.modules'
p9868
aS'&project'
p9869
aS'&form'
p9870
aS'&project'
p9871
aS'&module'
p9872
aS'&module'
p9873
aS'&module'
p9874
aS'&project'
p9875
aS'&module'
p9876
aS'&project'
p9877
aS'&module'
p9878
aS'&form'
p9879
aS'&module'
p9880
asg6
S'{hModules - Overview}\n\nA $$ module consists of a main code area and zero or more &forms.\n\nUse the {lModules menu=layout.menu.modules} to muck about with modules.\n\nWhen the &project is built, for each module all the code (from the main code area\nplus code from the &forms) is gathered and written to a file named {gx.py} where\n"{gx}" is the name of the module.\n\nEach $$ &project consists of a primary module and zero or more secondary\nmodules. The name of the primary module is always the same as the name of the\nentire &project. The primary module contains the code to start the &project and\nestablish the main {gTk} loop. Secondary modules are reasonably ordinary Python\nmodules consisting of their main code area (which can be virtually anything you\nwant) plus the code associated with each &form in the module.'
p9881
sg8
(lp9882
g9864
asg10
(lp9883
S'2005/05/25'
p9884
asg12
I0
sg13
(lp9885
sg15
(lp9886
S'What is: A module'
p9887
assS'wid.tkinter.scrollbar.opt.borderwidth'
p9888
(dp9889
g4
(lp9890
S'&dimension'
p9891
asg6
S'{HScrollbar - borderwidth}\n\nA &dimensioned number which sets the width of the 3-d borders around the entire perimeter of the trough, and also\nthe width of the 3-d effects on the arrowheads and slider.'
p9892
sg8
(lp9893
sg10
(lp9894
S'2005/04/27'
p9895
asg12
I0
sg13
(lp9896
sg15
(lp9897
ssS'buffet.widget.canvas'
p9898
(dp9899
g4
(lp9900
sg6
S'>buffet.widget.generic "Canvas"'
p9901
sg8
(lp9902
sg10
(lp9903
sg12
I0
sg13
(lp9904
sg15
(lp9905
ssS'load.missing.widgets.form'
p9906
(dp9907
S'Links'
p9908
(lp9909
S'&maintained'
p9910
asS'Text'
p9911
S'\n{HMissing library module noticed at load time}\n\nAs mentioned in the dialog, the module<0/s> {g@3} <0was/were> available the last time the form was saved but\n<0is/are> not available now. As shown in the following list, there <1is/are> @2 widget instance<1/s> which\n<1was/were> drawn from the missing module<0/s>.\n\n@0\n\nIn the list above\n\n{bWidget} is the type of widget involved.\n\n{bName} is the name by which the widget-instance was known inside the form.\n\nIf you choose {gDelete Widgets} then any widgets in the form which were from the missing module<0/s> will be\ndeleted. All code which is &maintained by $$ will be in good shape after the deletion but any of your code that\nreferenced the deleted widgets will need to be revised.\n\nIf you choose {gCancel} then loading of the form is cancelled.'
p9912
sS'Hotlinks'
p9913
(lp9914
sS'Comments'
p9915
(lp9916
S'2008-09-26'
p9917
aS'@0 The list of references'
p9918
aS'@1 The number of donor modules missing'
p9919
aS'@2 The number of widget instances involved'
p9920
aS'@3 List of missing donor modules'
p9921
asS'Wip'
p9922
I0
sS'Plurals'
p9923
(lp9924
I1
aI2
asS'Abstracts'
p9925
(lp9926
ssS'wid.pmw.labeledwidget.opt.hull'
p9927
(dp9928
g4
(lp9929
sg6
S">option.pmw.hull.generic 'LabeledWidget'"
p9930
sg8
(lp9931
sg10
(lp9932
sg12
I0
sg13
(lp9933
sg15
(lp9934
ssS'wid.tkinter.radiobutton.opt.text'
p9935
(dp9936
g4
(lp9937
sg6
S'>option.text.generic "Radiobutton"'
p9938
sg8
(lp9939
sg10
(lp9940
sg12
I0
sg13
(lp9941
sg15
(lp9942
ssS'wid.tkinter.text.opt.pady'
p9943
(dp9944
g4
(lp9945
sg6
S'>option.pady.generic "Text","widget"'
p9946
sg8
(lp9947
sg10
(lp9948
sg12
I0
sg13
(lp9949
sg15
(lp9950
ssS'wid.tkinter.text.opt.padx'
p9951
(dp9952
g4
(lp9953
sg6
S'>option.padx.generic "Text","widget"'
p9954
sg8
(lp9955
sg10
(lp9956
sg12
I0
sg13
(lp9957
sg15
(lp9958
ssS'wid.pmw.combobox.opt.dropdown'
p9959
(dp9960
g4
(lp9961
sg6
S'{HComboBox - dropdown}\n\nSpecifies whether the ComboBox should be dropdown or simple. The\ndefault is {gTrue}.'
p9962
sg8
(lp9963
sg10
(lp9964
S'2006/03/18'
p9965
asg12
I0
sg13
(lp9966
sg15
(lp9967
ssS'wid.tkinter.radiobutton.opt.disabledforeground'
p9968
(dp9969
g4
(lp9970
sg6
S'>option.disabledforeground.generic "Radiobutton"'
p9971
sg8
(lp9972
sg10
(lp9973
sg12
I0
sg13
(lp9974
sg15
(lp9975
ssS'wid.tkinter.scale.opt.bigincrement'
p9976
(dp9977
g4
(lp9978
sg6
S'>option.bigincrement.generic "Scale"'
p9979
sg8
(lp9980
sg10
(lp9981
sg12
I0
sg13
(lp9982
sg15
(lp9983
ssS'wid.tkinter.scale.opt.takefocus'
p9984
(dp9985
g4
(lp9986
sg6
S'>option.takefocus.generic "Scale"'
p9987
sg8
(lp9988
sg10
(lp9989
sg12
I0
sg13
(lp9990
sg15
(lp9991
ssS'option.pmw.usehullsize.generic'
p9992
(dp9993
g4
(lp9994
S'&default'
p9995
asg6
S'{H@0 - usehullsize}\n\nIf true, the size of the megawidget is determined solely by the width and\nheight options of the {ghull} component.\n\nOtherwise, the size of the megawidget is determined by the width and height\nof the {g@1} component, along with the size and/or existence of the other\ncomponents, such as the label, the scrollbars and the scrollmargin option.\nAll these affect the overall size of the megawidget. The &default is False.'
p9996
sg8
(lp9997
sg10
(lp9998
S'2006/03/22'
p9999
aS'@1 The name of the main component}'
p10000
asg12
I0
sg13
(lp10001
sg15
(lp10002
ssS'option.highlightthickness.generic'
p10003
(dp10004
g4
(lp10005
S'&dimension'
p10006
aS'&focus'
p10007
asg6
S'{H@0 - highlightthickness}\n\nA &dimensioned number giving the thickness of the &focus highlight around the\n@0.'
p10008
sg8
(lp10009
sg10
(lp10010
S'2005/03/02'
p10011
asg12
I0
sg13
(lp10012
sg15
(lp10013
ssS'wid.tkinter.scrollbar.opt.activerelief'
p10014
(dp10015
g4
(lp10016
sg6
S'>option.activerelief.generic "Scrollbar"'
p10017
sg8
(lp10018
sg10
(lp10019
sg12
I0
sg13
(lp10020
sg15
(lp10021
ssS'option-font'
p10022
(dp10023
g4
(lp10024
S'=assist-font'
p10025
asg6
S'{HFonts}\n\nAlthough Tkinter supports several ways of specifying fonts, $$ normally uses the "family-size-modifiers" method via it\'s\n{Lfont-assist=assist-font} dialog.\n\nIf you want to use font objects or X-windows font strings then you can do so by using the "Use this code" option\nin the font-assist dialog. If you are supplying a string then don\'t forget the quotes. When you supply code\nit is used verbatim so if you want quotes it is up to you to supply them.'
p10026
sg8
(lp10027
S'font'
p10028
asg10
(lp10029
S'2005/02/24'
p10030
asg12
I0
sg13
(lp10031
sg15
(lp10032
S'Fonts'
p10033
assS'wid.tkinter.scale.opt.highlightbackground'
p10034
(dp10035
g4
(lp10036
sg6
S'>option.highlightbackground.generic "Scale"'
p10037
sg8
(lp10038
sg10
(lp10039
sg12
I0
sg13
(lp10040
sg15
(lp10041
ssS'wid.tkinter.toplevel.opt.highlightcolor'
p10042
(dp10043
g4
(lp10044
sg6
S'>option.highlightcolor.generic "Toplevel"'
p10045
sg8
(lp10046
sg10
(lp10047
sg12
I0
sg13
(lp10048
sg15
(lp10049
ssS'wid.tkinter.scale.opt.foreground'
p10050
(dp10051
g4
(lp10052
S'&color'
p10053
aS'&new mexico tech'
p10054
asg6
S'{HScale - foreground}\n\nThe &color of the text used for the label and annotations.\n\n$nmt'
p10055
sg8
(lp10056
sg10
(lp10057
S'2005/04/27'
p10058
asg12
I0
sg13
(lp10059
sg15
(lp10060
ssS'option.title.generic'
p10061
(dp10062
g4
(lp10063
S'&new mexico tech'
p10064
asg6
S'{H@0 - title}\n\nNormally, the title of a tear-off menu window will be the same as the text of\nthe menubutton or cascade that lead to this menu. If you want to change the\ntitle of that window, set the {gtitle} option to that string.\n\n$nmt'
p10065
sg8
(lp10066
sg10
(lp10067
S'2005/04/05'
p10068
asg12
I0
sg13
(lp10069
sg15
(lp10070
ssS'wid.pmw.radioselect.opt.hull'
p10071
(dp10072
g4
(lp10073
sg6
S">option.pmw.hull.generic 'RadioSelect'"
p10074
sg8
(lp10075
sg10
(lp10076
sg12
I0
sg13
(lp10077
sg15
(lp10078
ssS'option.name.rebind'
p10079
(dp10080
g4
(lp10081
S'&binding'
p10082
aS'&binding'
p10083
aS'&event'
p10084
aS'&handler'
p10085
aS'&event'
p10086
aS'&handler'
p10087
aS'&binding'
p10088
aS'&event'
p10089
aS'&handler'
p10090
aS'&handler'
p10091
aS'&binding'
p10092
aS'&binding'
p10093
aS'&handler'
p10094
aS'&handler'
p10095
aS'&handler'
p10096
aS'&handler'
p10097
aS'&binding'
p10098
aS'&handler'
p10099
aS'&event'
p10100
aS'&handler'
p10101
asg6
S'{BChanging event handler names when a widget is renamed}\n\nWidgets can have &bindings. &Bindings refer to &event &handlers which are\nmethods in your code. If you have been following our suggestion then your\n&event &handlers will have names of the form {gon_widget_whatever}. For\nexample, if you have a widget named {gButton1} and that widget has a &binding\nto the {f<Motion>} &event then the event &handler would be named\n\nt {gon_Button1_Motion}\n\nIf you change the name of the widget to {gSpam} then there is the question of\nwhat happens to the &handlers. At widget-rename time I check all the widgets\n&bindings and for those &bindings where the &handler name is of the form\n{gon_widget_whatever} I offer to rename the &handler to mention the new\nwidget name. In the case of our example, I would offer to change the name of\nthe &handler and, if you accept the offer, then the name of the &handler\nwould be changed to\n\nt {gon_Spam_Motion}\n\nand any &bindings that refer to that &handler would be adjusted accordingly.\n\n&Event &handler names which do {bnot} follow the recommended format are all\nleft as-is. One more reason to follow the recommended format.'
p10102
sg8
(lp10103
sg10
(lp10104
S'2005/05/15'
p10105
asg12
I0
sg13
(lp10106
sg15
(lp10107
S'Changing event handler names when a widget is renamed'
p10108
assS'buffet.widget.checkbutton'
p10109
(dp10110
g4
(lp10111
sg6
S'>buffet.widget.generic "Checkbutton"'
p10112
sg8
(lp10113
sg10
(lp10114
sg12
I0
sg13
(lp10115
sg15
(lp10116
ssS'wid.pmw.counter.opt.pady'
p10117
(dp10118
g4
(lp10119
S'&default'
p10120
asg6
S'{HCounter - pady}\n\nA &dimensioned number which specifies a padding distance to leave around the arrow buttons in the y direction. The &default is 0.'
p10121
sg8
(lp10122
sg10
(lp10123
S'2006/03/20'
p10124
asg12
I0
sg13
(lp10125
sg15
(lp10126
ssS'wid.tkinter.entry.opt.textvariable'
p10127
(dp10128
g4
(lp10129
sg6
S'>option.textvariable.generic "Entry"'
p10130
sg8
(lp10131
sg10
(lp10132
sg12
I0
sg13
(lp10133
sg15
(lp10134
ssS'option.width.generic'
p10135
(dp10136
g4
(lp10137
S'&font'
p10138
asg6
S"{H@0 - width}\n\nThe width of the @0 in {bcharacters}, based on the average size of characters in the current &font.\n\nIf zero, the @0's width is set to fit it's contents."
p10139
sg8
(lp10140
sg10
(lp10141
S'2005/04/06'
p10142
aS'Note that Button, Canvas, Checkbutton, Scale and Scrollbar have their own'
p10143
aS'width rules and should have their own specific help topic.'
p10144
asg12
I0
sg13
(lp10145
sg15
(lp10146
ssS'option.insertontime.generic'
p10147
(dp10148
g4
(lp10149
S'&new mexico tech'
p10150
asg6
S'{H@0 - insertontime}\n\nThe number of milliseconds the insertion cursor is on during its blink cycle.\n\nDefault is 600.\n\n$nmt'
p10151
sg8
(lp10152
sg10
(lp10153
S'2005/03/03'
p10154
asg12
I0
sg13
(lp10155
sg15
(lp10156
ssS'wid.tkinter.checkbutton.opt.justify'
p10157
(dp10158
g4
(lp10159
sg6
S'>option.justify.generic "Checkbutton"'
p10160
sg8
(lp10161
sg10
(lp10162
sg12
I0
sg13
(lp10163
sg15
(lp10164
ssS'wid.tkinter.menu.opt.tearoffcommand'
p10165
(dp10166
g4
(lp10167
sg6
S'>option.tearoffcommand.generic "Menu"'
p10168
sg8
(lp10169
sg10
(lp10170
sg12
I0
sg13
(lp10171
sg15
(lp10172
ssS'code-edit.action.top'
p10173
(dp10174
g4
(lp10175
S'&editor actions'
p10176
asg6
S'{HCode editor - First Line}\n\n Key:   $tActionTop\n Menu: {fEdit/First Line}\n\nMoves the cursor to the first line of code.\n\nCode &editor actions'
p10177
sg8
(lp10178
sg10
(lp10179
S'2006/01/26'
p10180
asg12
I0
sg13
(lp10181
sg15
(lp10182
S'Code editor - goto first line'
p10183
assS'option.verbatim'
p10184
(dp10185
g4
(lp10186
sg6
S"{HWhat is: A 'verbatim' option}\n\nSome widget options, for example the {gvalidate} option of the {fEntryField}\nwidget, are sufficiently abstruse that $$ attempts no checking and simply\nuses what ever you supply. If what you supply is correct things will go fine.\nIf what you supply is incorrect then a syntax error is likely when you run\nyour project."
p10187
sg8
(lp10188
sg10
(lp10189
S'2006/03/24'
p10190
asg12
I0
sg13
(lp10191
sg15
(lp10192
S"What is: A 'verbatim' option"
p10193
assS'wid.pmw.counter.opt.pyclass'
p10194
(dp10195
g4
(lp10196
sg6
S'>option.pyclass.generic "Counter"'
p10197
sg8
(lp10198
sg10
(lp10199
sg12
I0
sg13
(lp10200
sg15
(lp10201
ssS'form-properties-dialog-other'
p10202
(dp10203
g4
(lp10204
sg6
S'{HWhy forms derive only from Toplevel, Frame or ScrolledFrame}\n\nSo, you want your form to derive from {gCanvas}, {gText} or something like that. I\nthink we have a communication problem.\n\nThe whole point of $$ is to make it easy for you to create rectangular things into\nwhich you place a bunch of widgets and then add code to make them go. We call the\nrectangular things "forms" and they derive from {fToplevel}, {fFrame} or\n{fScrolledFrame} because those are rectangular things into which you place\nwidgets.\n\nThere is nothing wrong with deriving a class from {fCanvas}, {fText} or what have\nyou, but the result is not what $$ considers to be a form. Most likely you are\ntaking an existing class and adding functionality to it. There is nothing\npreventing you from doing this in a $$ project - go to the main code area (or the\nbottom of the code for any form) and write the code for your derived class. But\nwhat you are creating is a derived class and this is {bnot} a form.\n\nOn the other hand if what you want is to create, for example, is a {fCanvas} with\na bunch of buttons and stuff added to it then create a form (derived from\n{fToplevel}, {fFrame} or {fScrolledFrame} as appropriate) and put your {fCanvas},\nthe buttons, the code and whatever else you need into that form.'
p10205
sg8
(lp10206
sg10
(lp10207
S'2005/04/17'
p10208
asg12
I0
sg13
(lp10209
sg15
(lp10210
S'Why forms derive only from Toplevel, Frame or ScrolledFrame'
p10211
assS'wid.tkinter.scrollbar.opt.orient'
p10212
(dp10213
g4
(lp10214
sg6
S'>option.orient.generic "Scrollbar"'
p10215
sg8
(lp10216
sg10
(lp10217
sg12
I0
sg13
(lp10218
sg15
(lp10219
ssS'command.delete.handlertoo'
p10220
(dp10221
g4
(lp10222
S'&command option'
p10223
aS'&command option'
p10224
aS'&command option'
p10225
aS'&binding'
p10226
aS'&event'
p10227
aS'&handler'
p10228
aS'&event'
p10229
aS'&handler'
p10230
aS'&event'
p10231
aS'&handler'
p10232
aS'&command option'
p10233
aS'&binding'
p10234
aS'&event'
p10235
aS'&handler'
p10236
aS'&command option'
p10237
aS'&event'
p10238
aS'&handler'
p10239
aS'&event'
p10240
aS'&handler'
p10241
aS'&handler'
p10242
aS'&command option'
p10243
aS'&event'
p10244
aS'&handler'
p10245
aS'&command option'
p10246
aS'&event'
p10247
aS'&handler'
p10248
asg6
S'{HDeletion of event handler at bind-delete time}\n\nYou just asked to clear a &command option. I notice that once that &command\noption is cleared, no other &command option nor &binding will refer to the\n&event &handler "@0" so you have the opportunity to delete the &event\n&handler as well as clearing the command-option.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that)\n  or if you plan to create new &command options or &binding which will refer\n  to that &event &handler then clearly you want to choose {GKeep Handler}.\n  This will clear the &command option but will not delete the &event\n  &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed\n  use for it then you might as well choose {GDelete Handler} and delete the\n  &handler rather than leaving unused code hanging around your form. This\n  will clear the &command option and delete the &event &handler.\n\no If you\'ve changed your mind and now don\'t want to clear the &command option\n  nor delete the &event &handler then click {gCancel}.'
p10249
sg8
(lp10250
sg10
(lp10251
S'2006/02/04'
p10252
aS'@0 The name of the handler'
p10253
asg12
I0
sg13
(lp10254
sg15
(lp10255
ssS'wid.pmw.buttonbox.opt.frame'
p10256
(dp10257
g4
(lp10258
sg6
S'>option.pmw.frame.generic "ButtonBox","Buttons","add() and insert() methods"'
p10259
sg8
(lp10260
sg10
(lp10261
sg12
I0
sg13
(lp10262
sg15
(lp10263
ssS'option.sliderrelief.generic'
p10264
(dp10265
g4
(lp10266
sg6
S'{H@0 - sliderrelief}\n\nThe type of border to draw around the slider. Can be one of:\n\n o {GRaised}\n o {GSunken}\n o {GGroove}\n o {GRidge}\n o {GFlat}'
p10267
sg8
(lp10268
sg10
(lp10269
S'2005/04/04'
p10270
asg12
I0
sg13
(lp10271
sg15
(lp10272
ssS'buffet.widget.counter'
p10273
(dp10274
g4
(lp10275
sg6
S'>buffet.widget.generic2 "Pmw.Counter", \'\', \'wid.pmw.counter.overview\''
p10276
sg8
(lp10277
sg10
(lp10278
sg12
I0
sg13
(lp10279
sg15
(lp10280
ssS'__substitutions__'
p10281
(dp10282
g4
(lp10283
S'&new mexico tech'
p10284
aS'&new mexico tech'
p10285
asg6
S'$$\nRapyd-Tk\n.end \n$nmt\n\n- - -\n Tkinter documentation provided courtesy of &New Mexico Tech.\n.end\n$hb\nmiddle mouse button\n.end\n$help\nYou can get help about almost everything on the Rapyd-TK screen\nby clicking the middle mouse button\nover it.\n.end\n$hk\nF1 function key\n.end\n$mailto\nrapyd@bitflipper.ca\n.end\n$website\nhttp://www.bitflipper.ca/rapyd\n.end\n$rpj\n"{g.rpj}"\n.end\n$configfile\n{grapyd.config}\n.end'
p10286
sg8
(lp10287
sg10
(lp10288
sg12
I0
sg13
(lp10289
sg15
(lp10290
ssS'wid.tkinter.menu.opt.postcommand'
p10291
(dp10292
g4
(lp10293
sg6
S'>option.postcommand.generic "Menu"'
p10294
sg8
(lp10295
sg10
(lp10296
sg12
I0
sg13
(lp10297
sg15
(lp10298
ssS'widgets-importing-of'
p10299
(dp10300
g4
(lp10301
S'&project'
p10302
aS'&form'
p10303
aS'&project'
p10304
aS'&config file'
p10305
asg6
S'{HWidgets are imported using "from" or "import"}\n\nWhen your &project is run the widgets on a &form have to come from somewhere\nsuch as Tkinter, Pmw or whatever. When a &project is built $$ notes the\nmodules from which widgets are required and it adds generated lines to the\nfront of the main code area to do the necessary importing.\n\nThis code takes one of two possible forms:\n\nt {gfrom yada import *}\n\n  t or\n\nt {gimport yada}\n\nThe form to be used is specified in the {f[Modules]} section of the &config\nfile.'
p10306
sg8
(lp10307
sg10
(lp10308
S'2006/01/29'
p10309
asg12
I0
sg13
(lp10310
sg15
(lp10311
S'Widgets are imported using " from " or " import "'
p10312
assS'wid.tkinter.button.opt.borderwidth'
p10313
(dp10314
g4
(lp10315
sg6
S'>option.borderwidth.generic "Button"'
p10316
sg8
(lp10317
sg10
(lp10318
sg12
I0
sg13
(lp10319
sg15
(lp10320
ssS'wid.pmw.radioselect.opt.padx'
p10321
(dp10322
g4
(lp10323
S'&default'
p10324
asg6
S'{HRadioSelect - padx}\n\nSpecifies a padding distance to leave between each button in the x direction and also between the buttons and the\nouter edge of the radio select. The default is 5.'
p10325
sg8
(lp10326
sg10
(lp10327
S'2006/03/21'
p10328
asg12
I0
sg13
(lp10329
sg15
(lp10330
ssS'option.pmw.labelmargin.generic'
p10331
(dp10332
g4
(lp10333
S'&dimension'
p10334
asg6
S'{H@0 - labelmargin}\n\nIf the {glabelpos} option is not None, this &dimensioned number specifies the distance between the {glabel} comnponent and the rest of\nthe megawidget.'
p10335
sg8
(lp10336
sg10
(lp10337
S'2006/03/18'
p10338
asg12
I0
sg13
(lp10339
sg15
(lp10340
ssS'wid.tkinter.listbox.opt.selectforeground'
p10341
(dp10342
g4
(lp10343
sg6
S'>option.selectforeground.generic "Listbox", "text"'
p10344
sg8
(lp10345
sg10
(lp10346
sg12
I0
sg13
(lp10347
sg15
(lp10348
ssS'layout.menu.forms'
p10349
(dp10350
g4
(lp10351
S'&layout area'
p10352
aS'&form'
p10353
aS'&module'
p10354
aS'&project'
p10355
aS'&code editor'
p10356
aS'&layout editor'
p10357
aS'&form'
p10358
aS'=layoutarea.formtab'
p10359
aS'=formseedialog'
p10360
aS'&layout area'
p10361
aS'=forms.derivation.explained'
p10362
aS'=form.main.info'
p10363
aS'&form'
p10364
aS'=forms.derivation.explained'
p10365
aS'=forms.derivation.explained'
p10366
aS'&layout area'
p10367
aS'&option editor'
p10368
asg6
S'{HLayout area - Forms menu}\n\nThe &layout area {GForms} menu is where you mess with &forms. Forms live inside &modules which live inside a\n&project.\n\no {gSwap code/layout}\n   Toggle between the &code editor and and the &layout editor of the current &form. You can achieve the same result\n  using the {g$tActionFormSwapCodeLayout} key or by clicking on the {ltab=layoutarea.formtab} of the already\n  selected form.\n\no {gForm alternate}\n   Alternates between the current form and the form within this module on which you worked last. You can achieve the\n  same result using the {g$tActionFormAlternate} key. Very handy when you are working on two forms within a given\n  module.\n\no {gSelect forms to see}\n   Allows you to {lchoose which forms=formseedialog} have tabs at the top of the &layout area. Handy if you have a\n  lot of forms in a module.\n\no {gAdd new form to the current module}\n   Use this to create a new, blank form for your project. You will be asked for a name for the new form and for the\n  class from which it is to {Lderive=forms.derivation.explained}.\n\no {gImport a Form}\n   Creates a new form in this project by importing a saved form. The form to be imported must previously have been\n  saved from this or some other $$ project. You will be given the opportunity to choose the name to be given to the\n  imported form in this project.\n\no {gExport the Current Form}\n   Saves a copy of the current form so it can later be imported into another project. Exported forms are saved with\n  the file extension {grpf}: {br}apyd {bp}roject {bf}orm.\n\n  {bNote}: The main form of the main module is {lspecial=form.main.info} and to code necessary to export it has yet\n  to be written thus you can not export it. Sorry.\n\no {gSet "Derive From" class}\n   $$ &forms are classes which have to {Lderive=forms.derivation.explained} from Tkinter {gToplevel}, {gFrame}, Pmw\n  {gScrolledFrame} or equivalent. Use this menu choice to change the class from which an existing form\n  {Lderives=forms.derivation.explained}.\n\no {gDelete the current form}\n   Just like the name says. Keep in mind that deleting a form deletes the visual layout of the form, all it\'s code\n  and all the widget settings. You can\'t un-delete forms, so think before you delete, OK?\n\no {gHow to rename a *form*}\n   The form name is carried by the outermost frame of the form. To rename a form select the outermost frame in the\n  &layout area and then in the &option editor change the {gname} option to be your desired new name; the form will\n  be renamed accordingly.'
p10369
sg8
(lp10370
sg10
(lp10371
S'<2005/05/27'
p10372
asg12
I0
sg13
(lp10373
sg15
(lp10374
S'The Layout area Forms menu'
p10375
aS'How to: Swap between the code editor and the layout editor.'
p10376
aS'How to: Alternate between two forms withing the current module.'
p10377
aS'How to: Alternate between two forms withing the project.'
p10378
aS'How to: Select which forms will have tabs at the top of the layout area.'
p10379
aS'How to: Add a new form to the current module.'
p10380
aS'How to: Set the "derive from" class of a form.'
p10381
aS'How to: Delete the current form'
p10382
aS'How to: Export the current form'
p10383
aS'How to: Import a previously exported form'
p10384
assS'wid.pmw.timecounter.opt.repeatrate'
p10385
(dp10386
g4
(lp10387
S'&default'
p10388
asg6
S'{HTimeCounter - repeatrate}\n\nSpecifies the delay (in milliseconds) between automatic counts while an arrow\nbutton is held pressed down. The &default is 50.'
p10389
sg8
(lp10390
sg10
(lp10391
S'2006/03/24'
p10392
asg12
I0
sg13
(lp10393
sg15
(lp10394
ssS'wid.tkinter.label.opt.borderwidth'
p10395
(dp10396
g4
(lp10397
sg6
S'>option.borderwidth.generic "Label"'
p10398
sg8
(lp10399
sg10
(lp10400
sg12
I0
sg13
(lp10401
sg15
(lp10402
ssS'option.height.generic'
p10403
(dp10404
g4
(lp10405
sg6
S"{H@0 - height}\n\nThe height of the @0 in {blines} (not pixels), based on the the current font.\n\nIf zero, the @0's height is set to fit it's contents."
p10406
sg8
(lp10407
sg10
(lp10408
S'2005/03/02'
p10409
asg12
I0
sg13
(lp10410
sg15
(lp10411
ssS'__intro'
p10412
(dp10413
g4
(lp10414
S'=tutorial'
p10415
asg6
S'{HHello new user}\n\nWelcome to {b$$}, a tool for quickly constructing and maintaining top-level forms and widgets using Python and\nTkinter. This help system makes the assumption that you are familiar with both Python and Tkinter.\n\nFeatures:\n\n o Graphical layout of form structure.\n o Option editor to quickly set widget attributes.\n o Bind editor to easily mainting widget bindings.\n o Pack editor to maintain pack settings.\n o Integrated code editor.\n o Following a run-time error can snap directly to the offending line.\n o Extensive help.\n\nIn addition to the obvious "Help" buttons and menu choices, you can get help about almost everything you see within $$\nby putting the cursor over it and clicking the $hb.\n\n{hTutorial}\n\nYes Virginia there is a tutorial. {LClick here=tutorial} for a simple tutorial which will take you through the\nprocess of creating a Hello World application with $$.'
p10416
sg8
(lp10417
sg10
(lp10418
sg12
I0
sg13
(lp10419
sg15
(lp10420
S'-- New users start here--'
p10421
assS'wid.tkinter.toplevel.opt.takefocus'
p10422
(dp10423
g4
(lp10424
sg6
S'>option.takefocus.generic "Toplevel"'
p10425
sg8
(lp10426
sg10
(lp10427
sg12
I0
sg13
(lp10428
sg15
(lp10429
ssS'wid.pmw.panedwidget.opt.command'
p10430
(dp10431
g4
(lp10432
S'&command option'
p10433
aS'&event'
p10434
aS'&handler'
p10435
asg6
S'{HPanedWidget - command}\n\nThis &command option specifies the &event &handler to be called whenever the\nsize of any of the panes changes. The function is called with a single\nargument, being a list of the sizes of the panes, in order. For vertical\norientation, the size is the height of the panes. For horizontal orientation,\nthe size is the width of the panes.'
p10436
sg8
(lp10437
sg10
(lp10438
S'2006/03/21'
p10439
asg12
I0
sg13
(lp10440
sg15
(lp10441
ssS'bindassist.eventempty'
p10442
(dp10443
g4
(lp10444
S'&binding'
p10445
aS'&event'
p10446
aS'&handler'
p10447
aS'&binding'
p10448
aS'&binding'
p10449
aS'&event'
p10450
aS'=bind.eventwizard.overview'
p10451
asg6
S'{HBind Assist - Event string empty on close}\n\nYou just clicked on {gOK} but the event string is empty.\n\nTo have a valid &binding, a non-blank &event string and the name of the &handler for\nthe event are required.\n\n o To exit the Bind Assist without changing any bind entries, use the {gCancel} button.\n\n o If you were about to create a new bind entry but changed your mind, use the\n   {gCancel} button\n\n o If you want to delete the current &binding, use the {gDelete} button.\n\n o To make this a valid &binding, supply an &event string, preferably using the\n   "{LEvent Wizard=bind.eventwizard.overview}" button.'
p10452
sg8
(lp10453
sg10
(lp10454
S'2005/03/15'
p10455
asg12
I0
sg13
(lp10456
sg15
(lp10457
ssS'wid.tkinter.text.opt.highlightthickness'
p10458
(dp10459
g4
(lp10460
sg6
S'>option.highlightthickness.generic "Text"'
p10461
sg8
(lp10462
sg10
(lp10463
sg12
I0
sg13
(lp10464
sg15
(lp10465
ssS'wid.pmw.scrolledframe.opt.hscrollmode'
p10466
(dp10467
g4
(lp10468
sg6
S">option.pmw.hscrollmode.generic 'ScrolledFrame'"
p10469
sg8
(lp10470
sg10
(lp10471
sg12
I0
sg13
(lp10472
sg15
(lp10473
ssS'form.delete.confirmation'
p10474
(dp10475
g4
(lp10476
sg6
S"{HDelete current form - Confirmation Dialog}\n\nYou just asked to delete form {b@0} of module {b@1}. Deleting a form\ndeletes it's graphic layout and all the code that goes with it. Once you\nhave deleted a form there is no way to un-delete it so think twice about\nthis, OK?\n\nClick {GDelete} to go ahead and do the deletion or click {GCancel} to keep\nthe form."
p10477
sg8
(lp10478
sg10
(lp10479
S'2006/02/10'
p10480
aS'@0 Name of the current form'
p10481
aS'@1 Name of the current module'
p10482
asg12
I0
sg13
(lp10483
sg15
(lp10484
ssS'wid.tkinter.button.opt.textvariable'
p10485
(dp10486
g4
(lp10487
sg6
S'>option.textvariable.generic "Button"'
p10488
sg8
(lp10489
sg10
(lp10490
sg12
I0
sg13
(lp10491
sg15
(lp10492
ssS'pack-editor'
p10493
(dp10494
g4
(lp10495
S'&select the widget'
p10496
aS'&layout editor'
p10497
aS'&layout editor'
p10498
aS'&form'
p10499
asg6
S"{HThe Pack Editor}\n\nThe pack editor is where you view and change a widget's pack settings. The pack editor presents all the pack\nsettings for the current widget. Generally you &select the widget by clicking on it in the &layout editor, although\nthere is also a widget selector at the top of the pack editor. Clicking the $hb over virtually anything in the pack\neditor will get you help about that item. Pressing the $hk will get you help about the currently selected pack\noption.\n\nWhen a widget is first dropped on the &layout editor it has default setting for all it's pack options and you can\nsee what these default values are by looking at the pack editor. Of course the whole point of the option editor is\nto let you set the pack values as you please.\n\nFrom top to bottom the option editor consists of:\n\n o An option selector dropdown list\n o Two resize knobs\n o The pack options\n\n{bThe Selector}  {p$imgpr-help-Selector.ppm}\n\nIs simply a dropdown list that will show you the names of all the widgets of the current &form. Clicking on a widget\nnames selects it as the current widget.\n\n{bThe Resize Knobs}  {p$imgpr-help-Resize.ppm}\n\nJust above the pack edit area are two small resize knobs, both of which can be dragged left or right. Dragging the\nfirst resize knob adjusts the width of the area which shows the option names. Dragging the second resize knob\nadjusts the width of the edit area in which you set the value of the options. {bNote}: To make the edit area wider\nyou can drag the resize knob to the right of the option editor. Although the resize knob loses visibility when the\nmouse leaves the option editor the position of the mouse is still being followed and the edit area will resize\nappropriately.\n\n{bThe Pack Options} {P$imgpr-help-PackEditor.ppm}\n\nLeft to right in the pack option area you see:\n\n o {bThe name of the option.}\n\n o {bThe option view area.} An area that shows the present value of this pack option.\n\n o A starburst 'assist' button.{P$imgpr-help-Assist.ppm} Pressing this button brings up an assist dialog which assists in setting this pack\n   option. For those options where you get to choose from a list, the assist pops up a radio-button dialog. For all\n   other options the assist pops up an option specific dialog."
p10500
sg8
(lp10501
S'pack editor'
p10502
asg10
(lp10503
S'2005/05/18'
p10504
asg12
I0
sg13
(lp10505
sg15
(lp10506
S'The pack editor / selector / resize knobs / pack options'
p10507
assS'wid.tkinter.entry.opt.insertofftime'
p10508
(dp10509
g4
(lp10510
sg6
S'>option.insertofftime.generic "Entry"'
p10511
sg8
(lp10512
sg10
(lp10513
sg12
I0
sg13
(lp10514
sg15
(lp10515
ssS'wid.tkinter.frame.opt.highlightbackground'
p10516
(dp10517
g4
(lp10518
sg6
S'>option.highlightbackground.generic "Frame"'
p10519
sg8
(lp10520
sg10
(lp10521
sg12
I0
sg13
(lp10522
sg15
(lp10523
ssS'form.invalidbaseclassname'
p10524
(dp10525
g4
(lp10526
S'&name rules'
p10527
asg6
S'{HInvalid "derive-from" class name} #<2006/03/12\n\nThe name of the class you specified does not conform to the Python name\nrules. Please correct the name or select one of the\n\n o {gTkinter.Toplevel}\n o {gTkinter.Frame}\n o {gPmw.ScrolledFrame}\n\nchoices.'
p10528
sg8
(lp10529
sg10
(lp10530
sg12
I0
sg13
(lp10531
sg15
(lp10532
ssS'buffet.widget.scrolledfield'
p10533
(dp10534
g4
(lp10535
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledField", \'\', \'wid.pmw.scrolledfield.overview\''
p10536
sg8
(lp10537
sg10
(lp10538
sg12
I0
sg13
(lp10539
sg15
(lp10540
ssS'command.change.choice'
p10541
(dp10542
g4
(lp10543
S'&command option'
p10544
aS'&command option'
p10545
aS'&event'
p10546
aS'&handler'
p10547
aS'&command option'
p10548
aS'&event'
p10549
aS'&handler'
p10550
aS'&command option'
p10551
aS'&binding'
p10552
aS'&handler'
p10553
aS'&handler'
p10554
aS'&binding'
p10555
aS'&command option'
p10556
aS'&handler'
p10557
aS'&handler'
p10558
aS'&binding'
p10559
aS'&command option'
p10560
aS'&command option'
p10561
aS'&handler'
p10562
aS'&handler'
p10563
aS'&handler'
p10564
aS'&binding'
p10565
aS'&command option'
p10566
aS'&handler'
p10567
aS'&command option'
p10568
aS'&handler'
p10569
aS'&binding'
p10570
aS'&command option'
p10571
aS'&event'
p10572
aS'&handler'
p10573
aS'&command option'
p10574
aS'&handler'
p10575
aS'&handler'
p10576
aS'&binding'
p10577
aS'&command option'
p10578
aS'=howto.find.handler.references'
p10579
asg6
S'{HEvent handler name change}\n\nYou just finished revising a &command option. Before you started the\nrevision, the &command option referred to an &event &handler named "@0".\nYou changed the &command option so it now referrs to an &event &handler\nnamed "@1", which doesn\'t yet exist.\n\nIf this &command option were the only &binding that referred to the\n&handler "@0" then we would simply have changed the name of the &handler\nto "@1" and carried on without bothering you. However, @2 other\n&binding</s> or &command option</s> (which could be in this or other\nwidgets) also refer<s/> to &handler "@0" and you need to make a choice\nas to what happens next.\n\no If your intent is to change the name of the &handler so that {ball} the\n  &bindings and &command options (including the current &command option)\n  which used to refer to &handler "@0" now will refer to &handler "@1"\n  then click on the {gChange Name} button. This will change the name of\n  the &handler and update any &bindings and &command options as needed.\n\no If your intent is to create a new &handler named "@1" just for the\n  current &command option, and you want to leave &handler "@0" (and all\n  the &bindings and &command options that refer to it) alone then click on\n  the {gNew Handler} button. This will create a new &event &handler named\n  "@1" and the current &command option will be the only reference to that\n  &handler. The &handler "@0" will continue to exist and any other\n  &bindings and &command options that refer to it will stay as-is.\n\nIf you are wondering where the other reference</s> <is/are> you can {Lfind\nout=howto.find.handler.references}.\n\nIf neither of the above descriptions match what you want to do, then click\nthe {GCancel} button to exit without making any changes.'
p10580
sg8
(lp10581
sg10
(lp10582
S'2006/02/15'
p10583
aS'@0 The original name of the event handler'
p10584
aS'@1 The new name of the event handler'
p10585
aS'@2 The number of other references to the old handler name'
p10586
asg12
I0
sg13
(lp10587
I2
asg15
(lp10588
ssS'wid.pmw.scrolledframe.opt.frame'
p10589
(dp10590
g4
(lp10591
sg6
S'{HScrolledFrame - frame}\n\nThe frame within the clipper to contain the widgets to be scrolled.'
p10592
sg8
(lp10593
sg10
(lp10594
S'2006/03/22'
p10595
asg12
I0
sg13
(lp10596
sg15
(lp10597
ssS'pack.within'
p10598
(dp10599
g4
(lp10600
S'&frame'
p10601
aS'&frame'
p10602
aS'&frame'
p10603
asg6
S'{HWhat is meant by a widget "within a frame"}\n\n&Frames can be nested inside other &frames to any degree. When we talk about\nwidgets being "in a frame" we are referring to the innermost &frame in which\nthe widgets are located. Put another way, a bunch of widgets are said to be\n"in the same frame" if there are no frame-lines between any of the widgets\nconcerned.'
p10604
sg8
(lp10605
S'within'
p10606
asg10
(lp10607
S'2005/05/19'
p10608
asg12
I0
sg13
(lp10609
sg15
(lp10610
S'Widgets are considered to be within the innermost frame'
p10611
assS'wid.pmw.scrolledframe.opt.vertfraction'
p10612
(dp10613
g4
(lp10614
S'&default'
p10615
asg6
S'{HScrolledFrame - vertfraction}\n\nThe fraction of the height of the clipper frame to scroll the interior frame\nwhen the user clicks on the vertical scrollbar arrows. The &default is 0.05.'
p10616
sg8
(lp10617
sg10
(lp10618
S'2006/03/23'
p10619
asg12
I0
sg13
(lp10620
sg15
(lp10621
ssS'wid.tkinter.canvas.opt.selectborderwidth'
p10622
(dp10623
g4
(lp10624
sg6
S'>option.selectborderwidth.generic "Canvas", "items"'
p10625
sg8
(lp10626
sg10
(lp10627
sg12
I0
sg13
(lp10628
sg15
(lp10629
ssS'wid.tkinter.canvas.opt.cursor'
p10630
(dp10631
g4
(lp10632
sg6
S'>option.cursor.generic "Canvas"'
p10633
sg8
(lp10634
sg10
(lp10635
sg12
I0
sg13
(lp10636
sg15
(lp10637
ssS'wid.pmw.radioselect.opt.orient'
p10638
(dp10639
g4
(lp10640
S'&default'
p10641
asg6
S"{HRadioSelect - orient}\n\nSpecifies the direction in which the buttons are laid out. This may be\n'horizontal' or 'vertical'. The &default is 'horizontal'."
p10642
sg8
(lp10643
sg10
(lp10644
S'2006/03/21'
p10645
asg12
I0
sg13
(lp10646
sg15
(lp10647
ssS'wid.tkinter.toplevel.opt.cursor'
p10648
(dp10649
g4
(lp10650
sg6
S'>option.cursor.generic "Toplevel"'
p10651
sg8
(lp10652
sg10
(lp10653
sg12
I0
sg13
(lp10654
sg15
(lp10655
ssS'wid.tkinter.button.opt.anchor'
p10656
(dp10657
g4
(lp10658
sg6
S'>option.anchor.generic "Button"'
p10659
sg8
(lp10660
sg10
(lp10661
sg12
I0
sg13
(lp10662
sg15
(lp10663
ssS'wid.tkinter.scrollbar.opt.width'
p10664
(dp10665
g4
(lp10666
S'&new mexico tech'
p10667
asg6
S'{HScrollbar - width}\n\nThe width of the trough part of the widget.\n\nThis is the x dimension for vertical scrollbars and the y dimension for\nhorizontal scrollbars.\n\n$nmt'
p10668
sg8
(lp10669
sg10
(lp10670
S'2005/04/27'
p10671
asg12
I0
sg13
(lp10672
sg15
(lp10673
ssS'buffet.widget.menu'
p10674
(dp10675
g4
(lp10676
sg6
S'>buffet.widget.generic "Menu"'
p10677
sg8
(lp10678
sg10
(lp10679
sg12
I0
sg13
(lp10680
sg15
(lp10681
ssS'code-editor'
p10682
(dp10683
g4
(lp10684
S'&layout area'
p10685
aS'&project'
p10686
aS'&layout editor'
p10687
aS'&form'
p10688
aS'&layout editor'
p10689
aS'=howto.swap.code.layout'
p10690
aS'=code-editor.colorization'
p10691
aS'=code-editor.actions'
p10692
asg6
S"{hCode Editor}\n\nThe Code Editor is part of the &Layout Area. It's job is to make it easy for you to edit the code that makes up your\n&project.\n\nThe code editor time-shares space on the screen with the &layout editor which is the visual representation of your\n&form. You can snap back and forth between the code and the &layout editor in {Lthree different\nways=howto.swap.code.layout}.\n\n{lColorization=code-editor.colorization}\n\nText is automatically colorized as you type it. This makes it easier to follow your code and easier to spot\nsyntactic and spelling errors.\n\n{lEdit Actions=code-editor.actions}\n\nMost of the standard, and a few non-standard, edit actions are supported.\n\n{BLook-don't-touch $$ generated code}\n\nSome code (for example the code that generates the class of your form, and the initial part of event handler\nmethods) is generated automatically by $$. This is look-don't-touch code; you can look at it, you can move the\ncursor through it but attempts to modify it are ignored. This system generated code is rendered on a different\ncolored background so you can easily spot it. The exact color of the background is set by the config file."
p10693
sg8
(lp10694
S'code editor'
p10695
asg10
(lp10696
S'2005/04/06'
p10697
asg12
I0
sg13
(lp10698
sg15
(lp10699
S'The Code Editor'
p10700
aS'$$ generated code is rendered with a different background color'
p10701
assS'wid.pmw.scrolledlistbox.opt.dblclickcommand'
p10702
(dp10703
g4
(lp10704
S'&command option'
p10705
aS'&event'
p10706
aS'&handler'
p10707
asg6
S'{HScrolledListBox - dblclickcommand}\n\nThis &command option specifies the &event &handler to call when mouse button\n1 is double clicked over an entry in the listbox component.'
p10708
sg8
(lp10709
sg10
(lp10710
S'2006/03/23'
p10711
asg12
I0
sg13
(lp10712
sg15
(lp10713
ssS'wid.tkinter.toplevel.opt.background'
p10714
(dp10715
g4
(lp10716
sg6
S'>option.background.generic "Toplevel"'
p10717
sg8
(lp10718
sg10
(lp10719
sg12
I0
sg13
(lp10720
sg15
(lp10721
ssS'wid.pmw.mainmenubar.opt.name'
p10722
(dp10723
g4
(lp10724
sg6
S">option.name.generic 'MainMenuBar'"
p10725
sg8
(lp10726
sg10
(lp10727
sg12
I0
sg13
(lp10728
sg15
(lp10729
ssS'option.state.generic'
p10730
(dp10731
g4
(lp10732
S'&new mexico tech'
p10733
asg6
S"{H@0 - state}\n\nNormally, @0 widgets respond to keyboard and mouse events; set state to\n{Gnormal} to get this behavior. If you set state to {Gdisabled}, the @0\nwidget will not respond, and you won't be able to modify its contents\nprogrammatically either.\n\n$nmt"
p10734
sg8
(lp10735
sg10
(lp10736
S'2005/04/04'
p10737
asg12
I0
sg13
(lp10738
sg15
(lp10739
ssS'wid.pmw.messagebar.opt.entry'
p10740
(dp10741
g4
(lp10742
sg6
S'{HMessageBar - entry}\n\nThe widget where the messages are displayed. Long messages may be scrolled\nhorizontally by dragging with the middle mouse button.'
p10743
sg8
(lp10744
sg10
(lp10745
S'2006/03/20'
p10746
asg12
I0
sg13
(lp10747
sg15
(lp10748
ssS'buffet.widget.scrolledtext'
p10749
(dp10750
g4
(lp10751
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledText",\'\',\'wid.pmw.scrolledtext.overview\''
p10752
sg8
(lp10753
sg10
(lp10754
sg12
I0
sg13
(lp10755
sg15
(lp10756
ssS'option.insertofftime.generic'
p10757
(dp10758
g4
(lp10759
S'&new mexico tech'
p10760
asg6
S'{H@0 - insertofftime}\n\nThe number of milliseconds the insertion cursor is off during its blink\ncycle.\n\nSet this option to zero to suppress blinking.\n\nDefault is 300.\n\n$nmt'
p10761
sg8
(lp10762
sg10
(lp10763
S'2005/03/03'
p10764
asg12
I0
sg13
(lp10765
sg15
(lp10766
ssS'wid.pmw.scrolledframe.opt.vertflex'
p10767
(dp10768
g4
(lp10769
S'&default'
p10770
asg6
S"{HScrolledFrame - vertiflex}\n\nSpecifies how the height of the scrollable interior frame should be resized\nrelative to the clipping frame.\n\n o If {g'fixed'}, the interior frame is set to the natural height, as requested by\n   the child widgets of the frame. \n\n o If {g'expand'} and the requested height of the\n   interior frame is less than the height of the clipping frame, the interior\n   frame expands to fill the clipping frame. \n   \n o If {g'shrink'} and the requested\n   height of the interior frame is more than the height of the clipping frame,\n   the interior frame shrinks to the height of the clipping frame. \n   \n o If {g'elastic'},\n   the height of the interior frame is always set to the height of the clipping\n   frame. \n   \nThe &default is {g'fixed'}."
p10771
sg8
(lp10772
sg10
(lp10773
S'2006/03/23'
p10774
asg12
I0
sg13
(lp10775
sg15
(lp10776
ssS'wid.pmw.scrolledcanvas.opt.name'
p10777
(dp10778
g4
(lp10779
sg6
S">option.name.generic 'ScrolledCanvas'"
p10780
sg8
(lp10781
sg10
(lp10782
sg12
I0
sg13
(lp10783
sg15
(lp10784
ssS'wid.pmw.combobox.opt.buttonaspect'
p10785
(dp10786
g4
(lp10787
sg6
S">option.pmw.buttonaspect.generic 'ComboBox', 'arrow button'"
p10788
sg8
(lp10789
sg10
(lp10790
sg12
I0
sg13
(lp10791
sg15
(lp10792
ssS'buffet.widget.menubutton'
p10793
(dp10794
g4
(lp10795
sg6
S'>buffet.widget.generic "Menubutton"'
p10796
sg8
(lp10797
sg10
(lp10798
sg12
I0
sg13
(lp10799
sg15
(lp10800
ssS'bindedit.newbutton'
p10801
(dp10802
g4
(lp10803
S'&bind editor'
p10804
aS'=bindassist.general'
p10805
aS'&binding'
p10806
aS'&event'
p10807
aS'&handler'
p10808
asg6
S'{HBind Editor - "Create New Binding" Button}\n\nThis button is part of the &Bind Editor. Clicking on it will bounce you into the\n{LBind Assist=bindassist.general} dialog where you can create a new &binding by\nspecifying the &event you want to respond to and the &handler to implement your\naction.'
p10809
sg8
(lp10810
sg10
(lp10811
S'2005/03/17'
p10812
asg12
I0
sg13
(lp10813
sg15
(lp10814
S'The Create New Binding Button of the Bind Editor'
p10815
assS'event.types'
p10816
(dp10817
g4
(lp10818
S'&event'
p10819
aS'&event'
p10820
aS'&focus'
p10821
aS'&focus'
p10822
aS'&new mexico tech'
p10823
asg6
S'{HBasic Tkinter event types}\n\nThese are the commonly used Tkinter &event types; not included are a number\nof esoteric, infrequently used &events.\n\no {GActivate}  A widget is changing from being inactive to being active. This\n  refers to changes in the state option of a widget such as a button changing\n  from inactive (grayed out) to active.\n\no {gButtonPress}  The user pressed one of the mouse buttons.\n\no {gButtonRelease} The user let up on a mouse button. This is probably a\n  better choice in most cases than the ButtonPress event, because if the user\n  accidentally presses the button, they can move it off the widget to avoid\n  setting off the event.\n\no {GConfigure}  The user changed the size of a widget, for example by\n  dragging a corner or side of the window.\n\no {gDeactivate}  A widget is changing from being active to being inactive.\n  This refers to changes in the state option of a widget such as a\n  radiobutton changing from active to inactive (grayed out).\n\no {gDestroy}  A widget is being destroyed.\n\no {gEnter}  The user moved the mouse pointer into a visible part of a widget.\n  (This is different than the enter key, which is a KeyPress event for a key\n  whose name is actually "return".)\n\no {gExpose}  This event occurs whenever at least some part of your\n  application or widget becomes visible after having been covered up by\n  another window.\n\no {gFocusIn}  A widget got the input &focus. This can happen either in\n  response to a user event (like using the tab key to move focus between\n  widgets) or programmatically (for example, your program calls the\n  {f.focus_set()} on a widget).\n\no {gFocusOut} The input &focus was moved out of a widget. As with FocusIn,\n  the user can cause this event, or your program can cause it.\n\no {gKeyPress}  The user pressed a key on the keyboard.\n\no {gKeyRelease}  The user let up on a key.\n\no {gLeave}  The user moved the mouse pointer out of a widget.\n\no {gMap}  A widget is being mapped, that is, made visible in the application.\n  This will happen, for example, when you call the widget\'s {f.pack()}\n  method.\n\no {gMotion}  The user moved the mouse pointer entirely within a widget.\n\no {gUnmap}  A widget is being unmapped and is no longer visible. This\n  happens, for example, when you use the widget\'s {f.pack_remove()} method.\n\no {gVisibility}  Happens when at least some part of the application window\n  becomes visible on the screen.\n\n$nmt'
p10824
sg8
(lp10825
sg10
(lp10826
S'2006/02/16'
p10827
asg12
I0
sg13
(lp10828
sg15
(lp10829
S'Basic Tkinter event types'
p10830
assS'project.config'
p10831
(dp10832
S'Links'
p10833
(lp10834
sS'Text'
p10835
S'{HPreferences}\n\n$$ doesn\'t have a "preferences" facility per-se. Rather, those things that you can set are looked after by the\nconfig file, "{grapyd.config}".\n\nThe more interesting things that you can do in the config file are:\n\n o Select the editor scheme. These control the key-bindings (which key you need in order to get a particular action)\n   and the colorization colors. You can define your own editor scheme if you are so inclined.\n\n o Set the fonts and font-sizes used by $$.\n\n o Set the type of backup file to be created when you save a $$ project. Choices are no backup file, one backup file\n   or one backup file per save.\n\n o Enable two kinds of automangle. This concerns the name that $$ suggests for new widgets and event-handlers. When\n   turned off you get names like "Button1", when set to "1" you get a singe leading underscore ("_Button1") and when\n   set to "2" you get two leading underscores ("__Button1", full Python name mangling).\n   \n o Set the size at which the Help dialog appears, as a percentage of the size of the screen.\n\nThere is a fair bit of documentation in the config file. If you have specific questions take a look in the file\nitself. To modify the config file you will need to edit it using your favorite text editor.\n\nThe config file has a whole bunch of other stuff in it too, but most of that is of interest only to heavy-duty $$\nhackers.'
p10836
sS'Hotlinks'
p10837
(lp10838
sS'Comments'
p10839
(lp10840
S'2014-04-26'
p10841
asS'Wip'
p10842
I0
sS'Plurals'
p10843
(lp10844
sS'Abstracts'
p10845
(lp10846
S'Preferences: the Config file'
p10847
assS'wid.pmw.panedwidget.overview'
p10848
(dp10849
g4
(lp10850
sg6
S'{HWhat is: A PanedWidget}\n\nA paned widget is a container megawidget which manages a number of resizable frames, known as panes. Each pane may\nact as the container for other widgets. The user may interactively resize the panes by dragging a small rectangle\n(the handle) or the line between the panes (the separator). The panes may be arranged horizontally or vertically.\nEach pane may have maximum and minimum limits of its size.'
p10851
sg8
(lp10852
sg10
(lp10853
S'2006/03/21'
p10854
asg12
I0
sg13
(lp10855
sg15
(lp10856
S'What is: A PanedWidget'
p10857
assS'wid.tkinter.listbox.opt.relief'
p10858
(dp10859
g4
(lp10860
sg6
S'>option.relief.generic "Listbox"'
p10861
sg8
(lp10862
sg10
(lp10863
sg12
I0
sg13
(lp10864
sg15
(lp10865
ssS'option.tearoffcommand.generic'
p10866
(dp10867
g4
(lp10868
S'&new mexico tech'
p10869
asg6
S"{H@0 - tearoffcommand}\n\nIf you would like your program to be notified when the user clicks on the\ntear-off entry in a menu, set this &command option to your procedure. It will be\ncalled with two arguments: the window ID of the parent window, and the window\nID of the new tear-off menu's root window.\n\n$nmt"
p10870
sg8
(lp10871
sg10
(lp10872
S'2005/04/04'
p10873
asg12
I0
sg13
(lp10874
sg15
(lp10875
ssS'wid.pmw.scrolledtext.opt.labelmargin'
p10876
(dp10877
g4
(lp10878
sg6
S">option.pmw.labelmargin.generic 'ScrolledText'"
p10879
sg8
(lp10880
sg10
(lp10881
sg12
I0
sg13
(lp10882
sg15
(lp10883
ssS'layout.canvas'
p10884
(dp10885
g4
(lp10886
sg6
S'>layout-area'
p10887
sg8
(lp10888
sg10
(lp10889
sg12
I0
sg13
(lp10890
sg15
(lp10891
ssS'wid.tkinter.label.opt.anchor'
p10892
(dp10893
g4
(lp10894
sg6
S'{HLabel - anchor}\n\nWhere the text is placed inside the label. Can be one of:\n\n  o {gCenter}\n  o {gN}\n  o {gS}\n  o {gE}\n  o {gW}\n  o {gNW}\n  o {gNE}\n  o {gSW}\n  o {gTSW}\n\nIf the label is exactly the right size to hold the text then this option has\nno effect. If the label is larger, then the text is place close to the\nspecified side (N, S, E, W) or corner (NW, NE, SW, SE). The default is\nCENTER.'
p10895
sg8
(lp10896
sg10
(lp10897
sg12
I0
sg13
(lp10898
sg15
(lp10899
ssS'wid.pmw.radioselect.opt.pyclass'
p10900
(dp10901
g4
(lp10902
sg6
S'>option.pyclass.generic "RadioSelect"'
p10903
sg8
(lp10904
sg10
(lp10905
sg12
I0
sg13
(lp10906
sg15
(lp10907
ssS'wid.pmw.scrolledtext.opt.vscrollmode'
p10908
(dp10909
g4
(lp10910
sg6
S">option.pmw.vscrollmode.generic 'ScrolledText'"
p10911
sg8
(lp10912
sg10
(lp10913
sg12
I0
sg13
(lp10914
sg15
(lp10915
ssS'wid.tkinter.entry.opt.state'
p10916
(dp10917
g4
(lp10918
sg6
S'>option.state.generic "Entry"'
p10919
sg8
(lp10920
sg10
(lp10921
sg12
I0
sg13
(lp10922
sg15
(lp10923
ssS'wid.tkinter.button.opt.text'
p10924
(dp10925
g4
(lp10926
sg6
S'>option.text.generic "Button"'
p10927
sg8
(lp10928
sg10
(lp10929
sg12
I0
sg13
(lp10930
sg15
(lp10931
ssS'bind-display-compound'
p10932
(dp10933
g4
(lp10934
S'&bind editor'
p10935
aS'=bindassist.compound'
p10936
aS'&bind editor'
p10937
asg6
S'{HBind-editor display with compound (eg Pmw) widgets.}\n\nWith regular old Tkinter widgets you bind to the widget and that\'s the end of the story. With compound widgets, such\nas the Pmw widgets, each widget has several component widgets and those component widgets can in turn contain\nadditional widgets. The &bind editor can create bindings to the main widget or to any of the components.\n\nHow to create bindings to compound widgets is covered {Lhere=bindassist.compound}; our present topic is how bindings to\ncompound widgets are shown in the bind editor.\n\nConsider the following &bind editor display which relates to a Pmw Counter widget.\n\n{P$imgpr-help-BindEditorCompound.ppm}\n\nThe first line ({fButRel_1...}) shows an ordinary binding against the widget itself.\n\nThe second line ({fVis...}) shows binding against a component of the widget. The next line ({f-->entryfield.label})\nindicates the exact component of the widget to which the binding pertains, in this case the label component of the\nentryfield component of the Counter widget itself.\n\nThe presence of a line beginning with "{f-->}" indicates that the binding just above is to a component of the\nwidget.'
p10938
sg8
(lp10939
sg10
(lp10940
S'2006/04/13!'
p10941
asg12
I0
sg13
(lp10942
sg15
(lp10943
S'Bind-editor display with compound (eg Pmw) widgets'
p10944
assS'wid.tkinter.canvas.opt.state'
p10945
(dp10946
g4
(lp10947
sg6
S'>option.state.generic "Canvas"'
p10948
sg8
(lp10949
sg10
(lp10950
sg12
I0
sg13
(lp10951
sg15
(lp10952
ssS'wid.pmw.scrolledcanvas.opt.vertscrollbar'
p10953
(dp10954
g4
(lp10955
sg6
S'{HScrolledCanvas - vertscrollbar}\n\nThe vertical scrollbar. Its component group is Scrollbar.'
p10956
sg8
(lp10957
sg10
(lp10958
S'2006/03/22'
p10959
asg12
I0
sg13
(lp10960
sg15
(lp10961
ssS'wid.tkinter.scrollbar.opt.troughcolor'
p10962
(dp10963
g4
(lp10964
sg6
S'>option.troughcolor.generic "Scrollbar"'
p10965
sg8
(lp10966
sg10
(lp10967
sg12
I0
sg13
(lp10968
sg15
(lp10969
ssS'startup.query'
p10970
(dp10971
g4
(lp10972
S'&project'
p10973
aS'&project'
p10974
aS'&project'
p10975
aS'&project'
p10976
asg6
S"{HStartup query}\n\nWhen you start $$ you can specify, on the command line, the name of the &project you want to\nwork on and in that case the &project is opened immediately.\n\nYou didn't specify the name of a &project so right now we need to know if you want to open\nan existing &project or create a new one."
p10977
sg8
(lp10978
sg10
(lp10979
S'2005/05/26'
p10980
asg12
I0
sg13
(lp10981
sg15
(lp10982
ssS'wid.pmw.scrolledfield.opt.name'
p10983
(dp10984
g4
(lp10985
sg6
S">option.name.generic 'ScrolledField'"
p10986
sg8
(lp10987
sg10
(lp10988
sg12
I0
sg13
(lp10989
sg15
(lp10990
ss.